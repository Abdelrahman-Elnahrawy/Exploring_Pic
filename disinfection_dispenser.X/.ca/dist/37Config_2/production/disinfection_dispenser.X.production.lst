

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Fri Sep 20 21:07:56 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og9 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=1
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,space=0,delta=2
    27                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x5E,2
    30     0000                     
    31                           ; Generated 17/08/2023 GMT
    32                           ; 
    33                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC12F675 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65     0004                     fsr             equ	4
    66     0004                     fsr0            equ	4
    67     0000                     indf            equ	0
    68     0000                     indf0           equ	0
    69     0002                     pc              equ	2
    70     0002                     pcl             equ	2
    71     000A                     pclath          equ	10
    72     0003                     status          equ	3
    73     0000                     INDF            equ	0	;# 
    74     0001                     TMR0            equ	1	;# 
    75     0002                     PCL             equ	2	;# 
    76     0003                     STATUS          equ	3	;# 
    77     0004                     FSR             equ	4	;# 
    78     0005                     GPIO            equ	5	;# 
    79     000A                     PCLATH          equ	10	;# 
    80     000B                     INTCON          equ	11	;# 
    81     000C                     PIR1            equ	12	;# 
    82     000E                     TMR1            equ	14	;# 
    83     000E                     TMR1L           equ	14	;# 
    84     000F                     TMR1H           equ	15	;# 
    85     0010                     T1CON           equ	16	;# 
    86     0019                     CMCON           equ	25	;# 
    87     001E                     ADRESH          equ	30	;# 
    88     001F                     ADCON0          equ	31	;# 
    89     0081                     OPTION_REG      equ	129	;# 
    90     0085                     TRISIO          equ	133	;# 
    91     008C                     PIE1            equ	140	;# 
    92     008E                     PCON            equ	142	;# 
    93     0090                     OSCCAL          equ	144	;# 
    94     0095                     WPU             equ	149	;# 
    95     0096                     IOC             equ	150	;# 
    96     0096                     IOCB            equ	150	;# 
    97     0099                     VRCON           equ	153	;# 
    98     009A                     EEDATA          equ	154	;# 
    99     009A                     EEDAT           equ	154	;# 
   100     009B                     EEADR           equ	155	;# 
   101     009C                     EECON1          equ	156	;# 
   102     009D                     EECON2          equ	157	;# 
   103     009E                     ADRESL          equ	158	;# 
   104     009F                     ANSEL           equ	159	;# 
   105     0000                     INDF            equ	0	;# 
   106     0001                     TMR0            equ	1	;# 
   107     0002                     PCL             equ	2	;# 
   108     0003                     STATUS          equ	3	;# 
   109     0004                     FSR             equ	4	;# 
   110     0005                     GPIO            equ	5	;# 
   111     000A                     PCLATH          equ	10	;# 
   112     000B                     INTCON          equ	11	;# 
   113     000C                     PIR1            equ	12	;# 
   114     000E                     TMR1            equ	14	;# 
   115     000E                     TMR1L           equ	14	;# 
   116     000F                     TMR1H           equ	15	;# 
   117     0010                     T1CON           equ	16	;# 
   118     0019                     CMCON           equ	25	;# 
   119     001E                     ADRESH          equ	30	;# 
   120     001F                     ADCON0          equ	31	;# 
   121     0081                     OPTION_REG      equ	129	;# 
   122     0085                     TRISIO          equ	133	;# 
   123     008C                     PIE1            equ	140	;# 
   124     008E                     PCON            equ	142	;# 
   125     0090                     OSCCAL          equ	144	;# 
   126     0095                     WPU             equ	149	;# 
   127     0096                     IOC             equ	150	;# 
   128     0096                     IOCB            equ	150	;# 
   129     0099                     VRCON           equ	153	;# 
   130     009A                     EEDATA          equ	154	;# 
   131     009A                     EEDAT           equ	154	;# 
   132     009B                     EEADR           equ	155	;# 
   133     009C                     EECON1          equ	156	;# 
   134     009D                     EECON2          equ	157	;# 
   135     009E                     ADRESL          equ	158	;# 
   136     009F                     ANSEL           equ	159	;# 
   137     0000                     INDF            equ	0	;# 
   138     0001                     TMR0            equ	1	;# 
   139     0002                     PCL             equ	2	;# 
   140     0003                     STATUS          equ	3	;# 
   141     0004                     FSR             equ	4	;# 
   142     0005                     GPIO            equ	5	;# 
   143     000A                     PCLATH          equ	10	;# 
   144     000B                     INTCON          equ	11	;# 
   145     000C                     PIR1            equ	12	;# 
   146     000E                     TMR1            equ	14	;# 
   147     000E                     TMR1L           equ	14	;# 
   148     000F                     TMR1H           equ	15	;# 
   149     0010                     T1CON           equ	16	;# 
   150     0019                     CMCON           equ	25	;# 
   151     001E                     ADRESH          equ	30	;# 
   152     001F                     ADCON0          equ	31	;# 
   153     0081                     OPTION_REG      equ	129	;# 
   154     0085                     TRISIO          equ	133	;# 
   155     008C                     PIE1            equ	140	;# 
   156     008E                     PCON            equ	142	;# 
   157     0090                     OSCCAL          equ	144	;# 
   158     0095                     WPU             equ	149	;# 
   159     0096                     IOC             equ	150	;# 
   160     0096                     IOCB            equ	150	;# 
   161     0099                     VRCON           equ	153	;# 
   162     009A                     EEDATA          equ	154	;# 
   163     009A                     EEDAT           equ	154	;# 
   164     009B                     EEADR           equ	155	;# 
   165     009C                     EECON1          equ	156	;# 
   166     009D                     EECON2          equ	157	;# 
   167     009E                     ADRESL          equ	158	;# 
   168     009F                     ANSEL           equ	159	;# 
   169     0000                     INDF            equ	0	;# 
   170     0001                     TMR0            equ	1	;# 
   171     0002                     PCL             equ	2	;# 
   172     0003                     STATUS          equ	3	;# 
   173     0004                     FSR             equ	4	;# 
   174     0005                     GPIO            equ	5	;# 
   175     000A                     PCLATH          equ	10	;# 
   176     000B                     INTCON          equ	11	;# 
   177     000C                     PIR1            equ	12	;# 
   178     000E                     TMR1            equ	14	;# 
   179     000E                     TMR1L           equ	14	;# 
   180     000F                     TMR1H           equ	15	;# 
   181     0010                     T1CON           equ	16	;# 
   182     0019                     CMCON           equ	25	;# 
   183     001E                     ADRESH          equ	30	;# 
   184     001F                     ADCON0          equ	31	;# 
   185     0081                     OPTION_REG      equ	129	;# 
   186     0085                     TRISIO          equ	133	;# 
   187     008C                     PIE1            equ	140	;# 
   188     008E                     PCON            equ	142	;# 
   189     0090                     OSCCAL          equ	144	;# 
   190     0095                     WPU             equ	149	;# 
   191     0096                     IOC             equ	150	;# 
   192     0096                     IOCB            equ	150	;# 
   193     0099                     VRCON           equ	153	;# 
   194     009A                     EEDATA          equ	154	;# 
   195     009A                     EEDAT           equ	154	;# 
   196     009B                     EEADR           equ	155	;# 
   197     009C                     EECON1          equ	156	;# 
   198     009D                     EECON2          equ	157	;# 
   199     009E                     ADRESL          equ	158	;# 
   200     009F                     ANSEL           equ	159	;# 
   201     0000                     INDF            equ	0	;# 
   202     0001                     TMR0            equ	1	;# 
   203     0002                     PCL             equ	2	;# 
   204     0003                     STATUS          equ	3	;# 
   205     0004                     FSR             equ	4	;# 
   206     0005                     GPIO            equ	5	;# 
   207     000A                     PCLATH          equ	10	;# 
   208     000B                     INTCON          equ	11	;# 
   209     000C                     PIR1            equ	12	;# 
   210     000E                     TMR1            equ	14	;# 
   211     000E                     TMR1L           equ	14	;# 
   212     000F                     TMR1H           equ	15	;# 
   213     0010                     T1CON           equ	16	;# 
   214     0019                     CMCON           equ	25	;# 
   215     001E                     ADRESH          equ	30	;# 
   216     001F                     ADCON0          equ	31	;# 
   217     0081                     OPTION_REG      equ	129	;# 
   218     0085                     TRISIO          equ	133	;# 
   219     008C                     PIE1            equ	140	;# 
   220     008E                     PCON            equ	142	;# 
   221     0090                     OSCCAL          equ	144	;# 
   222     0095                     WPU             equ	149	;# 
   223     0096                     IOC             equ	150	;# 
   224     0096                     IOCB            equ	150	;# 
   225     0099                     VRCON           equ	153	;# 
   226     009A                     EEDATA          equ	154	;# 
   227     009A                     EEDAT           equ	154	;# 
   228     009B                     EEADR           equ	155	;# 
   229     009C                     EECON1          equ	156	;# 
   230     009D                     EECON2          equ	157	;# 
   231     009E                     ADRESL          equ	158	;# 
   232     009F                     ANSEL           equ	159	;# 
   233     0000                     INDF            equ	0	;# 
   234     0001                     TMR0            equ	1	;# 
   235     0002                     PCL             equ	2	;# 
   236     0003                     STATUS          equ	3	;# 
   237     0004                     FSR             equ	4	;# 
   238     0005                     GPIO            equ	5	;# 
   239     000A                     PCLATH          equ	10	;# 
   240     000B                     INTCON          equ	11	;# 
   241     000C                     PIR1            equ	12	;# 
   242     000E                     TMR1            equ	14	;# 
   243     000E                     TMR1L           equ	14	;# 
   244     000F                     TMR1H           equ	15	;# 
   245     0010                     T1CON           equ	16	;# 
   246     0019                     CMCON           equ	25	;# 
   247     001E                     ADRESH          equ	30	;# 
   248     001F                     ADCON0          equ	31	;# 
   249     0081                     OPTION_REG      equ	129	;# 
   250     0085                     TRISIO          equ	133	;# 
   251     008C                     PIE1            equ	140	;# 
   252     008E                     PCON            equ	142	;# 
   253     0090                     OSCCAL          equ	144	;# 
   254     0095                     WPU             equ	149	;# 
   255     0096                     IOC             equ	150	;# 
   256     0096                     IOCB            equ	150	;# 
   257     0099                     VRCON           equ	153	;# 
   258     009A                     EEDATA          equ	154	;# 
   259     009A                     EEDAT           equ	154	;# 
   260     009B                     EEADR           equ	155	;# 
   261     009C                     EECON1          equ	156	;# 
   262     009D                     EECON2          equ	157	;# 
   263     009E                     ADRESL          equ	158	;# 
   264     009F                     ANSEL           equ	159	;# 
   265     0000                     INDF            equ	0	;# 
   266     0001                     TMR0            equ	1	;# 
   267     0002                     PCL             equ	2	;# 
   268     0003                     STATUS          equ	3	;# 
   269     0004                     FSR             equ	4	;# 
   270     0005                     GPIO            equ	5	;# 
   271     000A                     PCLATH          equ	10	;# 
   272     000B                     INTCON          equ	11	;# 
   273     000C                     PIR1            equ	12	;# 
   274     000E                     TMR1            equ	14	;# 
   275     000E                     TMR1L           equ	14	;# 
   276     000F                     TMR1H           equ	15	;# 
   277     0010                     T1CON           equ	16	;# 
   278     0019                     CMCON           equ	25	;# 
   279     001E                     ADRESH          equ	30	;# 
   280     001F                     ADCON0          equ	31	;# 
   281     0081                     OPTION_REG      equ	129	;# 
   282     0085                     TRISIO          equ	133	;# 
   283     008C                     PIE1            equ	140	;# 
   284     008E                     PCON            equ	142	;# 
   285     0090                     OSCCAL          equ	144	;# 
   286     0095                     WPU             equ	149	;# 
   287     0096                     IOC             equ	150	;# 
   288     0096                     IOCB            equ	150	;# 
   289     0099                     VRCON           equ	153	;# 
   290     009A                     EEDATA          equ	154	;# 
   291     009A                     EEDAT           equ	154	;# 
   292     009B                     EEADR           equ	155	;# 
   293     009C                     EECON1          equ	156	;# 
   294     009D                     EECON2          equ	157	;# 
   295     009E                     ADRESL          equ	158	;# 
   296     009F                     ANSEL           equ	159	;# 
   297                           
   298                           	psect	strings
   299     0362                     __pstrings:
   300     0362                     stringtab:
   301     0362                     __stringtab:
   302     0362                     stringcode:	
   303                           ;	String table - string pointers are 1 byte each
   304                           
   305     0362                     stringdir:
   306     0362  3003               	movlw	high stringdir
   307     0363  008A               	movwf	10
   308     0364  0804               	movf	4,w
   309     0365  0A84               	incf	4,f
   310     0366  0782               	addwf	2,f
   311     0367                     __stringbase:
   312     0367  3400               	retlw	0
   313     0368                     __end_of__stringtab:
   314     0368                     _MAX7219_No_Table:
   315     0368  347E               	retlw	126
   316     0369  3430               	retlw	48
   317     036A  346D               	retlw	109
   318     036B  3479               	retlw	121
   319     036C  3433               	retlw	51
   320     036D  345B               	retlw	91
   321     036E  345F               	retlw	95
   322     036F  3470               	retlw	112
   323     0370  347F               	retlw	127
   324     0371  347B               	retlw	123
   325     0372                     __end_of_MAX7219_No_Table:
   326     000B                     _INTCONbits     set	11
   327     0005                     _GPIO           set	5
   328     001E                     _ADRESH         set	30
   329     001F                     _ADCON0         set	31
   330     0096                     _IOCB           set	150
   331     0095                     _WPU            set	149
   332     0081                     _OPTION_REG     set	129
   333     0085                     _TRISIO         set	133
   334     009E                     _ADRESL         set	158
   335     009F                     _ANSEL          set	159
   336                           
   337                           	psect	cinit
   338     000C                     start_initialization:	
   339                           ; #config settings
   340                           
   341     000C                     __initialization:
   342                           
   343                           ; Clear objects allocated to BANK0
   344     000C  1283               	bcf	3,5	;RP0=0, select bank0
   345     000D  01C8               	clrf	__pbssBANK0& (0+127)
   346     000E  01C9               	clrf	(__pbssBANK0+1)& (0+127)
   347     000F  01CA               	clrf	(__pbssBANK0+2)& (0+127)
   348     0010  01CB               	clrf	(__pbssBANK0+3)& (0+127)
   349     0011  01CC               	clrf	(__pbssBANK0+4)& (0+127)
   350     0012                     end_of_initialization:	
   351                           ;End of C runtime variable initialization code
   352                           
   353     0012                     __end_of__initialization:
   354     0012  0183               	clrf	3
   355     0013  2814               	ljmp	_main	;jump to C main() function
   356                           
   357                           	psect	bssBANK0
   358     0048                     __pbssBANK0:
   359     0048                     _Counter:
   360     0048                     	ds	2
   361     004A                     _DispenserOn:
   362     004A                     	ds	1
   363     004B                     _DIO_State:
   364     004B                     	ds	1
   365     004C                     _BCD_Enabled:
   366     004C                     	ds	1
   367                           
   368                           	psect	cstackCOMMON
   369     0000                     __pcstackCOMMON:
   370     0000                     ??_MAX7219_Init:
   371     0000                     ??_Adc_Init:	
   372                           ; 1 bytes @ 0x0
   373                           
   374     0000                     ??_Dio_init:	
   375                           ; 1 bytes @ 0x0
   376                           
   377     0000                     ??_Gpio_Init:	
   378                           ; 1 bytes @ 0x0
   379                           
   380     0000                     ??_SPI_Init:	
   381                           ; 1 bytes @ 0x0
   382                           
   383     0000                     ??___lwdiv:	
   384                           ; 1 bytes @ 0x0
   385                           
   386     0000                     ??___lwmod:	
   387                           ; 1 bytes @ 0x0
   388                           
   389                           
   390                           	psect	cstackBANK0
   391     0020                     __pcstackBANK0:	
   392                           ; 1 bytes @ 0x0
   393                           
   394     0020                     ?_MAX7219_Init:
   395     0020                     ?_MAX7219_ClearDisplay:	
   396                           ; 1 bytes @ 0x0
   397                           
   398     0020                     ?_Adc_Init:	
   399                           ; 1 bytes @ 0x0
   400                           
   401     0020                     ?_Adc_StartConversion:	
   402                           ; 1 bytes @ 0x0
   403                           
   404     0020                     ?_Dio_Pin_Read:	
   405                           ; 1 bytes @ 0x0
   406                           
   407     0020                     ?_Dio_init:	
   408                           ; 1 bytes @ 0x0
   409                           
   410     0020                     ?_Gpio_Init:	
   411                           ; 1 bytes @ 0x0
   412                           
   413     0020                     ?_SPI_Init:	
   414                           ; 1 bytes @ 0x0
   415                           
   416     0020                     ?_ISR:	
   417                           ; 1 bytes @ 0x0
   418                           
   419     0020                     ?_main:	
   420                           ; 1 bytes @ 0x0
   421                           
   422     0020                     ??_Dio_Pin_Read:	
   423                           ; 2 bytes @ 0x0
   424                           
   425                           
   426                           ; 1 bytes @ 0x0
   427     0020                     	ds	1
   428     0021                     Dio_Pin_Read@pinNumber:
   429                           
   430                           ; 1 bytes @ 0x1
   431     0021                     	ds	1
   432     0022                     ??_ISR:
   433                           
   434                           ; 1 bytes @ 0x2
   435     0022                     	ds	3
   436     0025                     ISR@i:
   437                           
   438                           ; 2 bytes @ 0x5
   439     0025                     	ds	2
   440     0027                     ?_Dio_Pin_Write:
   441     0027                     ?_Dio_Config:	
   442                           ; 1 bytes @ 0x7
   443                           
   444     0027                     ?_Adc_ReadResult:	
   445                           ; 1 bytes @ 0x7
   446                           
   447     0027                     ?___lwdiv:	
   448                           ; 2 bytes @ 0x7
   449                           
   450     0027                     Dio_Pin_Write@state:	
   451                           ; 2 bytes @ 0x7
   452                           
   453     0027                     Dio_Config@direction:	
   454                           ; 1 bytes @ 0x7
   455                           
   456     0027                     ___lwdiv@divisor:	
   457                           ; 1 bytes @ 0x7
   458                           
   459     0027                     ??_Adc_StartConversion:	
   460                           ; 2 bytes @ 0x7
   461                           
   462                           
   463                           ; 1 bytes @ 0x7
   464     0027                     	ds	1
   465     0028                     Adc_StartConversion@channel:
   466     0028                     Dio_Config@state:	
   467                           ; 1 bytes @ 0x8
   468                           
   469     0028                     ??_Dio_Pin_Write:	
   470                           ; 1 bytes @ 0x8
   471                           
   472                           
   473                           ; 1 bytes @ 0x8
   474     0028                     	ds	1
   475     0029                     Dio_Pin_Write@pinNumber:
   476     0029                     Dio_Config@pullType:	
   477                           ; 1 bytes @ 0x9
   478                           
   479     0029                     ___lwdiv@dividend:	
   480                           ; 1 bytes @ 0x9
   481                           
   482     0029                     ??_Adc_ReadResult:	
   483                           ; 2 bytes @ 0x9
   484                           
   485                           
   486                           ; 1 bytes @ 0x9
   487     0029                     	ds	1
   488     002A                     ?_SPI_Send_16bit:
   489     002A                     SPI_Send_16bit@data:	
   490                           ; 1 bytes @ 0xA
   491                           
   492     002A                     ??_Dio_Config:	
   493                           ; 2 bytes @ 0xA
   494                           
   495                           
   496                           ; 1 bytes @ 0xA
   497     002A                     	ds	1
   498     002B                     ___lwdiv@quotient:
   499                           
   500                           ; 2 bytes @ 0xB
   501     002B                     	ds	1
   502     002C                     ??_SPI_Send_16bit:
   503                           
   504                           ; 1 bytes @ 0xC
   505     002C                     	ds	1
   506     002D                     ___lwdiv@counter:
   507                           
   508                           ; 1 bytes @ 0xD
   509     002D                     	ds	1
   510     002E                     ?___lwmod:
   511     002E                     _Dio_Config$71:	
   512                           ; 2 bytes @ 0xE
   513                           
   514     002E                     ___lwmod@divisor:	
   515                           ; 2 bytes @ 0xE
   516                           
   517                           
   518                           ; 2 bytes @ 0xE
   519     002E                     	ds	2
   520     0030                     ?___lmul:
   521     0030                     Dio_Config@pinNumber:	
   522                           ; 4 bytes @ 0x10
   523                           
   524     0030                     ___lwmod@dividend:	
   525                           ; 1 bytes @ 0x10
   526                           
   527     0030                     ___lmul@multiplier:	
   528                           ; 2 bytes @ 0x10
   529                           
   530                           
   531                           ; 4 bytes @ 0x10
   532     0030                     	ds	1
   533     0031                     SPI_Send_16bit@bit:
   534                           
   535                           ; 2 bytes @ 0x11
   536     0031                     	ds	1
   537     0032                     ___lwmod@counter:
   538                           
   539                           ; 1 bytes @ 0x12
   540     0032                     	ds	1
   541     0033                     ?_MAX7219_DisplayData:
   542     0033                     MAX7219_DisplayData@character:	
   543                           ; 1 bytes @ 0x13
   544                           
   545     0033                     ??_MAX7219_ClearDisplay:	
   546                           ; 1 bytes @ 0x13
   547                           
   548                           
   549                           ; 1 bytes @ 0x13
   550     0033                     	ds	1
   551     0034                     ___lmul@multiplicand:
   552     0034                     ??_MAX7219_DisplayData:	
   553                           ; 4 bytes @ 0x14
   554                           
   555                           
   556                           ; 1 bytes @ 0x14
   557     0034                     	ds	1
   558     0035                     MAX7219_ClearDisplay@i:
   559                           
   560                           ; 1 bytes @ 0x15
   561     0035                     	ds	3
   562     0038                     MAX7219_DisplayData@digit:
   563     0038                     ??___lmul:	
   564                           ; 1 bytes @ 0x18
   565                           
   566                           
   567                           ; 1 bytes @ 0x18
   568     0038                     	ds	1
   569     0039                     ___lmul@product:
   570                           
   571                           ; 4 bytes @ 0x19
   572     0039                     	ds	4
   573     003D                     ??_main:
   574                           
   575                           ; 1 bytes @ 0x1D
   576     003D                     	ds	8
   577     0045                     _main$776:
   578                           
   579                           ; 2 bytes @ 0x25
   580     0045                     	ds	2
   581     0047                     main@i:
   582                           
   583                           ; 1 bytes @ 0x27
   584     0047                     	ds	1
   585                           
   586                           	psect	maintext
   587     0014                     __pmaintext:	
   588 ;;
   589 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   590 ;;
   591 ;; *************** function _main *****************
   592 ;; Defined at:
   593 ;;		line 29 in file "main.c"
   594 ;; Parameters:    Size  Location     Type
   595 ;;		None
   596 ;; Auto vars:     Size  Location     Type
   597 ;;  i               1   39[BANK0 ] unsigned char 
   598 ;; Return value:  Size  Location     Type
   599 ;;                  2  162[None  ] int 
   600 ;; Registers used:
   601 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   602 ;; Tracked objects:
   603 ;;		On entry : B00/0
   604 ;;		On exit  : 100/0
   605 ;;		Unchanged: 0/0
   606 ;; Data sizes:     COMMON   BANK0
   607 ;;      Params:         0       0
   608 ;;      Locals:         0       3
   609 ;;      Temps:          0       8
   610 ;;      Totals:         0      11
   611 ;;Total ram usage:       11 bytes
   612 ;; Hardware stack levels required when called: 5
   613 ;; This function calls:
   614 ;;		_Adc_Init
   615 ;;		_Adc_ReadResult
   616 ;;		_Adc_StartConversion
   617 ;;		_Dio_Pin_Write
   618 ;;		_Dio_init
   619 ;;		_Gpio_Init
   620 ;;		_MAX7219_ClearDisplay
   621 ;;		_MAX7219_DisplayData
   622 ;;		_MAX7219_Init
   623 ;;		_SPI_Init
   624 ;;		___lmul
   625 ;;		___lwdiv
   626 ;;		___lwmod
   627 ;; This function is called by:
   628 ;;		Startup code after reset
   629 ;; This function uses a non-reentrant model
   630 ;;
   631                           
   632     0014                     _main:	
   633                           ;psect for function _main
   634                           
   635                           
   636                           ;main.c: 30:         Gpio_Init();
   637                           
   638                           ;incstack = 0
   639                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   640     0014  232B               	fcall	_Gpio_Init
   641                           
   642                           ;main.c: 31:         Dio_init();
   643     0015  2382               	fcall	_Dio_init
   644                           
   645                           ;main.c: 32:         Adc_Init();
   646     0016  2391               	fcall	_Adc_Init
   647                           
   648                           ;main.c: 33:         SPI_Init();
   649     0017  2300               	fcall	_SPI_Init
   650                           
   651                           ;main.c: 34:       MAX7219_Init();
   652     0018  22E5               	fcall	_MAX7219_Init
   653                           
   654                           ;main.c: 35:    IOCB |= (1 << 3);
   655     0019  1683               	bsf	3,5	;RP0=1, select bank1
   656     001A  1596               	bsf	22,3	;volatile
   657                           
   658                           ;main.c: 37:     INTCONbits.GIE = 1;
   659     001B  178B               	bsf	11,7	;volatile
   660                           
   661                           ;main.c: 38:     INTCONbits.PEIE = 1;
   662     001C  170B               	bsf	11,6	;volatile
   663                           
   664                           ;main.c: 39:     INTCONbits.GPIE = 1;
   665     001D  158B               	bsf	11,3	;volatile
   666     001E                     l1293:
   667                           
   668                           ;main.c: 57:         while(DispenserOn){
   669     001E  1283               	bcf	3,5	;RP0=0, select bank0
   670     001F  084A               	movf	_DispenserOn,w
   671     0020  1903               	btfsc	3,2
   672     0021  281E               	goto	l1293
   673                           
   674                           ;main.c: 58:             Adc_StartConversion(ADC_CHANNEL_AN0);
   675     0022  3000               	movlw	0
   676     0023  2372               	fcall	_Adc_StartConversion
   677                           
   678                           ;main.c: 59:             MAX7219_ClearDisplay(); MAX7219_DisplayData(0x04,0x1D); MAX7219
      +                          _DisplayData(0x03,0x15);;
   679     0024  2317               	fcall	_MAX7219_ClearDisplay
   680     0025  301D               	movlw	29
   681     0026  00B3               	movwf	MAX7219_DisplayData@character
   682     0027  3004               	movlw	4
   683     0028  233E               	fcall	_MAX7219_DisplayData
   684     0029  3015               	movlw	21
   685     002A  00B3               	movwf	MAX7219_DisplayData@character
   686     002B  3003               	movlw	3
   687     002C  233E               	fcall	_MAX7219_DisplayData
   688                           
   689                           ;main.c: 60:             for(uint8 i=0; (i<100)&&DispenserOn;i++ )
   690     002D  01C7               	clrf	main@i
   691     002E  283E               	goto	l1253
   692     002F                     l1255:
   693     002F  084A               	movf	_DispenserOn,w
   694     0030  1903               	btfsc	3,2
   695     0031  2842               	goto	l1257
   696                           
   697                           ;main.c: 61:                 {_delay((unsigned long)((10)*(4000000/4000.0)));}
   698     0032  300D               	movlw	13
   699     0033  00BE               	movwf	??_main+1
   700     0034  30FB               	movlw	251
   701     0035  00BD               	movwf	??_main
   702     0036                     u1057:
   703     0036  0BBD               	decfsz	??_main,f
   704     0037  2836               	goto	u1057
   705     0038  0BBE               	decfsz	??_main+1,f
   706     0039  2836               	goto	u1057
   707     003A  283B               	nop2
   708     003B  3001               	movlw	1
   709     003C  1283               	bcf	3,5	;RP0=0, select bank0
   710     003D  07C7               	addwf	main@i,f
   711     003E                     l1253:
   712     003E  3064               	movlw	100
   713     003F  0247               	subwf	main@i,w
   714     0040  1C03               	btfss	3,0
   715     0041  282F               	goto	l1255
   716     0042                     l1257:
   717                           
   718                           ;main.c: 62:             MAX7219_ClearDisplay();
   719     0042  2317               	fcall	_MAX7219_ClearDisplay
   720                           
   721                           ;main.c: 63:             Dio_Pin_Write (4,1);
   722     0043  01A7               	clrf	Dio_Pin_Write@state
   723     0044  0AA7               	incf	Dio_Pin_Write@state,f
   724     0045  3004               	movlw	4
   725     0046  22C6               	fcall	_Dio_Pin_Write
   726                           
   727                           ;main.c: 64:             Counter = 1 + ((uint32)89*Adc_ReadResult()/1024);
   728     0047  2270               	fcall	_Adc_ReadResult
   729     0048  0827               	movf	?_Adc_ReadResult,w
   730     0049  00BD               	movwf	??_main
   731     004A  0828               	movf	?_Adc_ReadResult+1,w
   732     004B  00BE               	movwf	??_main+1
   733     004C  01BF               	clrf	??_main+2
   734     004D  01C0               	clrf	??_main+3
   735     004E  0840               	movf	??_main+3,w
   736     004F  00B3               	movwf	___lmul@multiplier+3
   737     0050  083F               	movf	??_main+2,w
   738     0051  00B2               	movwf	___lmul@multiplier+2
   739     0052  083E               	movf	??_main+1,w
   740     0053  00B1               	movwf	___lmul@multiplier+1
   741     0054  083D               	movf	??_main,w
   742     0055  00B0               	movwf	___lmul@multiplier
   743     0056  3000               	movlw	0
   744     0057  00B7               	movwf	___lmul@multiplicand+3
   745     0058  3000               	movlw	0
   746     0059  00B6               	movwf	___lmul@multiplicand+2
   747     005A  3000               	movlw	0
   748     005B  00B5               	movwf	___lmul@multiplicand+1
   749     005C  3059               	movlw	89
   750     005D  00B4               	movwf	___lmul@multiplicand
   751     005E  21C7               	fcall	___lmul
   752     005F  0830               	movf	?___lmul,w
   753     0060  00C1               	movwf	??_main+4
   754     0061  0831               	movf	?___lmul+1,w
   755     0062  00C2               	movwf	??_main+5
   756     0063  0832               	movf	?___lmul+2,w
   757     0064  00C3               	movwf	??_main+6
   758     0065  0833               	movf	?___lmul+3,w
   759     0066  00C4               	movwf	??_main+7
   760     0067  300A               	movlw	10
   761     0068                     u965:
   762     0068  1003               	clrc
   763     0069  0CC4               	rrf	??_main+7,f
   764     006A  0CC3               	rrf	??_main+6,f
   765     006B  0CC2               	rrf	??_main+5,f
   766     006C  0CC1               	rrf	??_main+4,f
   767     006D  3EFF               	addlw	-1
   768     006E  1D03               	skipz
   769     006F  2868               	goto	u965
   770     0070  0841               	movf	??_main+4,w
   771     0071  3E01               	addlw	1
   772     0072  00C8               	movwf	_Counter
   773     0073  0842               	movf	??_main+5,w
   774     0074  1803               	skipnc
   775     0075  3E01               	addlw	1
   776     0076  3E00               	addlw	0
   777     0077  00C9               	movwf	_Counter+1
   778                           
   779                           ;main.c: 65:             for(;(Counter>0)&&DispenserOn;Counter--){
   780     0078  28EE               	goto	l1277
   781     0079                     l1279:
   782     0079  084A               	movf	_DispenserOn,w
   783     007A  1903               	btfsc	3,2
   784     007B  28F2               	goto	l1281
   785                           
   786                           ;main.c: 66:                 _delay((unsigned long)((800)*(4000000/4000.0)));
   787     007C  3005               	movlw	5
   788     007D  00BF               	movwf	??_main+2
   789     007E  300F               	movlw	15
   790     007F  00BE               	movwf	??_main+1
   791     0080  30F1               	movlw	241
   792     0081  00BD               	movwf	??_main
   793     0082                     u1067:
   794     0082  0BBD               	decfsz	??_main,f
   795     0083  2882               	goto	u1067
   796     0084  0BBE               	decfsz	??_main+1,f
   797     0085  2882               	goto	u1067
   798     0086  0BBF               	decfsz	??_main+2,f
   799     0087  2882               	goto	u1067
   800                           
   801                           ;main.c: 67:                 MAX7219_DisplayData(0x04, MAX7219_No_Table[Counter/600]);
   802     0088  3058               	movlw	88
   803     0089  1283               	bcf	3,5	;RP0=0, select bank0
   804     008A  00A7               	movwf	___lwdiv@divisor
   805     008B  3002               	movlw	2
   806     008C  00A8               	movwf	___lwdiv@divisor+1
   807     008D  0849               	movf	_Counter+1,w
   808     008E  00AA               	movwf	___lwdiv@dividend+1
   809     008F  0848               	movf	_Counter,w
   810     0090  00A9               	movwf	___lwdiv@dividend
   811     0091  2206               	fcall	___lwdiv
   812     0092  0827               	movf	?___lwdiv,w
   813     0093  3E01               	addlw	low ((_MAX7219_No_Table-__stringbase)| (0+32768))
   814     0094  0084               	movwf	4
   815     0095  2362               	fcall	stringdir
   816     0096  00B3               	movwf	MAX7219_DisplayData@character
   817     0097  3004               	movlw	4
   818     0098  233E               	fcall	_MAX7219_DisplayData
   819                           
   820                           ;main.c: 68:                 MAX7219_DisplayData(0x03, MAX7219_No_Table[(Counter/60)%10]
      +                          );
   821     0099  300A               	movlw	10
   822     009A  00AE               	movwf	___lwmod@divisor
   823     009B  3000               	movlw	0
   824     009C  00AF               	movwf	___lwmod@divisor+1
   825     009D  303C               	movlw	60
   826     009E  00A7               	movwf	___lwdiv@divisor
   827     009F  3000               	movlw	0
   828     00A0  00A8               	movwf	___lwdiv@divisor+1
   829     00A1  0849               	movf	_Counter+1,w
   830     00A2  00AA               	movwf	___lwdiv@dividend+1
   831     00A3  0848               	movf	_Counter,w
   832     00A4  00A9               	movwf	___lwdiv@dividend
   833     00A5  2206               	fcall	___lwdiv
   834     00A6  0828               	movf	?___lwdiv+1,w
   835     00A7  00B1               	movwf	___lwmod@dividend+1
   836     00A8  0827               	movf	?___lwdiv,w
   837     00A9  00B0               	movwf	___lwmod@dividend
   838     00AA  2240               	fcall	___lwmod
   839     00AB  082E               	movf	?___lwmod,w
   840     00AC  3E01               	addlw	low ((_MAX7219_No_Table-__stringbase)| (0+32768))
   841     00AD  0084               	movwf	4
   842     00AE  2362               	fcall	stringdir
   843     00AF  00B3               	movwf	MAX7219_DisplayData@character
   844     00B0  3003               	movlw	3
   845     00B1  233E               	fcall	_MAX7219_DisplayData
   846                           
   847                           ;main.c: 69:                 MAX7219_DisplayData(0x02, MAX7219_No_Table[(Counter%60)/10]
      +                          );
   848     00B2  300A               	movlw	10
   849     00B3  00A7               	movwf	___lwdiv@divisor
   850     00B4  3000               	movlw	0
   851     00B5  00A8               	movwf	___lwdiv@divisor+1
   852     00B6  0849               	movf	_Counter+1,w
   853     00B7  00B1               	movwf	___lwmod@dividend+1
   854     00B8  0848               	movf	_Counter,w
   855     00B9  00B0               	movwf	___lwmod@dividend
   856     00BA  303C               	movlw	60
   857     00BB  00AE               	movwf	___lwmod@divisor
   858     00BC  3000               	movlw	0
   859     00BD  00AF               	movwf	___lwmod@divisor+1
   860     00BE  2240               	fcall	___lwmod
   861     00BF  082F               	movf	?___lwmod+1,w
   862     00C0  00AA               	movwf	___lwdiv@dividend+1
   863     00C1  082E               	movf	?___lwmod,w
   864     00C2  00A9               	movwf	___lwdiv@dividend
   865     00C3  2206               	fcall	___lwdiv
   866     00C4  0827               	movf	?___lwdiv,w
   867     00C5  3E01               	addlw	low ((_MAX7219_No_Table-__stringbase)| (0+32768))
   868     00C6  0084               	movwf	4
   869     00C7  2362               	fcall	stringdir
   870     00C8  00B3               	movwf	MAX7219_DisplayData@character
   871     00C9  3002               	movlw	2
   872     00CA  233E               	fcall	_MAX7219_DisplayData
   873                           
   874                           ;main.c: 70:                 MAX7219_DisplayData(0x01, MAX7219_No_Table[(Counter%60)%10]
      +                          );
   875     00CB  0849               	movf	_Counter+1,w
   876     00CC  00B1               	movwf	___lwmod@dividend+1
   877     00CD  0848               	movf	_Counter,w
   878     00CE  00B0               	movwf	___lwmod@dividend
   879     00CF  303C               	movlw	60
   880     00D0  00AE               	movwf	___lwmod@divisor
   881     00D1  3000               	movlw	0
   882     00D2  00AF               	movwf	___lwmod@divisor+1
   883     00D3  2240               	fcall	___lwmod
   884     00D4  082F               	movf	?___lwmod+1,w
   885     00D5  00C6               	movwf	_main$776+1
   886     00D6  082E               	movf	?___lwmod,w
   887     00D7  00C5               	movwf	_main$776
   888                           
   889                           ;main.c: 70:                 MAX7219_DisplayData(0x01, MAX7219_No_Table[(Counter%60)%10]
      +                          );
   890     00D8  300A               	movlw	10
   891     00D9  00AE               	movwf	___lwmod@divisor
   892     00DA  3000               	movlw	0
   893     00DB  00AF               	movwf	___lwmod@divisor+1
   894     00DC  0846               	movf	_main$776+1,w
   895     00DD  00B1               	movwf	___lwmod@dividend+1
   896     00DE  0845               	movf	_main$776,w
   897     00DF  00B0               	movwf	___lwmod@dividend
   898     00E0  2240               	fcall	___lwmod
   899     00E1  082E               	movf	?___lwmod,w
   900     00E2  3E01               	addlw	low ((_MAX7219_No_Table-__stringbase)| (0+32768))
   901     00E3  0084               	movwf	4
   902     00E4  2362               	fcall	stringdir
   903     00E5  00B3               	movwf	MAX7219_DisplayData@character
   904     00E6  3001               	movlw	1
   905     00E7  233E               	fcall	_MAX7219_DisplayData
   906                           
   907                           ;main.c: 71:             }
   908     00E8  3001               	movlw	1
   909     00E9  02C8               	subwf	_Counter,f
   910     00EA  3000               	movlw	0
   911     00EB  1C03               	skipc
   912     00EC  03C9               	decf	_Counter+1,f
   913     00ED  02C9               	subwf	_Counter+1,f
   914     00EE                     l1277:
   915     00EE  0848               	movf	_Counter,w
   916     00EF  0449               	iorwf	_Counter+1,w
   917     00F0  1D03               	btfss	3,2
   918     00F1  2879               	goto	l1279
   919     00F2                     l1281:
   920                           
   921                           ;main.c: 72:             Dio_Pin_Write (4, 0);
   922     00F2  01A7               	clrf	Dio_Pin_Write@state
   923     00F3  3004               	movlw	4
   924     00F4  22C6               	fcall	_Dio_Pin_Write
   925                           
   926                           ;main.c: 73:             DispenserOn=0;
   927     00F5  01CA               	clrf	_DispenserOn
   928                           
   929                           ;main.c: 74:             MAX7219_ClearDisplay(); MAX7219_DisplayData(0x05,0x1D); MAX7219
      +                          _DisplayData(0x04,0x47); MAX7219_DisplayData(0x03,0x47);;
   930     00F6  2317               	fcall	_MAX7219_ClearDisplay
   931     00F7  301D               	movlw	29
   932     00F8  00B3               	movwf	MAX7219_DisplayData@character
   933     00F9  3005               	movlw	5
   934     00FA  233E               	fcall	_MAX7219_DisplayData
   935     00FB  3047               	movlw	71
   936     00FC  00B3               	movwf	MAX7219_DisplayData@character
   937     00FD  3004               	movlw	4
   938     00FE  233E               	fcall	_MAX7219_DisplayData
   939     00FF  3047               	movlw	71
   940     0100  00B3               	movwf	MAX7219_DisplayData@character
   941     0101  3003               	movlw	3
   942     0102  233E               	fcall	_MAX7219_DisplayData
   943     0103  281E               	goto	l1293
   944     0104                     __end_of_main:
   945                           
   946                           	psect	text1
   947     0240                     __ptext1:	
   948 ;; *************** function ___lwmod *****************
   949 ;; Defined at:
   950 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\lwmod.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;  divisor         2   14[BANK0 ] unsigned int 
   953 ;;  dividend        2   16[BANK0 ] unsigned int 
   954 ;; Auto vars:     Size  Location     Type
   955 ;;  counter         1   18[BANK0 ] unsigned char 
   956 ;; Return value:  Size  Location     Type
   957 ;;                  2   14[BANK0 ] unsigned int 
   958 ;; Registers used:
   959 ;;		wreg, status,2, status,0
   960 ;; Tracked objects:
   961 ;;		On entry : 100/0
   962 ;;		On exit  : 100/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMMON   BANK0
   965 ;;      Params:         0       4
   966 ;;      Locals:         0       1
   967 ;;      Temps:          0       0
   968 ;;      Totals:         0       5
   969 ;;Total ram usage:        5 bytes
   970 ;; Hardware stack levels used: 1
   971 ;; Hardware stack levels required when called: 2
   972 ;; This function calls:
   973 ;;		Nothing
   974 ;; This function is called by:
   975 ;;		_main
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979     0240                     ___lwmod:	
   980                           ;psect for function ___lwmod
   981                           
   982                           
   983                           ;incstack = 0
   984                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   985     0240  082E               	movf	___lwmod@divisor,w
   986     0241  042F               	iorwf	___lwmod@divisor+1,w
   987     0242  1903               	btfsc	3,2
   988     0243  2A6B               	goto	l1221
   989     0244  3001               	movlw	1
   990     0245  00B2               	movwf	___lwmod@counter
   991     0246                     l1211:
   992     0246  1BAF               	btfsc	___lwmod@divisor+1,7
   993     0247  2A52               	goto	l1213
   994     0248  3001               	movlw	1
   995     0249                     u895:
   996     0249  1003               	clrc
   997     024A  0DAE               	rlf	___lwmod@divisor,f
   998     024B  0DAF               	rlf	___lwmod@divisor+1,f
   999     024C  3EFF               	addlw	-1
  1000     024D  1D03               	skipz
  1001     024E  2A49               	goto	u895
  1002     024F  3001               	movlw	1
  1003     0250  07B2               	addwf	___lwmod@counter,f
  1004     0251  2A46               	goto	l1211
  1005     0252                     l1213:
  1006     0252  082F               	movf	___lwmod@divisor+1,w
  1007     0253  0231               	subwf	___lwmod@dividend+1,w
  1008     0254  1D03               	skipz
  1009     0255  2A58               	goto	u915
  1010     0256  082E               	movf	___lwmod@divisor,w
  1011     0257  0230               	subwf	___lwmod@dividend,w
  1012     0258                     u915:
  1013     0258  1C03               	skipc
  1014     0259  2A60               	goto	l1217
  1015     025A  082E               	movf	___lwmod@divisor,w
  1016     025B  02B0               	subwf	___lwmod@dividend,f
  1017     025C  082F               	movf	___lwmod@divisor+1,w
  1018     025D  1C03               	skipc
  1019     025E  03B1               	decf	___lwmod@dividend+1,f
  1020     025F  02B1               	subwf	___lwmod@dividend+1,f
  1021     0260                     l1217:
  1022     0260  3001               	movlw	1
  1023     0261                     u925:
  1024     0261  1003               	clrc
  1025     0262  0CAF               	rrf	___lwmod@divisor+1,f
  1026     0263  0CAE               	rrf	___lwmod@divisor,f
  1027     0264  3EFF               	addlw	-1
  1028     0265  1D03               	skipz
  1029     0266  2A61               	goto	u925
  1030     0267  3001               	movlw	1
  1031     0268  02B2               	subwf	___lwmod@counter,f
  1032     0269  1D03               	btfss	3,2
  1033     026A  2A52               	goto	l1213
  1034     026B                     l1221:
  1035     026B  0831               	movf	___lwmod@dividend+1,w
  1036     026C  00AF               	movwf	?___lwmod+1
  1037     026D  0830               	movf	___lwmod@dividend,w
  1038     026E  00AE               	movwf	?___lwmod
  1039     026F  0008               	return
  1040     0270                     __end_of___lwmod:
  1041                           
  1042                           	psect	text2
  1043     0206                     __ptext2:	
  1044 ;; *************** function ___lwdiv *****************
  1045 ;; Defined at:
  1046 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\lwdiv.c"
  1047 ;; Parameters:    Size  Location     Type
  1048 ;;  divisor         2    7[BANK0 ] unsigned int 
  1049 ;;  dividend        2    9[BANK0 ] unsigned int 
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  quotient        2   11[BANK0 ] unsigned int 
  1052 ;;  counter         1   13[BANK0 ] unsigned char 
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  2    7[BANK0 ] unsigned int 
  1055 ;; Registers used:
  1056 ;;		wreg, status,2, status,0
  1057 ;; Tracked objects:
  1058 ;;		On entry : 100/0
  1059 ;;		On exit  : 100/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMMON   BANK0
  1062 ;;      Params:         0       4
  1063 ;;      Locals:         0       3
  1064 ;;      Temps:          0       0
  1065 ;;      Totals:         0       7
  1066 ;;Total ram usage:        7 bytes
  1067 ;; Hardware stack levels used: 1
  1068 ;; Hardware stack levels required when called: 2
  1069 ;; This function calls:
  1070 ;;		Nothing
  1071 ;; This function is called by:
  1072 ;;		_main
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076     0206                     ___lwdiv:	
  1077                           ;psect for function ___lwdiv
  1078                           
  1079                           
  1080                           ;incstack = 0
  1081                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1082     0206  01AB               	clrf	___lwdiv@quotient
  1083     0207  01AC               	clrf	___lwdiv@quotient+1
  1084     0208  0827               	movf	___lwdiv@divisor,w
  1085     0209  0428               	iorwf	___lwdiv@divisor+1,w
  1086     020A  1903               	btfsc	3,2
  1087     020B  2A3B               	goto	l1199
  1088     020C  3001               	movlw	1
  1089     020D  00AD               	movwf	___lwdiv@counter
  1090     020E                     l1187:
  1091     020E  1BA8               	btfsc	___lwdiv@divisor+1,7
  1092     020F  2A1A               	goto	l1189
  1093     0210  3001               	movlw	1
  1094     0211                     u825:
  1095     0211  1003               	clrc
  1096     0212  0DA7               	rlf	___lwdiv@divisor,f
  1097     0213  0DA8               	rlf	___lwdiv@divisor+1,f
  1098     0214  3EFF               	addlw	-1
  1099     0215  1D03               	skipz
  1100     0216  2A11               	goto	u825
  1101     0217  3001               	movlw	1
  1102     0218  07AD               	addwf	___lwdiv@counter,f
  1103     0219  2A0E               	goto	l1187
  1104     021A                     l1189:
  1105     021A  3001               	movlw	1
  1106     021B                     u845:
  1107     021B  1003               	clrc
  1108     021C  0DAB               	rlf	___lwdiv@quotient,f
  1109     021D  0DAC               	rlf	___lwdiv@quotient+1,f
  1110     021E  3EFF               	addlw	-1
  1111     021F  1D03               	skipz
  1112     0220  2A1B               	goto	u845
  1113     0221  0828               	movf	___lwdiv@divisor+1,w
  1114     0222  022A               	subwf	___lwdiv@dividend+1,w
  1115     0223  1D03               	skipz
  1116     0224  2A27               	goto	u855
  1117     0225  0827               	movf	___lwdiv@divisor,w
  1118     0226  0229               	subwf	___lwdiv@dividend,w
  1119     0227                     u855:
  1120     0227  1C03               	skipc
  1121     0228  2A30               	goto	l1195
  1122     0229  0827               	movf	___lwdiv@divisor,w
  1123     022A  02A9               	subwf	___lwdiv@dividend,f
  1124     022B  0828               	movf	___lwdiv@divisor+1,w
  1125     022C  1C03               	skipc
  1126     022D  03AA               	decf	___lwdiv@dividend+1,f
  1127     022E  02AA               	subwf	___lwdiv@dividend+1,f
  1128     022F  142B               	bsf	___lwdiv@quotient,0
  1129     0230                     l1195:
  1130     0230  3001               	movlw	1
  1131     0231                     u865:
  1132     0231  1003               	clrc
  1133     0232  0CA8               	rrf	___lwdiv@divisor+1,f
  1134     0233  0CA7               	rrf	___lwdiv@divisor,f
  1135     0234  3EFF               	addlw	-1
  1136     0235  1D03               	skipz
  1137     0236  2A31               	goto	u865
  1138     0237  3001               	movlw	1
  1139     0238  02AD               	subwf	___lwdiv@counter,f
  1140     0239  1D03               	btfss	3,2
  1141     023A  2A1A               	goto	l1189
  1142     023B                     l1199:
  1143     023B  082C               	movf	___lwdiv@quotient+1,w
  1144     023C  00A8               	movwf	?___lwdiv+1
  1145     023D  082B               	movf	___lwdiv@quotient,w
  1146     023E  00A7               	movwf	?___lwdiv
  1147     023F  0008               	return
  1148     0240                     __end_of___lwdiv:
  1149                           
  1150                           	psect	text3
  1151     01C7                     __ptext3:	
  1152 ;; *************** function ___lmul *****************
  1153 ;; Defined at:
  1154 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul32.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;  multiplier      4   16[BANK0 ] unsigned long 
  1157 ;;  multiplicand    4   20[BANK0 ] unsigned long 
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;  product         4   25[BANK0 ] unsigned long 
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  4   16[BANK0 ] unsigned long 
  1162 ;; Registers used:
  1163 ;;		wreg, status,2, status,0
  1164 ;; Tracked objects:
  1165 ;;		On entry : 100/0
  1166 ;;		On exit  : 100/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMMON   BANK0
  1169 ;;      Params:         0       8
  1170 ;;      Locals:         0       4
  1171 ;;      Temps:          0       1
  1172 ;;      Totals:         0      13
  1173 ;;Total ram usage:       13 bytes
  1174 ;; Hardware stack levels used: 1
  1175 ;; Hardware stack levels required when called: 2
  1176 ;; This function calls:
  1177 ;;		Nothing
  1178 ;; This function is called by:
  1179 ;;		_main
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183     01C7                     ___lmul:	
  1184                           ;psect for function ___lmul
  1185                           
  1186                           
  1187                           ;incstack = 0
  1188                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1189     01C7  3000               	movlw	0
  1190     01C8  00BC               	movwf	___lmul@product+3
  1191     01C9  3000               	movlw	0
  1192     01CA  00BB               	movwf	___lmul@product+2
  1193     01CB  3000               	movlw	0
  1194     01CC  00BA               	movwf	___lmul@product+1
  1195     01CD  3000               	movlw	0
  1196     01CE  00B9               	movwf	___lmul@product
  1197     01CF                     l1165:
  1198     01CF  1C30               	btfss	___lmul@multiplier,0
  1199     01D0  29E5               	goto	l1169
  1200     01D1  0834               	movf	___lmul@multiplicand,w
  1201     01D2  07B9               	addwf	___lmul@product,f
  1202     01D3  0835               	movf	___lmul@multiplicand+1,w
  1203     01D4  1103               	clrz
  1204     01D5  1803               	skipnc
  1205     01D6  3E01               	addlw	1
  1206     01D7  1D03               	btfss	3,2
  1207     01D8  07BA               	addwf	___lmul@product+1,f
  1208     01D9  0836               	movf	___lmul@multiplicand+2,w
  1209     01DA  1103               	clrz
  1210     01DB  1803               	skipnc
  1211     01DC  3E01               	addlw	1
  1212     01DD  1D03               	btfss	3,2
  1213     01DE  07BB               	addwf	___lmul@product+2,f
  1214     01DF  0837               	movf	___lmul@multiplicand+3,w
  1215     01E0  1103               	clrz
  1216     01E1  1803               	skipnc
  1217     01E2  3E01               	addlw	1
  1218     01E3  1D03               	btfss	3,2
  1219     01E4  07BC               	addwf	___lmul@product+3,f
  1220     01E5                     l1169:
  1221     01E5  3001               	movlw	1
  1222     01E6  00B8               	movwf	??___lmul
  1223     01E7                     u785:
  1224     01E7  1003               	clrc
  1225     01E8  0DB4               	rlf	___lmul@multiplicand,f
  1226     01E9  0DB5               	rlf	___lmul@multiplicand+1,f
  1227     01EA  0DB6               	rlf	___lmul@multiplicand+2,f
  1228     01EB  0DB7               	rlf	___lmul@multiplicand+3,f
  1229     01EC  0BB8               	decfsz	??___lmul,f
  1230     01ED  29E7               	goto	u785
  1231     01EE  3001               	movlw	1
  1232     01EF                     u795:
  1233     01EF  1003               	clrc
  1234     01F0  0CB3               	rrf	___lmul@multiplier+3,f
  1235     01F1  0CB2               	rrf	___lmul@multiplier+2,f
  1236     01F2  0CB1               	rrf	___lmul@multiplier+1,f
  1237     01F3  0CB0               	rrf	___lmul@multiplier,f
  1238     01F4  3EFF               	addlw	-1
  1239     01F5  1D03               	skipz
  1240     01F6  29EF               	goto	u795
  1241     01F7  0833               	movf	___lmul@multiplier+3,w
  1242     01F8  0432               	iorwf	___lmul@multiplier+2,w
  1243     01F9  0431               	iorwf	___lmul@multiplier+1,w
  1244     01FA  0430               	iorwf	___lmul@multiplier,w
  1245     01FB  1D03               	skipz
  1246     01FC  29CF               	goto	l1165
  1247     01FD  083C               	movf	___lmul@product+3,w
  1248     01FE  00B3               	movwf	?___lmul+3
  1249     01FF  083B               	movf	___lmul@product+2,w
  1250     0200  00B2               	movwf	?___lmul+2
  1251     0201  083A               	movf	___lmul@product+1,w
  1252     0202  00B1               	movwf	?___lmul+1
  1253     0203  0839               	movf	___lmul@product,w
  1254     0204  00B0               	movwf	?___lmul
  1255     0205  0008               	return
  1256     0206                     __end_of___lmul:
  1257                           
  1258                           	psect	text4
  1259     0300                     __ptext4:	
  1260 ;; *************** function _SPI_Init *****************
  1261 ;; Defined at:
  1262 ;;		line 12 in file "SERVICE/scr/Spi.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;		None
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1    wreg      void 
  1269 ;; Registers used:
  1270 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1271 ;; Tracked objects:
  1272 ;;		On entry : 100/0
  1273 ;;		On exit  : 100/100
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMMON   BANK0
  1276 ;;      Params:         0       0
  1277 ;;      Locals:         0       0
  1278 ;;      Temps:          0       0
  1279 ;;      Totals:         0       0
  1280 ;;Total ram usage:        0 bytes
  1281 ;; Hardware stack levels used: 1
  1282 ;; Hardware stack levels required when called: 3
  1283 ;; This function calls:
  1284 ;;		_Dio_Config
  1285 ;; This function is called by:
  1286 ;;		_main
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290     0300                     _SPI_Init:	
  1291                           ;psect for function _SPI_Init
  1292                           
  1293                           
  1294                           ;SERVICE/scr/Spi.c: 13:  Dio_Config (1, 1, 1 , 0);
  1295                           
  1296                           ;incstack = 0
  1297                           ; Regs used in _SPI_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1298     0300  01A7               	clrf	Dio_Config@direction
  1299     0301  0AA7               	incf	Dio_Config@direction,f
  1300     0302  01A8               	clrf	Dio_Config@state
  1301     0303  0AA8               	incf	Dio_Config@state,f
  1302     0304  01A9               	clrf	Dio_Config@pullType
  1303     0305  3001               	movlw	1
  1304     0306  2104               	fcall	_Dio_Config
  1305                           
  1306                           ;SERVICE/scr/Spi.c: 14:  Dio_Config (2, 1, 0 , 0);
  1307     0307  1283               	bcf	3,5	;RP0=0, select bank0
  1308     0308  01A7               	clrf	Dio_Config@direction
  1309     0309  0AA7               	incf	Dio_Config@direction,f
  1310     030A  01A8               	clrf	Dio_Config@state
  1311     030B  01A9               	clrf	Dio_Config@pullType
  1312     030C  3002               	movlw	2
  1313     030D  2104               	fcall	_Dio_Config
  1314                           
  1315                           ;SERVICE/scr/Spi.c: 15:  Dio_Config (5, 1, 1 , 0);
  1316     030E  1283               	bcf	3,5	;RP0=0, select bank0
  1317     030F  01A7               	clrf	Dio_Config@direction
  1318     0310  0AA7               	incf	Dio_Config@direction,f
  1319     0311  01A8               	clrf	Dio_Config@state
  1320     0312  0AA8               	incf	Dio_Config@state,f
  1321     0313  01A9               	clrf	Dio_Config@pullType
  1322     0314  3005               	movlw	5
  1323     0315  2104               	fcall	_Dio_Config
  1324     0316  0008               	return
  1325     0317                     __end_of_SPI_Init:
  1326                           
  1327                           	psect	text5
  1328     02E5                     __ptext5:	
  1329 ;; *************** function _MAX7219_Init *****************
  1330 ;; Defined at:
  1331 ;;		line 8 in file "HAL/scr/max7219.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;		None
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;		None
  1336 ;; Return value:  Size  Location     Type
  1337 ;;                  1    wreg      void 
  1338 ;; Registers used:
  1339 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1340 ;; Tracked objects:
  1341 ;;		On entry : 100/100
  1342 ;;		On exit  : 100/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMMON   BANK0
  1345 ;;      Params:         0       0
  1346 ;;      Locals:         0       0
  1347 ;;      Temps:          0       0
  1348 ;;      Totals:         0       0
  1349 ;;Total ram usage:        0 bytes
  1350 ;; Hardware stack levels used: 1
  1351 ;; Hardware stack levels required when called: 4
  1352 ;; This function calls:
  1353 ;;		_SPI_Send_16bit
  1354 ;; This function is called by:
  1355 ;;		_main
  1356 ;; This function uses a non-reentrant model
  1357 ;;
  1358                           
  1359     02E5                     _MAX7219_Init:	
  1360                           ;psect for function _MAX7219_Init
  1361                           
  1362                           
  1363                           ;HAL/scr/max7219.c: 9:     SPI_Send_16bit(0x0900);
  1364                           
  1365                           ;incstack = 0
  1366                           ; Regs used in _MAX7219_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1367     02E5  3000               	movlw	0
  1368     02E6  1283               	bcf	3,5	;RP0=0, select bank0
  1369     02E7  00AA               	movwf	SPI_Send_16bit@data
  1370     02E8  3009               	movlw	9
  1371     02E9  00AB               	movwf	SPI_Send_16bit@data+1
  1372     02EA  2179               	fcall	_SPI_Send_16bit
  1373                           
  1374                           ;HAL/scr/max7219.c: 10:     SPI_Send_16bit(0x0A0F);
  1375     02EB  300F               	movlw	15
  1376     02EC  00AA               	movwf	SPI_Send_16bit@data
  1377     02ED  300A               	movlw	10
  1378     02EE  00AB               	movwf	SPI_Send_16bit@data+1
  1379     02EF  2179               	fcall	_SPI_Send_16bit
  1380                           
  1381                           ;HAL/scr/max7219.c: 11:     SPI_Send_16bit(0xFBF7);
  1382     02F0  30F7               	movlw	247
  1383     02F1  00AA               	movwf	SPI_Send_16bit@data
  1384     02F2  30FB               	movlw	251
  1385     02F3  00AB               	movwf	SPI_Send_16bit@data+1
  1386     02F4  2179               	fcall	_SPI_Send_16bit
  1387                           
  1388                           ;HAL/scr/max7219.c: 12:     SPI_Send_16bit(0x0C01);
  1389     02F5  3001               	movlw	1
  1390     02F6  00AA               	movwf	SPI_Send_16bit@data
  1391     02F7  300C               	movlw	12
  1392     02F8  00AB               	movwf	SPI_Send_16bit@data+1
  1393     02F9  2179               	fcall	_SPI_Send_16bit
  1394                           
  1395                           ;HAL/scr/max7219.c: 13:     SPI_Send_16bit(0x0F00);
  1396     02FA  3000               	movlw	0
  1397     02FB  00AA               	movwf	SPI_Send_16bit@data
  1398     02FC  300F               	movlw	15
  1399     02FD  00AB               	movwf	SPI_Send_16bit@data+1
  1400     02FE  2179               	fcall	_SPI_Send_16bit
  1401     02FF  0008               	return
  1402     0300                     __end_of_MAX7219_Init:
  1403                           
  1404                           	psect	text6
  1405     033E                     __ptext6:	
  1406 ;; *************** function _MAX7219_DisplayData *****************
  1407 ;; Defined at:
  1408 ;;		line 26 in file "HAL/scr/max7219.c"
  1409 ;; Parameters:    Size  Location     Type
  1410 ;;  digit           1    wreg     unsigned char 
  1411 ;;  character       1   19[BANK0 ] unsigned char 
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;  digit           1   24[BANK0 ] unsigned char 
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  1    wreg      void 
  1416 ;; Registers used:
  1417 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1418 ;; Tracked objects:
  1419 ;;		On entry : 100/0
  1420 ;;		On exit  : 100/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMMON   BANK0
  1423 ;;      Params:         0       1
  1424 ;;      Locals:         0       1
  1425 ;;      Temps:          0       4
  1426 ;;      Totals:         0       6
  1427 ;;Total ram usage:        6 bytes
  1428 ;; Hardware stack levels used: 1
  1429 ;; Hardware stack levels required when called: 4
  1430 ;; This function calls:
  1431 ;;		_SPI_Send_16bit
  1432 ;; This function is called by:
  1433 ;;		_main
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437     033E                     _MAX7219_DisplayData:	
  1438                           ;psect for function _MAX7219_DisplayData
  1439                           
  1440                           
  1441                           ;incstack = 0
  1442                           ; Regs used in _MAX7219_DisplayData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1443                           ;MAX7219_DisplayData@digit stored from wreg
  1444     033E  00B8               	movwf	MAX7219_DisplayData@digit
  1445                           
  1446                           ;HAL/scr/max7219.c: 27:     SPI_Send_16bit((digit) << 8 | character);
  1447     033F  0833               	movf	MAX7219_DisplayData@character,w
  1448     0340  00B4               	movwf	??_MAX7219_DisplayData
  1449     0341  01B5               	clrf	??_MAX7219_DisplayData+1
  1450     0342  0838               	movf	MAX7219_DisplayData@digit,w
  1451     0343  00B6               	movwf	??_MAX7219_DisplayData+2
  1452     0344  01B7               	clrf	??_MAX7219_DisplayData+3
  1453     0345  0836               	movf	??_MAX7219_DisplayData+2,w
  1454     0346  00B7               	movwf	??_MAX7219_DisplayData+3
  1455     0347  01B6               	clrf	??_MAX7219_DisplayData+2
  1456     0348  0834               	movf	??_MAX7219_DisplayData,w
  1457     0349  0436               	iorwf	??_MAX7219_DisplayData+2,w
  1458     034A  00AA               	movwf	SPI_Send_16bit@data
  1459     034B  0835               	movf	??_MAX7219_DisplayData+1,w
  1460     034C  0437               	iorwf	??_MAX7219_DisplayData+3,w
  1461     034D  00AB               	movwf	SPI_Send_16bit@data+1
  1462     034E  2179               	fcall	_SPI_Send_16bit
  1463     034F  0008               	return
  1464     0350                     __end_of_MAX7219_DisplayData:
  1465                           
  1466                           	psect	text7
  1467     0317                     __ptext7:	
  1468 ;; *************** function _MAX7219_ClearDisplay *****************
  1469 ;; Defined at:
  1470 ;;		line 19 in file "HAL/scr/max7219.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;		None
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;  i               1   21[BANK0 ] unsigned char 
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  1    wreg      void 
  1477 ;; Registers used:
  1478 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 100/0
  1481 ;;		On exit  : 100/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMMON   BANK0
  1484 ;;      Params:         0       0
  1485 ;;      Locals:         0       1
  1486 ;;      Temps:          0       2
  1487 ;;      Totals:         0       3
  1488 ;;Total ram usage:        3 bytes
  1489 ;; Hardware stack levels used: 1
  1490 ;; Hardware stack levels required when called: 4
  1491 ;; This function calls:
  1492 ;;		_SPI_Send_16bit
  1493 ;; This function is called by:
  1494 ;;		_main
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498     0317                     _MAX7219_ClearDisplay:	
  1499                           ;psect for function _MAX7219_ClearDisplay
  1500                           
  1501                           
  1502                           ;HAL/scr/max7219.c: 20:     for (uint8_t i = 0x01; i <= 0x08; i++) {
  1503                           
  1504                           ;incstack = 0
  1505                           ; Regs used in _MAX7219_ClearDisplay: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1506     0317  3001               	movlw	1
  1507     0318  00B5               	movwf	MAX7219_ClearDisplay@i
  1508     0319                     l1085:
  1509                           
  1510                           ;HAL/scr/max7219.c: 21:         SPI_Send_16bit((i << 8) );
  1511     0319  0835               	movf	MAX7219_ClearDisplay@i,w
  1512     031A  00B3               	movwf	??_MAX7219_ClearDisplay
  1513     031B  01B4               	clrf	??_MAX7219_ClearDisplay+1
  1514     031C  0833               	movf	??_MAX7219_ClearDisplay,w
  1515     031D  00B4               	movwf	??_MAX7219_ClearDisplay+1
  1516     031E  01B3               	clrf	??_MAX7219_ClearDisplay
  1517     031F  0833               	movf	??_MAX7219_ClearDisplay,w
  1518     0320  00AA               	movwf	SPI_Send_16bit@data
  1519     0321  0834               	movf	??_MAX7219_ClearDisplay+1,w
  1520     0322  00AB               	movwf	SPI_Send_16bit@data+1
  1521     0323  2179               	fcall	_SPI_Send_16bit
  1522                           
  1523                           ;HAL/scr/max7219.c: 22:     }
  1524     0324  3001               	movlw	1
  1525     0325  07B5               	addwf	MAX7219_ClearDisplay@i,f
  1526     0326  3009               	movlw	9
  1527     0327  0235               	subwf	MAX7219_ClearDisplay@i,w
  1528     0328  1803               	btfsc	3,0
  1529     0329  0008               	return
  1530     032A  2B19               	goto	l1085
  1531     032B                     __end_of_MAX7219_ClearDisplay:
  1532                           
  1533                           	psect	text8
  1534     0179                     __ptext8:	
  1535 ;; *************** function _SPI_Send_16bit *****************
  1536 ;; Defined at:
  1537 ;;		line 39 in file "SERVICE/scr/Spi.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  data            2   10[BANK0 ] unsigned short 
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  bit             2   17[BANK0 ] int 
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      void 
  1544 ;; Registers used:
  1545 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1546 ;; Tracked objects:
  1547 ;;		On entry : 100/0
  1548 ;;		On exit  : 100/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMMON   BANK0
  1551 ;;      Params:         0       2
  1552 ;;      Locals:         0       2
  1553 ;;      Temps:          0       5
  1554 ;;      Totals:         0       9
  1555 ;;Total ram usage:        9 bytes
  1556 ;; Hardware stack levels used: 1
  1557 ;; Hardware stack levels required when called: 3
  1558 ;; This function calls:
  1559 ;;		_Dio_Pin_Write
  1560 ;; This function is called by:
  1561 ;;		_MAX7219_Init
  1562 ;;		_MAX7219_ClearDisplay
  1563 ;;		_MAX7219_DisplayData
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567     0179                     _SPI_Send_16bit:	
  1568                           ;psect for function _SPI_Send_16bit
  1569                           
  1570                           
  1571                           ;SERVICE/scr/Spi.c: 40:     Dio_Pin_Write(5, 0);
  1572                           
  1573                           ;incstack = 0
  1574                           ; Regs used in _SPI_Send_16bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1575     0179  01A7               	clrf	Dio_Pin_Write@state
  1576     017A  3005               	movlw	5
  1577     017B  22C6               	fcall	_Dio_Pin_Write
  1578                           
  1579                           ;SERVICE/scr/Spi.c: 41:     for (int bit =0 ; bit <16 ; bit ++ ) {
  1580     017C  01B1               	clrf	SPI_Send_16bit@bit
  1581     017D  01B2               	clrf	SPI_Send_16bit@bit+1
  1582     017E                     l1035:
  1583                           
  1584                           ;SERVICE/scr/Spi.c: 43:         if (data & (1 << (15 - bit))) {
  1585     017E  1283               	bcf	3,5	;RP0=0, select bank0
  1586     017F  0831               	movf	SPI_Send_16bit@bit,w
  1587     0180  3C0F               	sublw	15
  1588     0181  00AC               	movwf	??_SPI_Send_16bit
  1589     0182  0AAC               	incf	??_SPI_Send_16bit,f
  1590     0183  3001               	movlw	1
  1591     0184  00AD               	movwf	??_SPI_Send_16bit+1
  1592     0185  3000               	movlw	0
  1593     0186  00AE               	movwf	??_SPI_Send_16bit+2
  1594     0187  298B               	goto	u564
  1595     0188                     u565:
  1596     0188  1003               	clrc
  1597     0189  0DAD               	rlf	??_SPI_Send_16bit+1,f
  1598     018A  0DAE               	rlf	??_SPI_Send_16bit+2,f
  1599     018B                     u564:
  1600     018B  0BAC               	decfsz	??_SPI_Send_16bit,f
  1601     018C  2988               	goto	u565
  1602     018D  082A               	movf	SPI_Send_16bit@data,w
  1603     018E  052D               	andwf	??_SPI_Send_16bit+1,w
  1604     018F  00AF               	movwf	??_SPI_Send_16bit+3
  1605     0190  082B               	movf	SPI_Send_16bit@data+1,w
  1606     0191  052E               	andwf	??_SPI_Send_16bit+2,w
  1607     0192  00B0               	movwf	??_SPI_Send_16bit+4
  1608     0193  082F               	movf	??_SPI_Send_16bit+3,w
  1609     0194  0430               	iorwf	??_SPI_Send_16bit+4,w
  1610     0195  1903               	btfsc	3,2
  1611     0196  299A               	goto	l1039
  1612                           
  1613                           ;SERVICE/scr/Spi.c: 44:             Dio_Pin_Write(1, 1);
  1614     0197  01A7               	clrf	Dio_Pin_Write@state
  1615     0198  0AA7               	incf	Dio_Pin_Write@state,f
  1616     0199  299B               	goto	L1
  1617     019A                     l1039:	
  1618                           ;SERVICE/scr/Spi.c: 45:         } else {
  1619                           
  1620                           
  1621                           ;SERVICE/scr/Spi.c: 46:            Dio_Pin_Write(1, 0) ;
  1622     019A  01A7               	clrf	Dio_Pin_Write@state
  1623     019B                     L1:
  1624     019B  3001               	movlw	1
  1625     019C  22C6               	fcall	_Dio_Pin_Write
  1626                           
  1627                           ;SERVICE/scr/Spi.c: 49:   _delay((unsigned long)((50)*(4000000/4000000.0)));; Dio_Pin_Wr
      +                          ite(2, 1); _delay((unsigned long)((50)*(4000000/4000000.0)));; Dio_Pin_Write(2, 0);;
  1628     019D  3010               	movlw	16
  1629     019E  00AC               	movwf	??_SPI_Send_16bit
  1630     019F                     u1077:
  1631     019F  0BAC               	decfsz	??_SPI_Send_16bit,f
  1632     01A0  299F               	goto	u1077
  1633     01A1  0000               	nop
  1634     01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1635     01A3  01A7               	clrf	Dio_Pin_Write@state
  1636     01A4  0AA7               	incf	Dio_Pin_Write@state,f
  1637     01A5  3002               	movlw	2
  1638     01A6  22C6               	fcall	_Dio_Pin_Write
  1639     01A7  3010               	movlw	16
  1640     01A8  00AC               	movwf	??_SPI_Send_16bit
  1641     01A9                     u1087:
  1642     01A9  0BAC               	decfsz	??_SPI_Send_16bit,f
  1643     01AA  29A9               	goto	u1087
  1644     01AB  0000               	nop
  1645     01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1646     01AD  01A7               	clrf	Dio_Pin_Write@state
  1647     01AE  3002               	movlw	2
  1648     01AF  22C6               	fcall	_Dio_Pin_Write
  1649                           
  1650                           ;SERVICE/scr/Spi.c: 50:     }
  1651     01B0  3001               	movlw	1
  1652     01B1  07B1               	addwf	SPI_Send_16bit@bit,f
  1653     01B2  1803               	skipnc
  1654     01B3  0AB2               	incf	SPI_Send_16bit@bit+1,f
  1655     01B4  3000               	movlw	0
  1656     01B5  07B2               	addwf	SPI_Send_16bit@bit+1,f
  1657     01B6  0832               	movf	SPI_Send_16bit@bit+1,w
  1658     01B7  3A80               	xorlw	128
  1659     01B8  00DF               	movwf	95
  1660     01B9  3080               	movlw	128
  1661     01BA  025F               	subwf	95,w
  1662     01BB  1D03               	skipz
  1663     01BC  29BF               	goto	u585
  1664     01BD  3010               	movlw	16
  1665     01BE  0231               	subwf	SPI_Send_16bit@bit,w
  1666     01BF                     u585:
  1667     01BF  1C03               	skipc
  1668     01C0  297E               	goto	l1035
  1669                           
  1670                           ;SERVICE/scr/Spi.c: 51:     Dio_Pin_Write(5, 1);
  1671     01C1  1283               	bcf	3,5	;RP0=0, select bank0
  1672     01C2  01A7               	clrf	Dio_Pin_Write@state
  1673     01C3  0AA7               	incf	Dio_Pin_Write@state,f
  1674     01C4  3005               	movlw	5
  1675     01C5  22C6               	fcall	_Dio_Pin_Write
  1676     01C6  0008               	return
  1677     01C7                     __end_of_SPI_Send_16bit:
  1678                           
  1679                           	psect	text9
  1680     02C6                     __ptext9:	
  1681 ;; *************** function _Dio_Pin_Write *****************
  1682 ;; Defined at:
  1683 ;;		line 30 in file "MCAL/scr/Dio.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;  pinNumber       1    wreg     unsigned char 
  1686 ;;  state           1    7[BANK0 ] unsigned char 
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;  pinNumber       1    9[BANK0 ] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2, status,0
  1693 ;; Tracked objects:
  1694 ;;		On entry : 100/0
  1695 ;;		On exit  : 100/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMMON   BANK0
  1698 ;;      Params:         0       1
  1699 ;;      Locals:         0       1
  1700 ;;      Temps:          0       1
  1701 ;;      Totals:         0       3
  1702 ;;Total ram usage:        3 bytes
  1703 ;; Hardware stack levels used: 1
  1704 ;; Hardware stack levels required when called: 2
  1705 ;; This function calls:
  1706 ;;		Nothing
  1707 ;; This function is called by:
  1708 ;;		_SPI_Send_16bit
  1709 ;;		_main
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713     02C6                     _Dio_Pin_Write:	
  1714                           ;psect for function _Dio_Pin_Write
  1715                           
  1716                           
  1717                           ;incstack = 0
  1718                           ; Regs used in _Dio_Pin_Write: [wreg+status,2+status,0]
  1719                           ;Dio_Pin_Write@pinNumber stored from wreg
  1720     02C6  00A9               	movwf	Dio_Pin_Write@pinNumber
  1721                           
  1722                           ;MCAL/scr/Dio.c: 32:     if (state == 1) {
  1723     02C7  0327               	decf	Dio_Pin_Write@state,w
  1724     02C8  1D03               	btfss	3,2
  1725     02C9  2AD6               	goto	l1023
  1726                           
  1727                           ;MCAL/scr/Dio.c: 33:         DIO_State |= (1 << pinNumber);
  1728     02CA  3001               	movlw	1
  1729     02CB  00A8               	movwf	??_Dio_Pin_Write
  1730     02CC  0A29               	incf	Dio_Pin_Write@pinNumber,w
  1731     02CD  2AD0               	goto	u544
  1732     02CE                     u545:
  1733     02CE  1003               	clrc
  1734     02CF  0DA8               	rlf	??_Dio_Pin_Write,f
  1735     02D0                     u544:
  1736     02D0  3EFF               	addlw	-1
  1737     02D1  1D03               	skipz
  1738     02D2  2ACE               	goto	u545
  1739     02D3  0828               	movf	??_Dio_Pin_Write,w
  1740     02D4  04CB               	iorwf	_DIO_State,f
  1741                           
  1742                           ;MCAL/scr/Dio.c: 34:     }
  1743     02D5  2AE2               	goto	l1025
  1744     02D6                     l1023:
  1745                           
  1746                           ;MCAL/scr/Dio.c: 36:         DIO_State &= ~(1 << pinNumber);
  1747     02D6  3001               	movlw	1
  1748     02D7  00A8               	movwf	??_Dio_Pin_Write
  1749     02D8  0A29               	incf	Dio_Pin_Write@pinNumber,w
  1750     02D9  2ADC               	goto	u554
  1751     02DA                     u555:
  1752     02DA  1003               	clrc
  1753     02DB  0DA8               	rlf	??_Dio_Pin_Write,f
  1754     02DC                     u554:
  1755     02DC  3EFF               	addlw	-1
  1756     02DD  1D03               	skipz
  1757     02DE  2ADA               	goto	u555
  1758     02DF  0828               	movf	??_Dio_Pin_Write,w
  1759     02E0  3AFF               	xorlw	255
  1760     02E1  05CB               	andwf	_DIO_State,f
  1761     02E2                     l1025:
  1762                           
  1763                           ;MCAL/scr/Dio.c: 38:     GPIO = DIO_State ;
  1764     02E2  084B               	movf	_DIO_State,w
  1765     02E3  0085               	movwf	5	;volatile
  1766     02E4  0008               	return
  1767     02E5                     __end_of_Dio_Pin_Write:
  1768                           
  1769                           	psect	text10
  1770     032B                     __ptext10:	
  1771 ;; *************** function _Gpio_Init *****************
  1772 ;; Defined at:
  1773 ;;		line 23 in file "MCAL/scr/gpio.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;		None
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;		None
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  1    wreg      void 
  1780 ;; Registers used:
  1781 ;;		wreg, status,2, status,0
  1782 ;; Tracked objects:
  1783 ;;		On entry : B00/0
  1784 ;;		On exit  : B00/100
  1785 ;;		Unchanged: A00/0
  1786 ;; Data sizes:     COMMON   BANK0
  1787 ;;      Params:         0       0
  1788 ;;      Locals:         0       0
  1789 ;;      Temps:          0       0
  1790 ;;      Totals:         0       0
  1791 ;;Total ram usage:        0 bytes
  1792 ;; Hardware stack levels used: 1
  1793 ;; Hardware stack levels required when called: 2
  1794 ;; This function calls:
  1795 ;;		Nothing
  1796 ;; This function is called by:
  1797 ;;		_main
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801     032B                     _Gpio_Init:	
  1802                           ;psect for function _Gpio_Init
  1803                           
  1804                           
  1805                           ;MCAL/scr/gpio.c: 30:         ANSEL |= (1 << 0);
  1806                           
  1807                           ;incstack = 0
  1808                           ; Regs used in _Gpio_Init: [wreg+status,2+status,0]
  1809     032B  1683               	bsf	3,5	;RP0=1, select bank1
  1810     032C  141F               	bsf	31,0	;volatile
  1811                           
  1812                           ;MCAL/scr/gpio.c: 31:         TRISIO |= (1 << 0);
  1813     032D  1405               	bsf	5,0	;volatile
  1814                           
  1815                           ;MCAL/scr/gpio.c: 52:         ANSEL &= ~(1 << 1);
  1816     032E  30FD               	movlw	253
  1817     032F  059F               	andwf	31,f	;volatile
  1818                           
  1819                           ;MCAL/scr/gpio.c: 53:         TRISIO &= ~(1 << 1);
  1820     0330  30FD               	movlw	253
  1821     0331  0585               	andwf	5,f	;volatile
  1822                           
  1823                           ;MCAL/scr/gpio.c: 70:         ANSEL &= ~(1 << 2);
  1824     0332  30FB               	movlw	251
  1825     0333  059F               	andwf	31,f	;volatile
  1826                           
  1827                           ;MCAL/scr/gpio.c: 71:         TRISIO &= ~(1 << 2);
  1828     0334  30FB               	movlw	251
  1829     0335  0585               	andwf	5,f	;volatile
  1830                           
  1831                           ;MCAL/scr/gpio.c: 76:         TRISIO |= (1 << 3);
  1832     0336  1585               	bsf	5,3	;volatile
  1833                           
  1834                           ;MCAL/scr/gpio.c: 83:         ANSEL &= ~(1 << 3);
  1835     0337  30F7               	movlw	247
  1836     0338  059F               	andwf	31,f	;volatile
  1837                           
  1838                           ;MCAL/scr/gpio.c: 84:         TRISIO &= ~(1 << 4);
  1839     0339  30EF               	movlw	239
  1840     033A  0585               	andwf	5,f	;volatile
  1841                           
  1842                           ;MCAL/scr/gpio.c: 102:         TRISIO &= ~(1 << 5);
  1843     033B  30DF               	movlw	223
  1844     033C  0585               	andwf	5,f	;volatile
  1845     033D  0008               	return
  1846     033E                     __end_of_Gpio_Init:
  1847                           
  1848                           	psect	text11
  1849     0382                     __ptext11:	
  1850 ;; *************** function _Dio_init *****************
  1851 ;; Defined at:
  1852 ;;		line 60 in file "MCAL/scr/Dio.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;		None
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;		None
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      void 
  1859 ;; Registers used:
  1860 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1861 ;; Tracked objects:
  1862 ;;		On entry : B00/100
  1863 ;;		On exit  : 100/100
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMMON   BANK0
  1866 ;;      Params:         0       0
  1867 ;;      Locals:         0       0
  1868 ;;      Temps:          0       0
  1869 ;;      Totals:         0       0
  1870 ;;Total ram usage:        0 bytes
  1871 ;; Hardware stack levels used: 1
  1872 ;; Hardware stack levels required when called: 3
  1873 ;; This function calls:
  1874 ;;		_Dio_Config
  1875 ;; This function is called by:
  1876 ;;		_main
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880     0382                     _Dio_init:	
  1881                           ;psect for function _Dio_init
  1882                           
  1883                           
  1884                           ;MCAL/scr/Dio.c: 72:        Dio_Config (3, 0, 0, 1);
  1885                           
  1886                           ;incstack = 0
  1887                           ; Regs used in _Dio_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1888     0382  1283               	bcf	3,5	;RP0=0, select bank0
  1889     0383  01A7               	clrf	Dio_Config@direction
  1890     0384  01A8               	clrf	Dio_Config@state
  1891     0385  01A9               	clrf	Dio_Config@pullType
  1892     0386  0AA9               	incf	Dio_Config@pullType,f
  1893     0387  3003               	movlw	3
  1894     0388  2104               	fcall	_Dio_Config
  1895                           
  1896                           ;MCAL/scr/Dio.c: 75:        Dio_Config (4, 1, 0, 0);
  1897     0389  1283               	bcf	3,5	;RP0=0, select bank0
  1898     038A  01A7               	clrf	Dio_Config@direction
  1899     038B  0AA7               	incf	Dio_Config@direction,f
  1900     038C  01A8               	clrf	Dio_Config@state
  1901     038D  01A9               	clrf	Dio_Config@pullType
  1902     038E  3004               	movlw	4
  1903     038F  2104               	fcall	_Dio_Config
  1904     0390  0008               	return
  1905     0391                     __end_of_Dio_init:
  1906                           
  1907                           	psect	text12
  1908     0104                     __ptext12:	
  1909 ;; *************** function _Dio_Config *****************
  1910 ;; Defined at:
  1911 ;;		line 41 in file "MCAL/scr/Dio.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;  pinNumber       1    wreg     unsigned char 
  1914 ;;  direction       1    7[BANK0 ] unsigned char 
  1915 ;;  state           1    8[BANK0 ] unsigned char 
  1916 ;;  pullType        1    9[BANK0 ] unsigned char 
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;  pinNumber       1   16[BANK0 ] unsigned char 
  1919 ;; Return value:  Size  Location     Type
  1920 ;;                  1    wreg      void 
  1921 ;; Registers used:
  1922 ;;		wreg, status,2, status,0, btemp+1
  1923 ;; Tracked objects:
  1924 ;;		On entry : 100/0
  1925 ;;		On exit  : 100/100
  1926 ;;		Unchanged: 0/0
  1927 ;; Data sizes:     COMMON   BANK0
  1928 ;;      Params:         0       3
  1929 ;;      Locals:         0       3
  1930 ;;      Temps:          0       4
  1931 ;;      Totals:         0      10
  1932 ;;Total ram usage:       10 bytes
  1933 ;; Hardware stack levels used: 1
  1934 ;; Hardware stack levels required when called: 2
  1935 ;; This function calls:
  1936 ;;		Nothing
  1937 ;; This function is called by:
  1938 ;;		_Dio_init
  1939 ;;		_SPI_Init
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943     0104                     _Dio_Config:	
  1944                           ;psect for function _Dio_Config
  1945                           
  1946                           
  1947                           ;incstack = 0
  1948                           ; Regs used in _Dio_Config: [wreg+status,2+status,0+btemp+1]
  1949                           ;Dio_Config@pinNumber stored from wreg
  1950     0104  00B0               	movwf	Dio_Config@pinNumber
  1951                           
  1952                           ;MCAL/scr/Dio.c: 43:     TRISIO = (unsigned char)((direction == 0) ? (TRISIO | (1U << pi
      +                          nNumber)) : (TRISIO & ~(1U << pinNumber)));
  1953     0105  0827               	movf	Dio_Config@direction,w
  1954     0106  1903               	btfsc	3,2
  1955     0107  291C               	goto	l1057
  1956     0108  3001               	movlw	1
  1957     0109  00AA               	movwf	??_Dio_Config
  1958     010A  0A30               	incf	Dio_Config@pinNumber,w
  1959     010B  290E               	goto	u604
  1960     010C                     u605:
  1961     010C  1003               	clrc
  1962     010D  0DAA               	rlf	??_Dio_Config,f
  1963     010E                     u604:
  1964     010E  3EFF               	addlw	-1
  1965     010F  1D03               	skipz
  1966     0110  290C               	goto	u605
  1967     0111  082A               	movf	??_Dio_Config,w
  1968     0112  3AFF               	xorlw	255
  1969     0113  1683               	bsf	3,5	;RP0=1, select bank1
  1970     0114  0505               	andwf	5,w	;volatile
  1971     0115  1283               	bcf	3,5	;RP0=0, select bank0
  1972     0116  00AB               	movwf	??_Dio_Config+1
  1973     0117  01AC               	clrf	??_Dio_Config+2
  1974     0118  082B               	movf	??_Dio_Config+1,w
  1975     0119  00AE               	movwf	_Dio_Config$71
  1976     011A  082C               	movf	??_Dio_Config+2,w
  1977     011B  2932               	goto	L2
  1978     011C                     l1057:
  1979     011C  0A30               	incf	Dio_Config@pinNumber,w
  1980     011D  00DF               	movwf	95
  1981     011E  3001               	movlw	1
  1982     011F  00AA               	movwf	??_Dio_Config
  1983     0120  3000               	movlw	0
  1984     0121  00AB               	movwf	??_Dio_Config+1
  1985     0122  2926               	goto	u614
  1986     0123                     u615:
  1987     0123  1003               	clrc
  1988     0124  0DAA               	rlf	??_Dio_Config,f
  1989     0125  0DAB               	rlf	??_Dio_Config+1,f
  1990     0126                     u614:
  1991     0126  0BDF               	decfsz	95,f
  1992     0127  2923               	goto	u615
  1993     0128  082A               	movf	??_Dio_Config,w
  1994     0129  1683               	bsf	3,5	;RP0=1, select bank1
  1995     012A  0405               	iorwf	5,w	;volatile
  1996     012B  1283               	bcf	3,5	;RP0=0, select bank0
  1997     012C  00AC               	movwf	??_Dio_Config+2
  1998     012D  082B               	movf	??_Dio_Config+1,w
  1999     012E  00AD               	movwf	??_Dio_Config+3
  2000     012F  082C               	movf	??_Dio_Config+2,w
  2001     0130  00AE               	movwf	_Dio_Config$71
  2002     0131  082D               	movf	??_Dio_Config+3,w
  2003     0132                     L2:
  2004     0132  00AF               	movwf	_Dio_Config$71+1
  2005     0133  082E               	movf	_Dio_Config$71,w
  2006     0134  1683               	bsf	3,5	;RP0=1, select bank1
  2007     0135  0085               	movwf	5	;volatile
  2008                           
  2009                           ;MCAL/scr/Dio.c: 45:     if (direction == 1) {
  2010     0136  1283               	bcf	3,5	;RP0=0, select bank0
  2011     0137  0327               	decf	Dio_Config@direction,w
  2012     0138  1D03               	btfss	3,2
  2013     0139  2957               	goto	l1071
  2014                           
  2015                           ;MCAL/scr/Dio.c: 46:         if (state == 1) {
  2016     013A  0328               	decf	Dio_Config@state,w
  2017     013B  1D03               	btfss	3,2
  2018     013C  2949               	goto	l1067
  2019                           
  2020                           ;MCAL/scr/Dio.c: 47:             DIO_State |= (1 << pinNumber);
  2021     013D  3001               	movlw	1
  2022     013E  00AA               	movwf	??_Dio_Config
  2023     013F  0A30               	incf	Dio_Config@pinNumber,w
  2024     0140  2943               	goto	u644
  2025     0141                     u645:
  2026     0141  1003               	clrc
  2027     0142  0DAA               	rlf	??_Dio_Config,f
  2028     0143                     u644:
  2029     0143  3EFF               	addlw	-1
  2030     0144  1D03               	skipz
  2031     0145  2941               	goto	u645
  2032     0146  082A               	movf	??_Dio_Config,w
  2033     0147  04CB               	iorwf	_DIO_State,f
  2034                           
  2035                           ;MCAL/scr/Dio.c: 48:         } else {
  2036     0148  2955               	goto	l1069
  2037     0149                     l1067:
  2038                           
  2039                           ;MCAL/scr/Dio.c: 49:             DIO_State &= ~(1 << pinNumber);
  2040     0149  3001               	movlw	1
  2041     014A  00AA               	movwf	??_Dio_Config
  2042     014B  0A30               	incf	Dio_Config@pinNumber,w
  2043     014C  294F               	goto	u654
  2044     014D                     u655:
  2045     014D  1003               	clrc
  2046     014E  0DAA               	rlf	??_Dio_Config,f
  2047     014F                     u654:
  2048     014F  3EFF               	addlw	-1
  2049     0150  1D03               	skipz
  2050     0151  294D               	goto	u655
  2051     0152  082A               	movf	??_Dio_Config,w
  2052     0153  3AFF               	xorlw	255
  2053     0154  05CB               	andwf	_DIO_State,f
  2054     0155                     l1069:
  2055                           
  2056                           ;MCAL/scr/Dio.c: 51:         GPIO = DIO_State ;
  2057     0155  084B               	movf	_DIO_State,w
  2058     0156  0085               	movwf	5	;volatile
  2059     0157                     l1071:
  2060                           
  2061                           ;MCAL/scr/Dio.c: 53:     if (pullType == 1) {
  2062     0157  0329               	decf	Dio_Config@pullType,w
  2063     0158  1D03               	btfss	3,2
  2064     0159  296B               	goto	l1075
  2065                           
  2066                           ;MCAL/scr/Dio.c: 54:         OPTION_REG &= ~(1 << 7);
  2067     015A  307F               	movlw	127
  2068     015B  1683               	bsf	3,5	;RP0=1, select bank1
  2069     015C  0581               	andwf	1,f	;volatile
  2070                           
  2071                           ;MCAL/scr/Dio.c: 55:         WPU |= (1 << pinNumber);
  2072     015D  3001               	movlw	1
  2073     015E  1283               	bcf	3,5	;RP0=0, select bank0
  2074     015F  00AA               	movwf	??_Dio_Config
  2075     0160  0A30               	incf	Dio_Config@pinNumber,w
  2076     0161  2964               	goto	u674
  2077     0162                     u675:
  2078     0162  1003               	clrc
  2079     0163  0DAA               	rlf	??_Dio_Config,f
  2080     0164                     u674:
  2081     0164  3EFF               	addlw	-1
  2082     0165  1D03               	skipz
  2083     0166  2962               	goto	u675
  2084     0167  082A               	movf	??_Dio_Config,w
  2085     0168  1683               	bsf	3,5	;RP0=1, select bank1
  2086     0169  0495               	iorwf	21,f	;volatile
  2087                           
  2088                           ;MCAL/scr/Dio.c: 56:     } else {
  2089     016A  0008               	return
  2090     016B                     l1075:
  2091                           
  2092                           ;MCAL/scr/Dio.c: 57:         WPU &= ~(1 << pinNumber);
  2093     016B  3001               	movlw	1
  2094     016C  00AA               	movwf	??_Dio_Config
  2095     016D  0A30               	incf	Dio_Config@pinNumber,w
  2096     016E  2971               	goto	u684
  2097     016F                     u685:
  2098     016F  1003               	clrc
  2099     0170  0DAA               	rlf	??_Dio_Config,f
  2100     0171                     u684:
  2101     0171  3EFF               	addlw	-1
  2102     0172  1D03               	skipz
  2103     0173  296F               	goto	u685
  2104     0174  082A               	movf	??_Dio_Config,w
  2105     0175  3AFF               	xorlw	255
  2106     0176  1683               	bsf	3,5	;RP0=1, select bank1
  2107     0177  0595               	andwf	21,f	;volatile
  2108     0178  0008               	return
  2109     0179                     __end_of_Dio_Config:
  2110                           
  2111                           	psect	text13
  2112     0372                     __ptext13:	
  2113 ;; *************** function _Adc_StartConversion *****************
  2114 ;; Defined at:
  2115 ;;		line 87 in file "MCAL/scr/Adc.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;  channel         1    wreg     enum E11
  2118 ;; Auto vars:     Size  Location     Type
  2119 ;;  channel         1    8[BANK0 ] enum E11
  2120 ;; Return value:  Size  Location     Type
  2121 ;;                  1    wreg      void 
  2122 ;; Registers used:
  2123 ;;		wreg, status,2, status,0
  2124 ;; Tracked objects:
  2125 ;;		On entry : 100/0
  2126 ;;		On exit  : 100/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMMON   BANK0
  2129 ;;      Params:         0       0
  2130 ;;      Locals:         0       1
  2131 ;;      Temps:          0       1
  2132 ;;      Totals:         0       2
  2133 ;;Total ram usage:        2 bytes
  2134 ;; Hardware stack levels used: 1
  2135 ;; Hardware stack levels required when called: 2
  2136 ;; This function calls:
  2137 ;;		Nothing
  2138 ;; This function is called by:
  2139 ;;		_main
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143     0372                     _Adc_StartConversion:	
  2144                           ;psect for function _Adc_StartConversion
  2145                           
  2146                           
  2147                           ;incstack = 0
  2148                           ; Regs used in _Adc_StartConversion: [wreg+status,2+status,0]
  2149                           ;Adc_StartConversion@channel stored from wreg
  2150     0372  00A8               	movwf	Adc_StartConversion@channel
  2151                           
  2152                           ;MCAL/scr/Adc.c: 90:     ADCON0 &= ~( 0b11 << 2);
  2153     0373  30F3               	movlw	243
  2154     0374  059F               	andwf	31,f	;volatile
  2155                           
  2156                           ;MCAL/scr/Adc.c: 91:     ADCON0 |= (channel << 2);
  2157     0375  0828               	movf	Adc_StartConversion@channel,w	;volatile
  2158     0376  00A7               	movwf	??_Adc_StartConversion
  2159     0377  3001               	movlw	1
  2160     0378                     u705:
  2161     0378  1003               	clrc
  2162     0379  0DA7               	rlf	??_Adc_StartConversion,f
  2163     037A  3EFF               	addlw	-1
  2164     037B  1D03               	skipz
  2165     037C  2B78               	goto	u705
  2166     037D  1003               	clrc
  2167     037E  0D27               	rlf	??_Adc_StartConversion,w
  2168     037F  049F               	iorwf	31,f	;volatile
  2169                           
  2170                           ;MCAL/scr/Adc.c: 92:     ADCON0 |= (1 << 1);
  2171     0380  149F               	bsf	31,1	;volatile
  2172     0381  0008               	return
  2173     0382                     __end_of_Adc_StartConversion:
  2174                           
  2175                           	psect	text14
  2176     0270                     __ptext14:	
  2177 ;; *************** function _Adc_ReadResult *****************
  2178 ;; Defined at:
  2179 ;;		line 96 in file "MCAL/scr/Adc.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;		None
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;		None
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  2    7[BANK0 ] unsigned short 
  2186 ;; Registers used:
  2187 ;;		wreg, status,2, status,0
  2188 ;; Tracked objects:
  2189 ;;		On entry : 100/0
  2190 ;;		On exit  : 100/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMMON   BANK0
  2193 ;;      Params:         0       2
  2194 ;;      Locals:         0       0
  2195 ;;      Temps:          0       7
  2196 ;;      Totals:         0       9
  2197 ;;Total ram usage:        9 bytes
  2198 ;; Hardware stack levels used: 1
  2199 ;; Hardware stack levels required when called: 2
  2200 ;; This function calls:
  2201 ;;		Nothing
  2202 ;; This function is called by:
  2203 ;;		_main
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207     0270                     _Adc_ReadResult:	
  2208                           ;psect for function _Adc_ReadResult
  2209                           
  2210     0270                     l61:	
  2211                           ;MCAL/scr/Adc.c: 97:     while (ADCON0 & (1 << 1));
  2212                           
  2213                           ;incstack = 0
  2214                           ; Regs used in _Adc_ReadResult: [wreg+status,2+status,0]
  2215                           
  2216     0270  189F               	btfsc	31,1	;volatile
  2217     0271  2A70               	goto	l61
  2218                           
  2219                           ;MCAL/scr/Adc.c: 100:     if (ADCON0 & (1 << 7)) {
  2220     0272  1F9F               	btfss	31,7	;volatile
  2221     0273  2A7B               	goto	l1137
  2222                           
  2223                           ;MCAL/scr/Adc.c: 102:         return (uint16)((ADRESH << 8) | ADRESL);
  2224     0274  081E               	movf	30,w	;volatile
  2225     0275  00A8               	movwf	?_Adc_ReadResult+1
  2226     0276  1683               	bsf	3,5	;RP0=1, select bank1
  2227     0277  081E               	movf	30,w	;volatile
  2228     0278  1283               	bcf	3,5	;RP0=0, select bank0
  2229     0279  00A7               	movwf	?_Adc_ReadResult
  2230     027A  0008               	return
  2231     027B                     l1137:
  2232                           
  2233                           ;MCAL/scr/Adc.c: 105:         return (uint16)((ADRESH << 2) | (ADRESL >> 6));
  2234     027B  1683               	bsf	3,5	;RP0=1, select bank1
  2235     027C  081E               	movf	30,w	;volatile
  2236     027D  1283               	bcf	3,5	;RP0=0, select bank0
  2237     027E  00A9               	movwf	??_Adc_ReadResult
  2238     027F  3006               	movlw	6
  2239     0280                     u735:
  2240     0280  1003               	clrc
  2241     0281  0CA9               	rrf	??_Adc_ReadResult,f
  2242     0282  3EFF               	addlw	-1
  2243     0283  1D03               	skipz
  2244     0284  2A80               	goto	u735
  2245     0285  0829               	movf	??_Adc_ReadResult,w
  2246     0286  00AA               	movwf	??_Adc_ReadResult+1
  2247     0287  01AB               	clrf	??_Adc_ReadResult+2
  2248     0288  081E               	movf	30,w	;volatile
  2249     0289  00AC               	movwf	??_Adc_ReadResult+3
  2250     028A  01AD               	clrf	??_Adc_ReadResult+4
  2251     028B  1003               	clrc
  2252     028C  0DAC               	rlf	??_Adc_ReadResult+3,f
  2253     028D  0DAD               	rlf	??_Adc_ReadResult+4,f
  2254     028E  1003               	clrc
  2255     028F  0DAC               	rlf	??_Adc_ReadResult+3,f
  2256     0290  0DAD               	rlf	??_Adc_ReadResult+4,f
  2257     0291  082A               	movf	??_Adc_ReadResult+1,w
  2258     0292  042C               	iorwf	??_Adc_ReadResult+3,w
  2259     0293  00AE               	movwf	??_Adc_ReadResult+5
  2260     0294  082B               	movf	??_Adc_ReadResult+2,w
  2261     0295  042D               	iorwf	??_Adc_ReadResult+4,w
  2262     0296  00AF               	movwf	??_Adc_ReadResult+6
  2263     0297  082E               	movf	??_Adc_ReadResult+5,w
  2264     0298  00A7               	movwf	?_Adc_ReadResult
  2265     0299  082F               	movf	??_Adc_ReadResult+6,w
  2266     029A  00A8               	movwf	?_Adc_ReadResult+1
  2267     029B  0008               	return
  2268     029C                     __end_of_Adc_ReadResult:
  2269                           
  2270                           	psect	text15
  2271     0391                     __ptext15:	
  2272 ;; *************** function _Adc_Init *****************
  2273 ;; Defined at:
  2274 ;;		line 53 in file "MCAL/scr/Adc.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;		None
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;		None
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  1    wreg      void 
  2281 ;; Registers used:
  2282 ;;		wreg, status,2, status,0
  2283 ;; Tracked objects:
  2284 ;;		On entry : 100/100
  2285 ;;		On exit  : 100/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMMON   BANK0
  2288 ;;      Params:         0       0
  2289 ;;      Locals:         0       0
  2290 ;;      Temps:          0       0
  2291 ;;      Totals:         0       0
  2292 ;;Total ram usage:        0 bytes
  2293 ;; Hardware stack levels used: 1
  2294 ;; Hardware stack levels required when called: 2
  2295 ;; This function calls:
  2296 ;;		Nothing
  2297 ;; This function is called by:
  2298 ;;		_main
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302     0391                     _Adc_Init:	
  2303                           ;psect for function _Adc_Init
  2304                           
  2305                           
  2306                           ;MCAL/scr/Adc.c: 54: ADCON0 |= (1 << 0);
  2307                           
  2308                           ;incstack = 0
  2309                           ; Regs used in _Adc_Init: [wreg+status,2+status,0]
  2310     0391  1283               	bcf	3,5	;RP0=0, select bank0
  2311     0392  141F               	bsf	31,0	;volatile
  2312                           
  2313                           ;MCAL/scr/Adc.c: 59:     (ADCON0 &= ~(0b1 << 6)); (ADCON0 |=(0 << 6));
  2314     0393  30BF               	movlw	191
  2315     0394  059F               	andwf	31,f	;volatile
  2316     0395  081F               	movf	31,w	;volatile
  2317                           
  2318                           ;MCAL/scr/Adc.c: 62:     (ANSEL &= ~(0b111 << 4) ); (ANSEL |= (( ((2000000 / ((4000000)/
      +                          1000 )) >= 1600) ? 0b000 : ((4000000 / ((4000000)/1000 )) >= 1600) ? 0b100 : ((8000000 /
      +                           ((4000000)/1000 )) >= 1600) ? 0b001 : ((16000000 / ((4000000)/1000 )) >= 1600) ? 0b101 
      +                          : ((32000000 / ((4000000)/1000 )) >= 1600) ? 0b010 : ((64000000 / ((4000000)/1000 )) >= 
      +                          1600) ? 0b110 : 0b110) << 4) );
  2319     0396  308F               	movlw	143
  2320     0397  1683               	bsf	3,5	;RP0=1, select bank1
  2321     0398  059F               	andwf	31,f	;volatile
  2322     0399  161F               	bsf	31,4	;volatile
  2323                           
  2324                           ;MCAL/scr/Adc.c: 82:         ADCON0 &= ~(1 << 7);
  2325     039A  307F               	movlw	127
  2326     039B  1283               	bcf	3,5	;RP0=0, select bank0
  2327     039C  059F               	andwf	31,f	;volatile
  2328     039D  0008               	return
  2329     039E                     __end_of_Adc_Init:
  2330                           
  2331                           	psect	text16
  2332     029C                     __ptext16:	
  2333 ;; *************** function _ISR *****************
  2334 ;; Defined at:
  2335 ;;		line 80 in file "main.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;		None
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;  i               2    5[BANK0 ] unsigned short 
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  1    wreg      void 
  2342 ;; Registers used:
  2343 ;;		wreg, status,2, status,0, pclath, cstack
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 100/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMMON   BANK0
  2349 ;;      Params:         0       0
  2350 ;;      Locals:         0       2
  2351 ;;      Temps:          0       3
  2352 ;;      Totals:         0       5
  2353 ;;Total ram usage:        5 bytes
  2354 ;; Hardware stack levels used: 1
  2355 ;; Hardware stack levels required when called: 1
  2356 ;; This function calls:
  2357 ;;		_Dio_Pin_Read
  2358 ;; This function is called by:
  2359 ;;		Interrupt level 1
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363     029C                     _ISR:	
  2364                           ;psect for function _ISR
  2365                           
  2366                           
  2367                           ;main.c: 82:     if (INTCONbits.GPIF) {
  2368     029C  1C0B               	btfss	11,0	;volatile
  2369     029D  2ABF               	goto	i1l189
  2370                           
  2371                           ;main.c: 84:         uint16 i = 0 ;
  2372     029E  01A5               	clrf	ISR@i
  2373     029F  01A6               	clrf	ISR@i+1
  2374     02A0                     i1l1303:	
  2375                           ;main.c: 85:               while(!Dio_Pin_Read(3)){
  2376                           
  2377                           
  2378                           ;main.c: 85:               while(!Dio_Pin_Read(3)){
  2379     02A0  3003               	movlw	3
  2380     02A1  2350               	fcall	_Dio_Pin_Read
  2381     02A2  3A00               	xorlw	0
  2382     02A3  1D03               	btfss	3,2
  2383     02A4  2ABE               	goto	i1l188
  2384                           
  2385                           ;main.c: 86:                   i++;
  2386     02A5  3001               	movlw	1
  2387     02A6  07A5               	addwf	ISR@i,f
  2388     02A7  1803               	skipnc
  2389     02A8  0AA6               	incf	ISR@i+1,f
  2390     02A9  3000               	movlw	0
  2391     02AA  07A6               	addwf	ISR@i+1,f
  2392                           
  2393                           ;main.c: 87:                   _delay((unsigned long)(((100))*(4000000/4000000.0)));
  2394     02AB  3021               	movlw	33
  2395     02AC  00A2               	movwf	??_ISR
  2396     02AD                     u109_27:
  2397     02AD  0BA2               	decfsz	??_ISR,f
  2398     02AE  2AAD               	goto	u109_27
  2399                           
  2400                           ;main.c: 88:                   if(i>3000){
  2401     02AF  300B               	movlw	11
  2402     02B0  1283               	bcf	3,5	;RP0=0, select bank0
  2403     02B1  0226               	subwf	ISR@i+1,w
  2404     02B2  30B9               	movlw	185
  2405     02B3  1903               	skipnz
  2406     02B4  0225               	subwf	ISR@i,w
  2407     02B5  1C03               	skipc
  2408     02B6  2AA0               	goto	i1l1303
  2409                           
  2410                           ;main.c: 89:                       DispenserOn = !DispenserOn;
  2411     02B7  084A               	movf	_DispenserOn,w
  2412     02B8  1D03               	btfss	3,2
  2413     02B9  2ABC               	goto	u102_20
  2414     02BA  3001               	movlw	1
  2415     02BB  2ABD               	goto	u103_20
  2416     02BC                     u102_20:
  2417     02BC  3000               	movlw	0
  2418     02BD                     u103_20:
  2419     02BD  00CA               	movwf	_DispenserOn
  2420     02BE                     i1l188:	
  2421                           ;main.c: 90:                       break;}
  2422                           
  2423                           
  2424                           ;main.c: 94:         INTCONbits.GPIF = 0;
  2425     02BE  100B               	bcf	11,0	;volatile
  2426     02BF                     i1l189:
  2427     02BF  0824               	movf	??_ISR+2,w
  2428     02C0  008A               	movwf	10
  2429     02C1  0E23               	swapf	??_ISR+1,w
  2430     02C2  0083               	movwf	3
  2431     02C3  0EDE               	swapf	94,f
  2432     02C4  0E5E               	swapf	94,w
  2433     02C5  0009               	retfie
  2434     02C6                     __end_of_ISR:
  2435                           
  2436                           	psect	intentry
  2437     0004                     __pintentry:	
  2438                           ;incstack = 0
  2439                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  2440                           
  2441     0004                     interrupt_function:
  2442     005E                     saved_w         set	btemp
  2443     0004  00DE               	movwf	btemp
  2444     0005  0E03               	swapf	3,w
  2445     0006  1283               	bcf	3,5	;RP0=0, select bank0
  2446     0007  00A3               	movwf	??_ISR+1
  2447     0008  080A               	movf	10,w
  2448     0009  00A4               	movwf	??_ISR+2
  2449     000A  2A9C               	ljmp	_ISR
  2450                           
  2451                           	psect	text17
  2452     0350                     __ptext17:	
  2453 ;; *************** function _Dio_Pin_Read *****************
  2454 ;; Defined at:
  2455 ;;		line 19 in file "MCAL/scr/Dio.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;  pinNumber       1    wreg     unsigned char 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  pinNumber       1    1[BANK0 ] unsigned char 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      unsigned char 
  2462 ;; Registers used:
  2463 ;;		wreg, status,2, status,0
  2464 ;; Tracked objects:
  2465 ;;		On entry : 100/0
  2466 ;;		On exit  : 100/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMMON   BANK0
  2469 ;;      Params:         0       0
  2470 ;;      Locals:         0       1
  2471 ;;      Temps:          0       1
  2472 ;;      Totals:         0       2
  2473 ;;Total ram usage:        2 bytes
  2474 ;; Hardware stack levels used: 1
  2475 ;; This function calls:
  2476 ;;		Nothing
  2477 ;; This function is called by:
  2478 ;;		_ISR
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482     0350                     _Dio_Pin_Read:	
  2483                           ;psect for function _Dio_Pin_Read
  2484                           
  2485                           
  2486                           ;incstack = 0
  2487                           ; Regs used in _Dio_Pin_Read: [wreg+status,2+status,0]
  2488                           ;Dio_Pin_Read@pinNumber stored from wreg
  2489     0350  00A1               	movwf	Dio_Pin_Read@pinNumber
  2490                           
  2491                           ;MCAL/scr/Dio.c: 20:         if (GPIO & (1 << pinNumber)) {
  2492     0351  3001               	movlw	1
  2493     0352  00A0               	movwf	??_Dio_Pin_Read
  2494     0353  0A21               	incf	Dio_Pin_Read@pinNumber,w
  2495     0354  2B57               	goto	u74_24
  2496     0355                     u74_25:
  2497     0355  1003               	clrc
  2498     0356  0DA0               	rlf	??_Dio_Pin_Read,f
  2499     0357                     u74_24:
  2500     0357  3EFF               	addlw	-1
  2501     0358  1D03               	skipz
  2502     0359  2B55               	goto	u74_25
  2503     035A  0820               	movf	??_Dio_Pin_Read,w
  2504     035B  0505               	andwf	5,w	;volatile
  2505     035C  1903               	btfsc	3,2
  2506     035D  2B60               	goto	i1l1149
  2507                           
  2508                           ;MCAL/scr/Dio.c: 21:             return 1;
  2509     035E  3001               	movlw	1
  2510     035F  0008               	return
  2511     0360                     i1l1149:
  2512                           
  2513                           ;MCAL/scr/Dio.c: 23:             return 0;
  2514     0360  3000               	movlw	0
  2515     0361  0008               	return
  2516     0362                     __end_of_Dio_Pin_Read:
  2517     0000                     ___latbits      equ	0
  2518     005E                     btemp           set	94	;btemp
  2519     005E                     wtemp0          set	94
  2520                           
  2521                           	psect	config
  2522                           
  2523                           ;Config register CONFIG @ 0x2007
  2524                           ;	Oscillator Selection bits
  2525                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
  2526                           ;	Watchdog Timer Enable bit
  2527                           ;	WDTE = OFF, WDT disabled
  2528                           ;	Power-Up Timer Enable bit
  2529                           ;	PWRTE = OFF, PWRT disabled
  2530                           ;	GP3/MCLR pin function select
  2531                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
  2532                           ;	Brown-out Detect Enable bit
  2533                           ;	BOREN = OFF, BOD disabled
  2534                           ;	Code Protection bit
  2535                           ;	CP = OFF, Program Memory code protection is disabled
  2536                           ;	Data Code Protection bit
  2537                           ;	CPD = OFF, Data memory code protection is disabled
  2538     2007                     	org	8199
  2539     2007  3194               	dw	12692

Data Sizes:
    Strings     0
    Constant    10
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     40      45

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___lmul
    ___lwmod->___lwdiv
    ___lmul->_Adc_ReadResult
    _SPI_Init->_Dio_Config
    _MAX7219_Init->_SPI_Send_16bit
    _MAX7219_DisplayData->_SPI_Send_16bit
    _MAX7219_DisplayData->___lwmod
    _MAX7219_ClearDisplay->_SPI_Send_16bit
    _SPI_Send_16bit->_Dio_Pin_Write
    _Dio_init->_Dio_Config

Critical Paths under _ISR in BANK0

    _ISR->_Dio_Pin_Read

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    2022
                                             29 BANK0     11    11      0
                           _Adc_Init
                     _Adc_ReadResult
                _Adc_StartConversion
                      _Dio_Pin_Write
                           _Dio_init
                          _Gpio_Init
               _MAX7219_ClearDisplay
                _MAX7219_DisplayData
                       _MAX7219_Init
                           _SPI_Init
                             ___lmul
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     167
                                             14 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     168
                                              7 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              13     5      8      94
                                             16 BANK0     13     5      8
                     _Adc_ReadResult (ARG)
 ---------------------------------------------------------------------------------
 (1) _SPI_Init                                             0     0      0     301
                         _Dio_Config
 ---------------------------------------------------------------------------------
 (1) _MAX7219_Init                                         0     0      0     185
                     _SPI_Send_16bit
 ---------------------------------------------------------------------------------
 (1) _MAX7219_DisplayData                                  6     5      1     245
                                             19 BANK0      6     5      1
                     _SPI_Send_16bit
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _MAX7219_ClearDisplay                                 3     3      0     253
                                             19 BANK0      3     3      0
                     _SPI_Send_16bit
 ---------------------------------------------------------------------------------
 (2) _SPI_Send_16bit                                       9     7      2     185
                                             10 BANK0      9     7      2
                      _Dio_Pin_Write
 ---------------------------------------------------------------------------------
 (3) _Dio_Pin_Write                                        3     2      1      88
                                              7 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _Gpio_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Dio_init                                             0     0      0     301
                         _Dio_Config
 ---------------------------------------------------------------------------------
 (2) _Dio_Config                                          10     7      3     301
                                              7 BANK0     10     7      3
 ---------------------------------------------------------------------------------
 (1) _Adc_StartConversion                                  2     2      0      29
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Adc_ReadResult                                       9     7      2       0
                                              7 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _Adc_Init                                            12    12      0     144
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  5     5      0      53
                                              2 BANK0      5     5      0
                       _Dio_Pin_Read
 ---------------------------------------------------------------------------------
 (5) _Dio_Pin_Read                                         2     2      0      29
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Adc_Init
   _Adc_ReadResult
   _Adc_StartConversion
   _Dio_Pin_Write
   _Dio_init
     _Dio_Config
   _Gpio_Init
   _MAX7219_ClearDisplay
     _SPI_Send_16bit
       _Dio_Pin_Write
   _MAX7219_DisplayData
     _SPI_Send_16bit
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
   _MAX7219_Init
     _SPI_Send_16bit
   _SPI_Init
     _Dio_Config
   ___lmul
     _Adc_ReadResult (ARG)
   ___lwdiv
   ___lwmod

 _ISR (ROOT)
   _Dio_Pin_Read

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON            0      0       0      0.0%
BITBANK0            62      0       0      0.0%
COMMON               0      0       0      0.0%
BANK0               62     40      45     72.6%
STACK                0      0       0      0.0%
DATA                 0      0      45      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Fri Sep 20 21:07:56 2024

        __end_of_Dio_Pin_Read 0362                             pc 0002                            l61 0270  
                          fsr 0004         __end_of_Dio_Pin_Write 02E5                _SPI_Send_16bit 0179  
                         u604 010E                           _ISR 029C                           u605 010C  
                         u614 0126                           u615 0123                           u544 02D0  
                         u705 0378                           u545 02CE                           u554 02DC  
                         u555 02DA                           u644 0143                           u564 018B  
                         u645 0141                           u565 0188                           u654 014F  
                         u735 0280                           u655 014D                           u585 01BF  
                         u825 0211                           u674 0164                           u675 0162  
                         u915 0258                           u684 0171                           u685 016F  
                         u845 021B                           u925 0261                           u855 0227  
                         u785 01E7                           u865 0231                           u795 01EF  
                         u965 0068                           u895 0249                           _WPU 0095  
                         fsr0 0004                          ?_ISR 0020                          ISR@i 0025  
                        l1023 02D6                          l1025 02E2                          l1035 017E  
                        l1211 0246                          l1213 0252                          l1221 026B  
                        l1071 0157                          l1039 019A                          l1137 027B  
                        l1057 011C                          l1217 0260                          l1075 016B  
                        l1067 0149                          l1069 0155                          l1085 0319  
                        l1165 01CF                          l1253 003E                          l1255 002F  
                        l1169 01E5                          l1281 00F2                          l1257 0042  
                        l1195 0230                          l1187 020E                          l1189 021A  
                        l1277 00EE                          l1293 001E                          l1199 023B  
                        l1279 0079                          u1057 0036                          u1067 0082  
                        _IOCB 0096                          u1077 019F                          u1087 01A9  
                        _GPIO 0005                          _main 0014                          btemp 005E  
                  _Dio_Config 0104                          start 000B                         ??_ISR 0022  
      __end_of_SPI_Send_16bit 01C7                         ?_main 0020                         _ANSEL 009F  
             __end_of___lwdiv 0240               __end_of___lwmod 0270                         i1l188 02BE  
                       i1l189 02BF                         u74_24 0357                         u74_25 0355  
         ___lmul@multiplicand 0034              __end_of_Adc_Init 039E                         main@i 0047  
            __end_of_SPI_Init 0317                         pclath 000A          __end_of_MAX7219_Init 0300  
                       status 0003                         wtemp0 005E  __end_of_MAX7219_ClearDisplay 032B  
            __end_of_Dio_init 0391               __initialization 000C                  __end_of_main 0104  
             ?_SPI_Send_16bit 002A                        ??_main 003D                        _ADCON0 001F  
            ??_Adc_ReadResult 0029                        _ADRESH 001E                        _ADRESL 009E  
                      u102_20 02BC                        i1l1303 02A0                        u103_20 02BD  
                      i1l1149 0360                        u109_27 02AD                        _TRISIO 0085  
                 ?_Dio_Config 0027                   _DispenserOn 004A                        ___lmul 01C7  
                   ??___lwdiv 0000                     ??___lwmod 0000            SPI_Send_16bit@data 002A  
                      saved_w 005E           _MAX7219_DisplayData 033E                  _Dio_Pin_Read 0350  
     __end_of__initialization 0012      MAX7219_DisplayData@digit 0038          ?_MAX7219_DisplayData 0033  
              __pcstackCOMMON 0000                     ?_Adc_Init 0020             __end_of_Gpio_Init 033E  
                   ?_SPI_Init 0020          _MAX7219_ClearDisplay 0317                     ?_Dio_init 0020  
                  __pbssBANK0 0048         MAX7219_ClearDisplay@i 0035         ??_MAX7219_DisplayData 0034  
                  __pmaintext 0014                       ?___lmul 0030        Dio_Pin_Write@pinNumber 0029  
                  __pintentry 0004                    ??_Adc_Init 0000                ___lmul@product 0039  
                  ??_SPI_Init 0000                  _MAX7219_Init 02E5         ?_MAX7219_ClearDisplay 0020  
          Dio_Config@pullType 0029                    ??_Dio_init 0000                    __stringtab 0362  
                     _Counter 0048              ??_SPI_Send_16bit 002C                       ___lwdiv 0206  
                     ___lwmod 0240                       __ptext1 0240                       __ptext2 0206  
                     __ptext3 01C7                       __ptext4 0300                       __ptext5 02E5  
                     __ptext6 033E                       __ptext7 0317                       __ptext8 0179  
                     __ptext9 02C6                     _DIO_State 004B          end_of_initialization 0012  
               _Dio_Config$71 002E                  ??_Dio_Config 002A                 _Dio_Pin_Write 02C6  
      ??_MAX7219_ClearDisplay 0033            __end_of_Dio_Config 0179           _Adc_StartConversion 0372  
        ?_Adc_StartConversion 0020                __end_of___lmul 0206                ?_Dio_Pin_Write 0027  
                   _Gpio_Init 032B           start_initialization 000C  MAX7219_DisplayData@character 0033  
                 __end_of_ISR 02C6                   _BCD_Enabled 004C         ??_Adc_StartConversion 0027  
                    ??___lmul 0038             SPI_Send_16bit@bit 0031                    ?_Gpio_Init 0020  
                   ___latbits 0000                 __pcstackBANK0 0020   __end_of_MAX7219_DisplayData 0350  
            _MAX7219_No_Table 0368           Dio_Config@direction 0027              ___lwdiv@dividend 0029  
             Dio_Config@state 0028               ??_Dio_Pin_Write 0028                      ?___lwdiv 0027  
                    ?___lwmod 002E                     __pstrings 0362           Dio_Config@pinNumber 0030  
            ___lwdiv@quotient 002B             interrupt_function 0004                      _Adc_Init 0391  
                    _SPI_Init 0300                   __stringbase 0367                   ??_Gpio_Init 0000  
                    _Dio_init 0382                 ?_Dio_Pin_Read 0020            Dio_Pin_Write@state 0027  
           ___lmul@multiplier 0030                _Adc_ReadResult 0270            __end_of__stringtab 0368  
                    _main$776 0045               ___lwdiv@divisor 0027                ??_Dio_Pin_Read 0020  
             ___lwdiv@counter 002D                      __ptext10 032B                      __ptext11 0382  
                    __ptext12 0104                      __ptext13 0372                      __ptext14 0270  
                    __ptext15 0391                      __ptext16 029C                      __ptext17 0350  
      __end_of_Adc_ReadResult 029C                 ?_MAX7219_Init 0020                    _INTCONbits 000B  
    __end_of_MAX7219_No_Table 0372                      intlevel1 0000              ___lwmod@dividend 0030  
 __end_of_Adc_StartConversion 0382               ?_Adc_ReadResult 0027                     stringcode 0362  
  Adc_StartConversion@channel 0028         Dio_Pin_Read@pinNumber 0021                ??_MAX7219_Init 0000  
                  _OPTION_REG 0081               ___lwmod@divisor 002E               ___lwmod@counter 0032  
                    stringdir 0362                      stringtab 0362  
