

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Fri Sep 20 21:10:27 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og9 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=1
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,space=0,delta=2
    27                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x5E,2
    30     0000                     
    31                           ; Generated 17/08/2023 GMT
    32                           ; 
    33                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC12F675 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65     0004                     fsr             equ	4
    66     0004                     fsr0            equ	4
    67     0000                     indf            equ	0
    68     0000                     indf0           equ	0
    69     0002                     pc              equ	2
    70     0002                     pcl             equ	2
    71     000A                     pclath          equ	10
    72     0003                     status          equ	3
    73     0000                     INDF            equ	0	;# 
    74     0001                     TMR0            equ	1	;# 
    75     0002                     PCL             equ	2	;# 
    76     0003                     STATUS          equ	3	;# 
    77     0004                     FSR             equ	4	;# 
    78     0005                     GPIO            equ	5	;# 
    79     000A                     PCLATH          equ	10	;# 
    80     000B                     INTCON          equ	11	;# 
    81     000C                     PIR1            equ	12	;# 
    82     000E                     TMR1            equ	14	;# 
    83     000E                     TMR1L           equ	14	;# 
    84     000F                     TMR1H           equ	15	;# 
    85     0010                     T1CON           equ	16	;# 
    86     0019                     CMCON           equ	25	;# 
    87     001E                     ADRESH          equ	30	;# 
    88     001F                     ADCON0          equ	31	;# 
    89     0081                     OPTION_REG      equ	129	;# 
    90     0085                     TRISIO          equ	133	;# 
    91     008C                     PIE1            equ	140	;# 
    92     008E                     PCON            equ	142	;# 
    93     0090                     OSCCAL          equ	144	;# 
    94     0095                     WPU             equ	149	;# 
    95     0096                     IOC             equ	150	;# 
    96     0096                     IOCB            equ	150	;# 
    97     0099                     VRCON           equ	153	;# 
    98     009A                     EEDATA          equ	154	;# 
    99     009A                     EEDAT           equ	154	;# 
   100     009B                     EEADR           equ	155	;# 
   101     009C                     EECON1          equ	156	;# 
   102     009D                     EECON2          equ	157	;# 
   103     009E                     ADRESL          equ	158	;# 
   104     009F                     ANSEL           equ	159	;# 
   105     0000                     INDF            equ	0	;# 
   106     0001                     TMR0            equ	1	;# 
   107     0002                     PCL             equ	2	;# 
   108     0003                     STATUS          equ	3	;# 
   109     0004                     FSR             equ	4	;# 
   110     0005                     GPIO            equ	5	;# 
   111     000A                     PCLATH          equ	10	;# 
   112     000B                     INTCON          equ	11	;# 
   113     000C                     PIR1            equ	12	;# 
   114     000E                     TMR1            equ	14	;# 
   115     000E                     TMR1L           equ	14	;# 
   116     000F                     TMR1H           equ	15	;# 
   117     0010                     T1CON           equ	16	;# 
   118     0019                     CMCON           equ	25	;# 
   119     001E                     ADRESH          equ	30	;# 
   120     001F                     ADCON0          equ	31	;# 
   121     0081                     OPTION_REG      equ	129	;# 
   122     0085                     TRISIO          equ	133	;# 
   123     008C                     PIE1            equ	140	;# 
   124     008E                     PCON            equ	142	;# 
   125     0090                     OSCCAL          equ	144	;# 
   126     0095                     WPU             equ	149	;# 
   127     0096                     IOC             equ	150	;# 
   128     0096                     IOCB            equ	150	;# 
   129     0099                     VRCON           equ	153	;# 
   130     009A                     EEDATA          equ	154	;# 
   131     009A                     EEDAT           equ	154	;# 
   132     009B                     EEADR           equ	155	;# 
   133     009C                     EECON1          equ	156	;# 
   134     009D                     EECON2          equ	157	;# 
   135     009E                     ADRESL          equ	158	;# 
   136     009F                     ANSEL           equ	159	;# 
   137     0000                     INDF            equ	0	;# 
   138     0001                     TMR0            equ	1	;# 
   139     0002                     PCL             equ	2	;# 
   140     0003                     STATUS          equ	3	;# 
   141     0004                     FSR             equ	4	;# 
   142     0005                     GPIO            equ	5	;# 
   143     000A                     PCLATH          equ	10	;# 
   144     000B                     INTCON          equ	11	;# 
   145     000C                     PIR1            equ	12	;# 
   146     000E                     TMR1            equ	14	;# 
   147     000E                     TMR1L           equ	14	;# 
   148     000F                     TMR1H           equ	15	;# 
   149     0010                     T1CON           equ	16	;# 
   150     0019                     CMCON           equ	25	;# 
   151     001E                     ADRESH          equ	30	;# 
   152     001F                     ADCON0          equ	31	;# 
   153     0081                     OPTION_REG      equ	129	;# 
   154     0085                     TRISIO          equ	133	;# 
   155     008C                     PIE1            equ	140	;# 
   156     008E                     PCON            equ	142	;# 
   157     0090                     OSCCAL          equ	144	;# 
   158     0095                     WPU             equ	149	;# 
   159     0096                     IOC             equ	150	;# 
   160     0096                     IOCB            equ	150	;# 
   161     0099                     VRCON           equ	153	;# 
   162     009A                     EEDATA          equ	154	;# 
   163     009A                     EEDAT           equ	154	;# 
   164     009B                     EEADR           equ	155	;# 
   165     009C                     EECON1          equ	156	;# 
   166     009D                     EECON2          equ	157	;# 
   167     009E                     ADRESL          equ	158	;# 
   168     009F                     ANSEL           equ	159	;# 
   169     0000                     INDF            equ	0	;# 
   170     0001                     TMR0            equ	1	;# 
   171     0002                     PCL             equ	2	;# 
   172     0003                     STATUS          equ	3	;# 
   173     0004                     FSR             equ	4	;# 
   174     0005                     GPIO            equ	5	;# 
   175     000A                     PCLATH          equ	10	;# 
   176     000B                     INTCON          equ	11	;# 
   177     000C                     PIR1            equ	12	;# 
   178     000E                     TMR1            equ	14	;# 
   179     000E                     TMR1L           equ	14	;# 
   180     000F                     TMR1H           equ	15	;# 
   181     0010                     T1CON           equ	16	;# 
   182     0019                     CMCON           equ	25	;# 
   183     001E                     ADRESH          equ	30	;# 
   184     001F                     ADCON0          equ	31	;# 
   185     0081                     OPTION_REG      equ	129	;# 
   186     0085                     TRISIO          equ	133	;# 
   187     008C                     PIE1            equ	140	;# 
   188     008E                     PCON            equ	142	;# 
   189     0090                     OSCCAL          equ	144	;# 
   190     0095                     WPU             equ	149	;# 
   191     0096                     IOC             equ	150	;# 
   192     0096                     IOCB            equ	150	;# 
   193     0099                     VRCON           equ	153	;# 
   194     009A                     EEDATA          equ	154	;# 
   195     009A                     EEDAT           equ	154	;# 
   196     009B                     EEADR           equ	155	;# 
   197     009C                     EECON1          equ	156	;# 
   198     009D                     EECON2          equ	157	;# 
   199     009E                     ADRESL          equ	158	;# 
   200     009F                     ANSEL           equ	159	;# 
   201     0000                     INDF            equ	0	;# 
   202     0001                     TMR0            equ	1	;# 
   203     0002                     PCL             equ	2	;# 
   204     0003                     STATUS          equ	3	;# 
   205     0004                     FSR             equ	4	;# 
   206     0005                     GPIO            equ	5	;# 
   207     000A                     PCLATH          equ	10	;# 
   208     000B                     INTCON          equ	11	;# 
   209     000C                     PIR1            equ	12	;# 
   210     000E                     TMR1            equ	14	;# 
   211     000E                     TMR1L           equ	14	;# 
   212     000F                     TMR1H           equ	15	;# 
   213     0010                     T1CON           equ	16	;# 
   214     0019                     CMCON           equ	25	;# 
   215     001E                     ADRESH          equ	30	;# 
   216     001F                     ADCON0          equ	31	;# 
   217     0081                     OPTION_REG      equ	129	;# 
   218     0085                     TRISIO          equ	133	;# 
   219     008C                     PIE1            equ	140	;# 
   220     008E                     PCON            equ	142	;# 
   221     0090                     OSCCAL          equ	144	;# 
   222     0095                     WPU             equ	149	;# 
   223     0096                     IOC             equ	150	;# 
   224     0096                     IOCB            equ	150	;# 
   225     0099                     VRCON           equ	153	;# 
   226     009A                     EEDATA          equ	154	;# 
   227     009A                     EEDAT           equ	154	;# 
   228     009B                     EEADR           equ	155	;# 
   229     009C                     EECON1          equ	156	;# 
   230     009D                     EECON2          equ	157	;# 
   231     009E                     ADRESL          equ	158	;# 
   232     009F                     ANSEL           equ	159	;# 
   233     0000                     INDF            equ	0	;# 
   234     0001                     TMR0            equ	1	;# 
   235     0002                     PCL             equ	2	;# 
   236     0003                     STATUS          equ	3	;# 
   237     0004                     FSR             equ	4	;# 
   238     0005                     GPIO            equ	5	;# 
   239     000A                     PCLATH          equ	10	;# 
   240     000B                     INTCON          equ	11	;# 
   241     000C                     PIR1            equ	12	;# 
   242     000E                     TMR1            equ	14	;# 
   243     000E                     TMR1L           equ	14	;# 
   244     000F                     TMR1H           equ	15	;# 
   245     0010                     T1CON           equ	16	;# 
   246     0019                     CMCON           equ	25	;# 
   247     001E                     ADRESH          equ	30	;# 
   248     001F                     ADCON0          equ	31	;# 
   249     0081                     OPTION_REG      equ	129	;# 
   250     0085                     TRISIO          equ	133	;# 
   251     008C                     PIE1            equ	140	;# 
   252     008E                     PCON            equ	142	;# 
   253     0090                     OSCCAL          equ	144	;# 
   254     0095                     WPU             equ	149	;# 
   255     0096                     IOC             equ	150	;# 
   256     0096                     IOCB            equ	150	;# 
   257     0099                     VRCON           equ	153	;# 
   258     009A                     EEDATA          equ	154	;# 
   259     009A                     EEDAT           equ	154	;# 
   260     009B                     EEADR           equ	155	;# 
   261     009C                     EECON1          equ	156	;# 
   262     009D                     EECON2          equ	157	;# 
   263     009E                     ADRESL          equ	158	;# 
   264     009F                     ANSEL           equ	159	;# 
   265     0000                     INDF            equ	0	;# 
   266     0001                     TMR0            equ	1	;# 
   267     0002                     PCL             equ	2	;# 
   268     0003                     STATUS          equ	3	;# 
   269     0004                     FSR             equ	4	;# 
   270     0005                     GPIO            equ	5	;# 
   271     000A                     PCLATH          equ	10	;# 
   272     000B                     INTCON          equ	11	;# 
   273     000C                     PIR1            equ	12	;# 
   274     000E                     TMR1            equ	14	;# 
   275     000E                     TMR1L           equ	14	;# 
   276     000F                     TMR1H           equ	15	;# 
   277     0010                     T1CON           equ	16	;# 
   278     0019                     CMCON           equ	25	;# 
   279     001E                     ADRESH          equ	30	;# 
   280     001F                     ADCON0          equ	31	;# 
   281     0081                     OPTION_REG      equ	129	;# 
   282     0085                     TRISIO          equ	133	;# 
   283     008C                     PIE1            equ	140	;# 
   284     008E                     PCON            equ	142	;# 
   285     0090                     OSCCAL          equ	144	;# 
   286     0095                     WPU             equ	149	;# 
   287     0096                     IOC             equ	150	;# 
   288     0096                     IOCB            equ	150	;# 
   289     0099                     VRCON           equ	153	;# 
   290     009A                     EEDATA          equ	154	;# 
   291     009A                     EEDAT           equ	154	;# 
   292     009B                     EEADR           equ	155	;# 
   293     009C                     EECON1          equ	156	;# 
   294     009D                     EECON2          equ	157	;# 
   295     009E                     ADRESL          equ	158	;# 
   296     009F                     ANSEL           equ	159	;# 
   297                           
   298                           	psect	strings
   299     0363                     __pstrings:
   300     0363                     stringtab:
   301     0363                     __stringtab:
   302     0363                     stringcode:	
   303                           ;	String table - string pointers are 1 byte each
   304                           
   305     0363                     stringdir:
   306     0363  3003               	movlw	high stringdir
   307     0364  008A               	movwf	10
   308     0365  0804               	movf	4,w
   309     0366  0A84               	incf	4,f
   310     0367  0782               	addwf	2,f
   311     0368                     __stringbase:
   312     0368  3400               	retlw	0
   313     0369                     __end_of__stringtab:
   314     0369                     _MAX7219_No_Table:
   315     0369  347E               	retlw	126
   316     036A  3430               	retlw	48
   317     036B  346D               	retlw	109
   318     036C  3479               	retlw	121
   319     036D  3433               	retlw	51
   320     036E  345B               	retlw	91
   321     036F  345F               	retlw	95
   322     0370  3470               	retlw	112
   323     0371  347F               	retlw	127
   324     0372  347B               	retlw	123
   325     0373                     __end_of_MAX7219_No_Table:
   326     000B                     _INTCONbits     set	11
   327     0005                     _GPIO           set	5
   328     001E                     _ADRESH         set	30
   329     001F                     _ADCON0         set	31
   330     0096                     _IOCB           set	150
   331     0095                     _WPU            set	149
   332     0081                     _OPTION_REG     set	129
   333     0085                     _TRISIO         set	133
   334     009E                     _ADRESL         set	158
   335     009F                     _ANSEL          set	159
   336                           
   337                           	psect	cinit
   338     000C                     start_initialization:	
   339                           ; #config settings
   340                           
   341     000C                     __initialization:
   342                           
   343                           ; Clear objects allocated to BANK0
   344     000C  1283               	bcf	3,5	;RP0=0, select bank0
   345     000D  01C8               	clrf	__pbssBANK0& (0+127)
   346     000E  01C9               	clrf	(__pbssBANK0+1)& (0+127)
   347     000F  01CA               	clrf	(__pbssBANK0+2)& (0+127)
   348     0010  01CB               	clrf	(__pbssBANK0+3)& (0+127)
   349     0011  01CC               	clrf	(__pbssBANK0+4)& (0+127)
   350     0012                     end_of_initialization:	
   351                           ;End of C runtime variable initialization code
   352                           
   353     0012                     __end_of__initialization:
   354     0012  0183               	clrf	3
   355     0013  2814               	ljmp	_main	;jump to C main() function
   356                           
   357                           	psect	bssBANK0
   358     0048                     __pbssBANK0:
   359     0048                     _Counter:
   360     0048                     	ds	2
   361     004A                     _DispenserOn:
   362     004A                     	ds	1
   363     004B                     _DIO_State:
   364     004B                     	ds	1
   365     004C                     _BCD_Enabled:
   366     004C                     	ds	1
   367                           
   368                           	psect	cstackCOMMON
   369     0000                     __pcstackCOMMON:
   370     0000                     ??_MAX7219_Init:
   371     0000                     ??_Adc_Init:	
   372                           ; 1 bytes @ 0x0
   373                           
   374     0000                     ??_Dio_init:	
   375                           ; 1 bytes @ 0x0
   376                           
   377     0000                     ??_Gpio_Init:	
   378                           ; 1 bytes @ 0x0
   379                           
   380     0000                     ??_SPI_Init:	
   381                           ; 1 bytes @ 0x0
   382                           
   383     0000                     ??___lwdiv:	
   384                           ; 1 bytes @ 0x0
   385                           
   386     0000                     ??___lwmod:	
   387                           ; 1 bytes @ 0x0
   388                           
   389                           
   390                           	psect	cstackBANK0
   391     0020                     __pcstackBANK0:	
   392                           ; 1 bytes @ 0x0
   393                           
   394     0020                     ?_MAX7219_Init:
   395     0020                     ?_MAX7219_ClearDisplay:	
   396                           ; 1 bytes @ 0x0
   397                           
   398     0020                     ?_Adc_Init:	
   399                           ; 1 bytes @ 0x0
   400                           
   401     0020                     ?_Adc_StartConversion:	
   402                           ; 1 bytes @ 0x0
   403                           
   404     0020                     ?_Dio_Pin_Read:	
   405                           ; 1 bytes @ 0x0
   406                           
   407     0020                     ?_Dio_init:	
   408                           ; 1 bytes @ 0x0
   409                           
   410     0020                     ?_Gpio_Init:	
   411                           ; 1 bytes @ 0x0
   412                           
   413     0020                     ?_SPI_Init:	
   414                           ; 1 bytes @ 0x0
   415                           
   416     0020                     ?_ISR:	
   417                           ; 1 bytes @ 0x0
   418                           
   419     0020                     ?_main:	
   420                           ; 1 bytes @ 0x0
   421                           
   422     0020                     ??_Dio_Pin_Read:	
   423                           ; 2 bytes @ 0x0
   424                           
   425                           
   426                           ; 1 bytes @ 0x0
   427     0020                     	ds	1
   428     0021                     Dio_Pin_Read@pinNumber:
   429                           
   430                           ; 1 bytes @ 0x1
   431     0021                     	ds	1
   432     0022                     ??_ISR:
   433                           
   434                           ; 1 bytes @ 0x2
   435     0022                     	ds	3
   436     0025                     ISR@i:
   437                           
   438                           ; 2 bytes @ 0x5
   439     0025                     	ds	2
   440     0027                     ?_Dio_Pin_Write:
   441     0027                     ?_Dio_Config:	
   442                           ; 1 bytes @ 0x7
   443                           
   444     0027                     ?_Adc_ReadResult:	
   445                           ; 1 bytes @ 0x7
   446                           
   447     0027                     ?___lwdiv:	
   448                           ; 2 bytes @ 0x7
   449                           
   450     0027                     Dio_Pin_Write@state:	
   451                           ; 2 bytes @ 0x7
   452                           
   453     0027                     Dio_Config@direction:	
   454                           ; 1 bytes @ 0x7
   455                           
   456     0027                     ___lwdiv@divisor:	
   457                           ; 1 bytes @ 0x7
   458                           
   459     0027                     ??_Adc_StartConversion:	
   460                           ; 2 bytes @ 0x7
   461                           
   462                           
   463                           ; 1 bytes @ 0x7
   464     0027                     	ds	1
   465     0028                     Adc_StartConversion@channel:
   466     0028                     Dio_Config@state:	
   467                           ; 1 bytes @ 0x8
   468                           
   469     0028                     ??_Dio_Pin_Write:	
   470                           ; 1 bytes @ 0x8
   471                           
   472                           
   473                           ; 1 bytes @ 0x8
   474     0028                     	ds	1
   475     0029                     Dio_Pin_Write@pinNumber:
   476     0029                     Dio_Config@pullType:	
   477                           ; 1 bytes @ 0x9
   478                           
   479     0029                     ___lwdiv@dividend:	
   480                           ; 1 bytes @ 0x9
   481                           
   482     0029                     ??_Adc_ReadResult:	
   483                           ; 2 bytes @ 0x9
   484                           
   485                           
   486                           ; 1 bytes @ 0x9
   487     0029                     	ds	1
   488     002A                     ?_SPI_Send_16bit:
   489     002A                     SPI_Send_16bit@data:	
   490                           ; 1 bytes @ 0xA
   491                           
   492     002A                     ??_Dio_Config:	
   493                           ; 2 bytes @ 0xA
   494                           
   495                           
   496                           ; 1 bytes @ 0xA
   497     002A                     	ds	1
   498     002B                     ___lwdiv@quotient:
   499                           
   500                           ; 2 bytes @ 0xB
   501     002B                     	ds	1
   502     002C                     ??_SPI_Send_16bit:
   503                           
   504                           ; 1 bytes @ 0xC
   505     002C                     	ds	1
   506     002D                     ___lwdiv@counter:
   507                           
   508                           ; 1 bytes @ 0xD
   509     002D                     	ds	1
   510     002E                     ?___lwmod:
   511     002E                     _Dio_Config$71:	
   512                           ; 2 bytes @ 0xE
   513                           
   514     002E                     ___lwmod@divisor:	
   515                           ; 2 bytes @ 0xE
   516                           
   517                           
   518                           ; 2 bytes @ 0xE
   519     002E                     	ds	2
   520     0030                     ?___lmul:
   521     0030                     Dio_Config@pinNumber:	
   522                           ; 4 bytes @ 0x10
   523                           
   524     0030                     ___lwmod@dividend:	
   525                           ; 1 bytes @ 0x10
   526                           
   527     0030                     ___lmul@multiplier:	
   528                           ; 2 bytes @ 0x10
   529                           
   530                           
   531                           ; 4 bytes @ 0x10
   532     0030                     	ds	1
   533     0031                     SPI_Send_16bit@bit:
   534                           
   535                           ; 2 bytes @ 0x11
   536     0031                     	ds	1
   537     0032                     ___lwmod@counter:
   538                           
   539                           ; 1 bytes @ 0x12
   540     0032                     	ds	1
   541     0033                     ?_MAX7219_DisplayData:
   542     0033                     MAX7219_DisplayData@character:	
   543                           ; 1 bytes @ 0x13
   544                           
   545     0033                     ??_MAX7219_ClearDisplay:	
   546                           ; 1 bytes @ 0x13
   547                           
   548                           
   549                           ; 1 bytes @ 0x13
   550     0033                     	ds	1
   551     0034                     ___lmul@multiplicand:
   552     0034                     ??_MAX7219_DisplayData:	
   553                           ; 4 bytes @ 0x14
   554                           
   555                           
   556                           ; 1 bytes @ 0x14
   557     0034                     	ds	1
   558     0035                     MAX7219_ClearDisplay@i:
   559                           
   560                           ; 1 bytes @ 0x15
   561     0035                     	ds	3
   562     0038                     MAX7219_DisplayData@digit:
   563     0038                     ??___lmul:	
   564                           ; 1 bytes @ 0x18
   565                           
   566                           
   567                           ; 1 bytes @ 0x18
   568     0038                     	ds	1
   569     0039                     ___lmul@product:
   570                           
   571                           ; 4 bytes @ 0x19
   572     0039                     	ds	4
   573     003D                     ??_main:
   574                           
   575                           ; 1 bytes @ 0x1D
   576     003D                     	ds	8
   577     0045                     _main$776:
   578                           
   579                           ; 2 bytes @ 0x25
   580     0045                     	ds	2
   581     0047                     main@i:
   582                           
   583                           ; 1 bytes @ 0x27
   584     0047                     	ds	1
   585                           
   586                           	psect	maintext
   587     0014                     __pmaintext:	
   588 ;;
   589 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   590 ;;
   591 ;; *************** function _main *****************
   592 ;; Defined at:
   593 ;;		line 29 in file "main.c"
   594 ;; Parameters:    Size  Location     Type
   595 ;;		None
   596 ;; Auto vars:     Size  Location     Type
   597 ;;  i               1   39[BANK0 ] unsigned char 
   598 ;; Return value:  Size  Location     Type
   599 ;;                  2  162[None  ] int 
   600 ;; Registers used:
   601 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   602 ;; Tracked objects:
   603 ;;		On entry : B00/0
   604 ;;		On exit  : 100/0
   605 ;;		Unchanged: 0/0
   606 ;; Data sizes:     COMMON   BANK0
   607 ;;      Params:         0       0
   608 ;;      Locals:         0       3
   609 ;;      Temps:          0       8
   610 ;;      Totals:         0      11
   611 ;;Total ram usage:       11 bytes
   612 ;; Hardware stack levels required when called: 5
   613 ;; This function calls:
   614 ;;		_Adc_Init
   615 ;;		_Adc_ReadResult
   616 ;;		_Adc_StartConversion
   617 ;;		_Dio_Pin_Write
   618 ;;		_Dio_init
   619 ;;		_Gpio_Init
   620 ;;		_MAX7219_ClearDisplay
   621 ;;		_MAX7219_DisplayData
   622 ;;		_MAX7219_Init
   623 ;;		_SPI_Init
   624 ;;		___lmul
   625 ;;		___lwdiv
   626 ;;		___lwmod
   627 ;; This function is called by:
   628 ;;		Startup code after reset
   629 ;; This function uses a non-reentrant model
   630 ;;
   631                           
   632     0014                     _main:	
   633                           ;psect for function _main
   634                           
   635                           
   636                           ;main.c: 30:         Gpio_Init();
   637                           
   638                           ;incstack = 0
   639                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   640     0014  232C               	fcall	_Gpio_Init
   641                           
   642                           ;main.c: 31:         Dio_init();
   643     0015  2383               	fcall	_Dio_init
   644                           
   645                           ;main.c: 32:         Adc_Init();
   646     0016  2392               	fcall	_Adc_Init
   647                           
   648                           ;main.c: 33:         SPI_Init();
   649     0017  2301               	fcall	_SPI_Init
   650                           
   651                           ;main.c: 34:       MAX7219_Init();
   652     0018  22E6               	fcall	_MAX7219_Init
   653                           
   654                           ;main.c: 35:    IOCB |= (1 << 3);
   655     0019  1683               	bsf	3,5	;RP0=1, select bank1
   656     001A  1596               	bsf	22,3	;volatile
   657                           
   658                           ;main.c: 37:     INTCONbits.GIE = 1;
   659     001B  178B               	bsf	11,7	;volatile
   660                           
   661                           ;main.c: 38:     INTCONbits.PEIE = 1;
   662     001C  170B               	bsf	11,6	;volatile
   663                           
   664                           ;main.c: 39:     INTCONbits.GPIE = 1;
   665     001D  158B               	bsf	11,3	;volatile
   666     001E                     l1285:
   667                           
   668                           ;main.c: 57:         while(DispenserOn){
   669     001E  1283               	bcf	3,5	;RP0=0, select bank0
   670     001F  084A               	movf	_DispenserOn,w
   671     0020  1903               	btfsc	3,2
   672     0021  281E               	goto	l1285
   673                           
   674                           ;main.c: 58:             Adc_StartConversion(ADC_CHANNEL_AN0);
   675     0022  3000               	movlw	0
   676     0023  2373               	fcall	_Adc_StartConversion
   677                           
   678                           ;main.c: 60:             MAX7219_ClearDisplay(); MAX7219_DisplayData(0x04,0x1D); MAX7219
      +                          _DisplayData(0x03,0x15);;
   679     0024  2318               	fcall	_MAX7219_ClearDisplay
   680     0025  301D               	movlw	29
   681     0026  00B3               	movwf	MAX7219_DisplayData@character
   682     0027  3004               	movlw	4
   683     0028  233F               	fcall	_MAX7219_DisplayData
   684     0029  3015               	movlw	21
   685     002A  00B3               	movwf	MAX7219_DisplayData@character
   686     002B  3003               	movlw	3
   687     002C  233F               	fcall	_MAX7219_DisplayData
   688                           
   689                           ;main.c: 63:             for(uint8 i=0; (i<100)&&DispenserOn;i++ )
   690     002D  01C7               	clrf	main@i
   691     002E  283E               	goto	l1249
   692     002F                     l1251:
   693     002F  084A               	movf	_DispenserOn,w
   694     0030  1903               	btfsc	3,2
   695     0031  2842               	goto	l1253
   696                           
   697                           ;main.c: 64:                 {_delay((unsigned long)((10)*(4000000/4000.0)));}
   698     0032  300D               	movlw	13
   699     0033  00BE               	movwf	??_main+1
   700     0034  30FB               	movlw	251
   701     0035  00BD               	movwf	??_main
   702     0036                     u1057:
   703     0036  0BBD               	decfsz	??_main,f
   704     0037  2836               	goto	u1057
   705     0038  0BBE               	decfsz	??_main+1,f
   706     0039  2836               	goto	u1057
   707     003A  283B               	nop2
   708     003B  3001               	movlw	1
   709     003C  1283               	bcf	3,5	;RP0=0, select bank0
   710     003D  07C7               	addwf	main@i,f
   711     003E                     l1249:
   712     003E  3064               	movlw	100
   713     003F  0247               	subwf	main@i,w
   714     0040  1C03               	btfss	3,0
   715     0041  282F               	goto	l1251
   716     0042                     l1253:
   717                           
   718                           ;main.c: 66:             MAX7219_ClearDisplay();
   719     0042  2318               	fcall	_MAX7219_ClearDisplay
   720                           
   721                           ;main.c: 69:             Dio_Pin_Write (4,1);
   722     0043  01A7               	clrf	Dio_Pin_Write@state
   723     0044  0AA7               	incf	Dio_Pin_Write@state,f
   724     0045  3004               	movlw	4
   725     0046  22C7               	fcall	_Dio_Pin_Write
   726                           
   727                           ;main.c: 72:             Counter = 1 + ((uint32)89*Adc_ReadResult()/1024);
   728     0047  2271               	fcall	_Adc_ReadResult
   729     0048  0827               	movf	?_Adc_ReadResult,w
   730     0049  00BD               	movwf	??_main
   731     004A  0828               	movf	?_Adc_ReadResult+1,w
   732     004B  00BE               	movwf	??_main+1
   733     004C  01BF               	clrf	??_main+2
   734     004D  01C0               	clrf	??_main+3
   735     004E  0840               	movf	??_main+3,w
   736     004F  00B3               	movwf	___lmul@multiplier+3
   737     0050  083F               	movf	??_main+2,w
   738     0051  00B2               	movwf	___lmul@multiplier+2
   739     0052  083E               	movf	??_main+1,w
   740     0053  00B1               	movwf	___lmul@multiplier+1
   741     0054  083D               	movf	??_main,w
   742     0055  00B0               	movwf	___lmul@multiplier
   743     0056  3000               	movlw	0
   744     0057  00B7               	movwf	___lmul@multiplicand+3
   745     0058  3000               	movlw	0
   746     0059  00B6               	movwf	___lmul@multiplicand+2
   747     005A  3000               	movlw	0
   748     005B  00B5               	movwf	___lmul@multiplicand+1
   749     005C  3059               	movlw	89
   750     005D  00B4               	movwf	___lmul@multiplicand
   751     005E  21C8               	fcall	___lmul
   752     005F  0830               	movf	?___lmul,w
   753     0060  00C1               	movwf	??_main+4
   754     0061  0831               	movf	?___lmul+1,w
   755     0062  00C2               	movwf	??_main+5
   756     0063  0832               	movf	?___lmul+2,w
   757     0064  00C3               	movwf	??_main+6
   758     0065  0833               	movf	?___lmul+3,w
   759     0066  00C4               	movwf	??_main+7
   760     0067  300A               	movlw	10
   761     0068                     u965:
   762     0068  1003               	clrc
   763     0069  0CC4               	rrf	??_main+7,f
   764     006A  0CC3               	rrf	??_main+6,f
   765     006B  0CC2               	rrf	??_main+5,f
   766     006C  0CC1               	rrf	??_main+4,f
   767     006D  3EFF               	addlw	-1
   768     006E  1D03               	skipz
   769     006F  2868               	goto	u965
   770     0070  0841               	movf	??_main+4,w
   771     0071  3E01               	addlw	1
   772     0072  00C8               	movwf	_Counter
   773     0073  0842               	movf	??_main+5,w
   774     0074  1803               	skipnc
   775     0075  3E01               	addlw	1
   776     0076  3E00               	addlw	0
   777     0077  00C9               	movwf	_Counter+1
   778                           
   779                           ;main.c: 75:             for(;(Counter>0)&&DispenserOn;Counter--){
   780     0078  28EF               	goto	l1269
   781     0079                     l1271:
   782     0079  084A               	movf	_DispenserOn,w
   783     007A  1903               	btfsc	3,2
   784     007B  28F3               	goto	l1273
   785                           
   786                           ;main.c: 76:                 MAX7219_DisplayData(0x04, MAX7219_No_Table[Counter/600]);
   787     007C  3058               	movlw	88
   788     007D  00A7               	movwf	___lwdiv@divisor
   789     007E  3002               	movlw	2
   790     007F  00A8               	movwf	___lwdiv@divisor+1
   791     0080  0849               	movf	_Counter+1,w
   792     0081  00AA               	movwf	___lwdiv@dividend+1
   793     0082  0848               	movf	_Counter,w
   794     0083  00A9               	movwf	___lwdiv@dividend
   795     0084  2207               	fcall	___lwdiv
   796     0085  0827               	movf	?___lwdiv,w
   797     0086  3E01               	addlw	low ((_MAX7219_No_Table-__stringbase)| (0+32768))
   798     0087  0084               	movwf	4
   799     0088  2363               	fcall	stringdir
   800     0089  00B3               	movwf	MAX7219_DisplayData@character
   801     008A  3004               	movlw	4
   802     008B  233F               	fcall	_MAX7219_DisplayData
   803                           
   804                           ;main.c: 77:                 MAX7219_DisplayData(0x03, MAX7219_No_Table[(Counter/60)%10]
      +                          );
   805     008C  300A               	movlw	10
   806     008D  00AE               	movwf	___lwmod@divisor
   807     008E  3000               	movlw	0
   808     008F  00AF               	movwf	___lwmod@divisor+1
   809     0090  303C               	movlw	60
   810     0091  00A7               	movwf	___lwdiv@divisor
   811     0092  3000               	movlw	0
   812     0093  00A8               	movwf	___lwdiv@divisor+1
   813     0094  0849               	movf	_Counter+1,w
   814     0095  00AA               	movwf	___lwdiv@dividend+1
   815     0096  0848               	movf	_Counter,w
   816     0097  00A9               	movwf	___lwdiv@dividend
   817     0098  2207               	fcall	___lwdiv
   818     0099  0828               	movf	?___lwdiv+1,w
   819     009A  00B1               	movwf	___lwmod@dividend+1
   820     009B  0827               	movf	?___lwdiv,w
   821     009C  00B0               	movwf	___lwmod@dividend
   822     009D  2241               	fcall	___lwmod
   823     009E  082E               	movf	?___lwmod,w
   824     009F  3E01               	addlw	low ((_MAX7219_No_Table-__stringbase)| (0+32768))
   825     00A0  0084               	movwf	4
   826     00A1  2363               	fcall	stringdir
   827     00A2  00B3               	movwf	MAX7219_DisplayData@character
   828     00A3  3003               	movlw	3
   829     00A4  233F               	fcall	_MAX7219_DisplayData
   830                           
   831                           ;main.c: 78:                 MAX7219_DisplayData(0x02, MAX7219_No_Table[(Counter%60)/10]
      +                          );
   832     00A5  300A               	movlw	10
   833     00A6  00A7               	movwf	___lwdiv@divisor
   834     00A7  3000               	movlw	0
   835     00A8  00A8               	movwf	___lwdiv@divisor+1
   836     00A9  0849               	movf	_Counter+1,w
   837     00AA  00B1               	movwf	___lwmod@dividend+1
   838     00AB  0848               	movf	_Counter,w
   839     00AC  00B0               	movwf	___lwmod@dividend
   840     00AD  303C               	movlw	60
   841     00AE  00AE               	movwf	___lwmod@divisor
   842     00AF  3000               	movlw	0
   843     00B0  00AF               	movwf	___lwmod@divisor+1
   844     00B1  2241               	fcall	___lwmod
   845     00B2  082F               	movf	?___lwmod+1,w
   846     00B3  00AA               	movwf	___lwdiv@dividend+1
   847     00B4  082E               	movf	?___lwmod,w
   848     00B5  00A9               	movwf	___lwdiv@dividend
   849     00B6  2207               	fcall	___lwdiv
   850     00B7  0827               	movf	?___lwdiv,w
   851     00B8  3E01               	addlw	low ((_MAX7219_No_Table-__stringbase)| (0+32768))
   852     00B9  0084               	movwf	4
   853     00BA  2363               	fcall	stringdir
   854     00BB  00B3               	movwf	MAX7219_DisplayData@character
   855     00BC  3002               	movlw	2
   856     00BD  233F               	fcall	_MAX7219_DisplayData
   857                           
   858                           ;main.c: 79:                 MAX7219_DisplayData(0x01, MAX7219_No_Table[(Counter%60)%10]
      +                          );
   859     00BE  0849               	movf	_Counter+1,w
   860     00BF  00B1               	movwf	___lwmod@dividend+1
   861     00C0  0848               	movf	_Counter,w
   862     00C1  00B0               	movwf	___lwmod@dividend
   863     00C2  303C               	movlw	60
   864     00C3  00AE               	movwf	___lwmod@divisor
   865     00C4  3000               	movlw	0
   866     00C5  00AF               	movwf	___lwmod@divisor+1
   867     00C6  2241               	fcall	___lwmod
   868     00C7  082F               	movf	?___lwmod+1,w
   869     00C8  00C6               	movwf	_main$776+1
   870     00C9  082E               	movf	?___lwmod,w
   871     00CA  00C5               	movwf	_main$776
   872                           
   873                           ;main.c: 79:                 MAX7219_DisplayData(0x01, MAX7219_No_Table[(Counter%60)%10]
      +                          );
   874     00CB  300A               	movlw	10
   875     00CC  00AE               	movwf	___lwmod@divisor
   876     00CD  3000               	movlw	0
   877     00CE  00AF               	movwf	___lwmod@divisor+1
   878     00CF  0846               	movf	_main$776+1,w
   879     00D0  00B1               	movwf	___lwmod@dividend+1
   880     00D1  0845               	movf	_main$776,w
   881     00D2  00B0               	movwf	___lwmod@dividend
   882     00D3  2241               	fcall	___lwmod
   883     00D4  082E               	movf	?___lwmod,w
   884     00D5  3E01               	addlw	low ((_MAX7219_No_Table-__stringbase)| (0+32768))
   885     00D6  0084               	movwf	4
   886     00D7  2363               	fcall	stringdir
   887     00D8  00B3               	movwf	MAX7219_DisplayData@character
   888     00D9  3001               	movlw	1
   889     00DA  233F               	fcall	_MAX7219_DisplayData
   890                           
   891                           ;main.c: 80:                 _delay((unsigned long)((900)*(4000000/4000.0)));
   892     00DB  3005               	movlw	5
   893     00DC  00BF               	movwf	??_main+2
   894     00DD  3091               	movlw	145
   895     00DE  00BE               	movwf	??_main+1
   896     00DF  30CF               	movlw	207
   897     00E0  00BD               	movwf	??_main
   898     00E1                     u1067:
   899     00E1  0BBD               	decfsz	??_main,f
   900     00E2  28E1               	goto	u1067
   901     00E3  0BBE               	decfsz	??_main+1,f
   902     00E4  28E1               	goto	u1067
   903     00E5  0BBF               	decfsz	??_main+2,f
   904     00E6  28E1               	goto	u1067
   905     00E7  28E8               	nop2
   906                           
   907                           ;main.c: 81:             }
   908     00E8  3001               	movlw	1
   909     00E9  1283               	bcf	3,5	;RP0=0, select bank0
   910     00EA  02C8               	subwf	_Counter,f
   911     00EB  3000               	movlw	0
   912     00EC  1C03               	skipc
   913     00ED  03C9               	decf	_Counter+1,f
   914     00EE  02C9               	subwf	_Counter+1,f
   915     00EF                     l1269:
   916     00EF  0848               	movf	_Counter,w
   917     00F0  0449               	iorwf	_Counter+1,w
   918     00F1  1D03               	btfss	3,2
   919     00F2  2879               	goto	l1271
   920     00F3                     l1273:
   921                           
   922                           ;main.c: 82:             Dio_Pin_Write (4, 0);
   923     00F3  01A7               	clrf	Dio_Pin_Write@state
   924     00F4  3004               	movlw	4
   925     00F5  22C7               	fcall	_Dio_Pin_Write
   926                           
   927                           ;main.c: 83:             DispenserOn=0;
   928     00F6  01CA               	clrf	_DispenserOn
   929                           
   930                           ;main.c: 84:             MAX7219_ClearDisplay(); MAX7219_DisplayData(0x05,0x1D); MAX7219
      +                          _DisplayData(0x04,0x47); MAX7219_DisplayData(0x03,0x47);;
   931     00F7  2318               	fcall	_MAX7219_ClearDisplay
   932     00F8  301D               	movlw	29
   933     00F9  00B3               	movwf	MAX7219_DisplayData@character
   934     00FA  3005               	movlw	5
   935     00FB  233F               	fcall	_MAX7219_DisplayData
   936     00FC  3047               	movlw	71
   937     00FD  00B3               	movwf	MAX7219_DisplayData@character
   938     00FE  3004               	movlw	4
   939     00FF  233F               	fcall	_MAX7219_DisplayData
   940     0100  3047               	movlw	71
   941     0101  00B3               	movwf	MAX7219_DisplayData@character
   942     0102  3003               	movlw	3
   943     0103  233F               	fcall	_MAX7219_DisplayData
   944     0104  281E               	goto	l1285
   945     0105                     __end_of_main:
   946                           
   947                           	psect	text1
   948     0241                     __ptext1:	
   949 ;; *************** function ___lwmod *****************
   950 ;; Defined at:
   951 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\lwmod.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;  divisor         2   14[BANK0 ] unsigned int 
   954 ;;  dividend        2   16[BANK0 ] unsigned int 
   955 ;; Auto vars:     Size  Location     Type
   956 ;;  counter         1   18[BANK0 ] unsigned char 
   957 ;; Return value:  Size  Location     Type
   958 ;;                  2   14[BANK0 ] unsigned int 
   959 ;; Registers used:
   960 ;;		wreg, status,2, status,0
   961 ;; Tracked objects:
   962 ;;		On entry : 100/0
   963 ;;		On exit  : 100/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMMON   BANK0
   966 ;;      Params:         0       4
   967 ;;      Locals:         0       1
   968 ;;      Temps:          0       0
   969 ;;      Totals:         0       5
   970 ;;Total ram usage:        5 bytes
   971 ;; Hardware stack levels used: 1
   972 ;; Hardware stack levels required when called: 2
   973 ;; This function calls:
   974 ;;		Nothing
   975 ;; This function is called by:
   976 ;;		_main
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980     0241                     ___lwmod:	
   981                           ;psect for function ___lwmod
   982                           
   983                           
   984                           ;incstack = 0
   985                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   986     0241  082E               	movf	___lwmod@divisor,w
   987     0242  042F               	iorwf	___lwmod@divisor+1,w
   988     0243  1903               	btfsc	3,2
   989     0244  2A6C               	goto	l1217
   990     0245  3001               	movlw	1
   991     0246  00B2               	movwf	___lwmod@counter
   992     0247                     l1207:
   993     0247  1BAF               	btfsc	___lwmod@divisor+1,7
   994     0248  2A53               	goto	l1209
   995     0249  3001               	movlw	1
   996     024A                     u895:
   997     024A  1003               	clrc
   998     024B  0DAE               	rlf	___lwmod@divisor,f
   999     024C  0DAF               	rlf	___lwmod@divisor+1,f
  1000     024D  3EFF               	addlw	-1
  1001     024E  1D03               	skipz
  1002     024F  2A4A               	goto	u895
  1003     0250  3001               	movlw	1
  1004     0251  07B2               	addwf	___lwmod@counter,f
  1005     0252  2A47               	goto	l1207
  1006     0253                     l1209:
  1007     0253  082F               	movf	___lwmod@divisor+1,w
  1008     0254  0231               	subwf	___lwmod@dividend+1,w
  1009     0255  1D03               	skipz
  1010     0256  2A59               	goto	u915
  1011     0257  082E               	movf	___lwmod@divisor,w
  1012     0258  0230               	subwf	___lwmod@dividend,w
  1013     0259                     u915:
  1014     0259  1C03               	skipc
  1015     025A  2A61               	goto	l1213
  1016     025B  082E               	movf	___lwmod@divisor,w
  1017     025C  02B0               	subwf	___lwmod@dividend,f
  1018     025D  082F               	movf	___lwmod@divisor+1,w
  1019     025E  1C03               	skipc
  1020     025F  03B1               	decf	___lwmod@dividend+1,f
  1021     0260  02B1               	subwf	___lwmod@dividend+1,f
  1022     0261                     l1213:
  1023     0261  3001               	movlw	1
  1024     0262                     u925:
  1025     0262  1003               	clrc
  1026     0263  0CAF               	rrf	___lwmod@divisor+1,f
  1027     0264  0CAE               	rrf	___lwmod@divisor,f
  1028     0265  3EFF               	addlw	-1
  1029     0266  1D03               	skipz
  1030     0267  2A62               	goto	u925
  1031     0268  3001               	movlw	1
  1032     0269  02B2               	subwf	___lwmod@counter,f
  1033     026A  1D03               	btfss	3,2
  1034     026B  2A53               	goto	l1209
  1035     026C                     l1217:
  1036     026C  0831               	movf	___lwmod@dividend+1,w
  1037     026D  00AF               	movwf	?___lwmod+1
  1038     026E  0830               	movf	___lwmod@dividend,w
  1039     026F  00AE               	movwf	?___lwmod
  1040     0270  0008               	return
  1041     0271                     __end_of___lwmod:
  1042                           
  1043                           	psect	text2
  1044     0207                     __ptext2:	
  1045 ;; *************** function ___lwdiv *****************
  1046 ;; Defined at:
  1047 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\lwdiv.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;  divisor         2    7[BANK0 ] unsigned int 
  1050 ;;  dividend        2    9[BANK0 ] unsigned int 
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;  quotient        2   11[BANK0 ] unsigned int 
  1053 ;;  counter         1   13[BANK0 ] unsigned char 
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  2    7[BANK0 ] unsigned int 
  1056 ;; Registers used:
  1057 ;;		wreg, status,2, status,0
  1058 ;; Tracked objects:
  1059 ;;		On entry : 100/0
  1060 ;;		On exit  : 100/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMMON   BANK0
  1063 ;;      Params:         0       4
  1064 ;;      Locals:         0       3
  1065 ;;      Temps:          0       0
  1066 ;;      Totals:         0       7
  1067 ;;Total ram usage:        7 bytes
  1068 ;; Hardware stack levels used: 1
  1069 ;; Hardware stack levels required when called: 2
  1070 ;; This function calls:
  1071 ;;		Nothing
  1072 ;; This function is called by:
  1073 ;;		_main
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077     0207                     ___lwdiv:	
  1078                           ;psect for function ___lwdiv
  1079                           
  1080                           
  1081                           ;incstack = 0
  1082                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1083     0207  01AB               	clrf	___lwdiv@quotient
  1084     0208  01AC               	clrf	___lwdiv@quotient+1
  1085     0209  0827               	movf	___lwdiv@divisor,w
  1086     020A  0428               	iorwf	___lwdiv@divisor+1,w
  1087     020B  1903               	btfsc	3,2
  1088     020C  2A3C               	goto	l1195
  1089     020D  3001               	movlw	1
  1090     020E  00AD               	movwf	___lwdiv@counter
  1091     020F                     l1183:
  1092     020F  1BA8               	btfsc	___lwdiv@divisor+1,7
  1093     0210  2A1B               	goto	l1185
  1094     0211  3001               	movlw	1
  1095     0212                     u825:
  1096     0212  1003               	clrc
  1097     0213  0DA7               	rlf	___lwdiv@divisor,f
  1098     0214  0DA8               	rlf	___lwdiv@divisor+1,f
  1099     0215  3EFF               	addlw	-1
  1100     0216  1D03               	skipz
  1101     0217  2A12               	goto	u825
  1102     0218  3001               	movlw	1
  1103     0219  07AD               	addwf	___lwdiv@counter,f
  1104     021A  2A0F               	goto	l1183
  1105     021B                     l1185:
  1106     021B  3001               	movlw	1
  1107     021C                     u845:
  1108     021C  1003               	clrc
  1109     021D  0DAB               	rlf	___lwdiv@quotient,f
  1110     021E  0DAC               	rlf	___lwdiv@quotient+1,f
  1111     021F  3EFF               	addlw	-1
  1112     0220  1D03               	skipz
  1113     0221  2A1C               	goto	u845
  1114     0222  0828               	movf	___lwdiv@divisor+1,w
  1115     0223  022A               	subwf	___lwdiv@dividend+1,w
  1116     0224  1D03               	skipz
  1117     0225  2A28               	goto	u855
  1118     0226  0827               	movf	___lwdiv@divisor,w
  1119     0227  0229               	subwf	___lwdiv@dividend,w
  1120     0228                     u855:
  1121     0228  1C03               	skipc
  1122     0229  2A31               	goto	l1191
  1123     022A  0827               	movf	___lwdiv@divisor,w
  1124     022B  02A9               	subwf	___lwdiv@dividend,f
  1125     022C  0828               	movf	___lwdiv@divisor+1,w
  1126     022D  1C03               	skipc
  1127     022E  03AA               	decf	___lwdiv@dividend+1,f
  1128     022F  02AA               	subwf	___lwdiv@dividend+1,f
  1129     0230  142B               	bsf	___lwdiv@quotient,0
  1130     0231                     l1191:
  1131     0231  3001               	movlw	1
  1132     0232                     u865:
  1133     0232  1003               	clrc
  1134     0233  0CA8               	rrf	___lwdiv@divisor+1,f
  1135     0234  0CA7               	rrf	___lwdiv@divisor,f
  1136     0235  3EFF               	addlw	-1
  1137     0236  1D03               	skipz
  1138     0237  2A32               	goto	u865
  1139     0238  3001               	movlw	1
  1140     0239  02AD               	subwf	___lwdiv@counter,f
  1141     023A  1D03               	btfss	3,2
  1142     023B  2A1B               	goto	l1185
  1143     023C                     l1195:
  1144     023C  082C               	movf	___lwdiv@quotient+1,w
  1145     023D  00A8               	movwf	?___lwdiv+1
  1146     023E  082B               	movf	___lwdiv@quotient,w
  1147     023F  00A7               	movwf	?___lwdiv
  1148     0240  0008               	return
  1149     0241                     __end_of___lwdiv:
  1150                           
  1151                           	psect	text3
  1152     01C8                     __ptext3:	
  1153 ;; *************** function ___lmul *****************
  1154 ;; Defined at:
  1155 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul32.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;  multiplier      4   16[BANK0 ] unsigned long 
  1158 ;;  multiplicand    4   20[BANK0 ] unsigned long 
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;  product         4   25[BANK0 ] unsigned long 
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  4   16[BANK0 ] unsigned long 
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0
  1165 ;; Tracked objects:
  1166 ;;		On entry : 100/0
  1167 ;;		On exit  : 100/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMMON   BANK0
  1170 ;;      Params:         0       8
  1171 ;;      Locals:         0       4
  1172 ;;      Temps:          0       1
  1173 ;;      Totals:         0      13
  1174 ;;Total ram usage:       13 bytes
  1175 ;; Hardware stack levels used: 1
  1176 ;; Hardware stack levels required when called: 2
  1177 ;; This function calls:
  1178 ;;		Nothing
  1179 ;; This function is called by:
  1180 ;;		_main
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184     01C8                     ___lmul:	
  1185                           ;psect for function ___lmul
  1186                           
  1187                           
  1188                           ;incstack = 0
  1189                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1190     01C8  3000               	movlw	0
  1191     01C9  00BC               	movwf	___lmul@product+3
  1192     01CA  3000               	movlw	0
  1193     01CB  00BB               	movwf	___lmul@product+2
  1194     01CC  3000               	movlw	0
  1195     01CD  00BA               	movwf	___lmul@product+1
  1196     01CE  3000               	movlw	0
  1197     01CF  00B9               	movwf	___lmul@product
  1198     01D0                     l1161:
  1199     01D0  1C30               	btfss	___lmul@multiplier,0
  1200     01D1  29E6               	goto	l1165
  1201     01D2  0834               	movf	___lmul@multiplicand,w
  1202     01D3  07B9               	addwf	___lmul@product,f
  1203     01D4  0835               	movf	___lmul@multiplicand+1,w
  1204     01D5  1103               	clrz
  1205     01D6  1803               	skipnc
  1206     01D7  3E01               	addlw	1
  1207     01D8  1D03               	btfss	3,2
  1208     01D9  07BA               	addwf	___lmul@product+1,f
  1209     01DA  0836               	movf	___lmul@multiplicand+2,w
  1210     01DB  1103               	clrz
  1211     01DC  1803               	skipnc
  1212     01DD  3E01               	addlw	1
  1213     01DE  1D03               	btfss	3,2
  1214     01DF  07BB               	addwf	___lmul@product+2,f
  1215     01E0  0837               	movf	___lmul@multiplicand+3,w
  1216     01E1  1103               	clrz
  1217     01E2  1803               	skipnc
  1218     01E3  3E01               	addlw	1
  1219     01E4  1D03               	btfss	3,2
  1220     01E5  07BC               	addwf	___lmul@product+3,f
  1221     01E6                     l1165:
  1222     01E6  3001               	movlw	1
  1223     01E7  00B8               	movwf	??___lmul
  1224     01E8                     u785:
  1225     01E8  1003               	clrc
  1226     01E9  0DB4               	rlf	___lmul@multiplicand,f
  1227     01EA  0DB5               	rlf	___lmul@multiplicand+1,f
  1228     01EB  0DB6               	rlf	___lmul@multiplicand+2,f
  1229     01EC  0DB7               	rlf	___lmul@multiplicand+3,f
  1230     01ED  0BB8               	decfsz	??___lmul,f
  1231     01EE  29E8               	goto	u785
  1232     01EF  3001               	movlw	1
  1233     01F0                     u795:
  1234     01F0  1003               	clrc
  1235     01F1  0CB3               	rrf	___lmul@multiplier+3,f
  1236     01F2  0CB2               	rrf	___lmul@multiplier+2,f
  1237     01F3  0CB1               	rrf	___lmul@multiplier+1,f
  1238     01F4  0CB0               	rrf	___lmul@multiplier,f
  1239     01F5  3EFF               	addlw	-1
  1240     01F6  1D03               	skipz
  1241     01F7  29F0               	goto	u795
  1242     01F8  0833               	movf	___lmul@multiplier+3,w
  1243     01F9  0432               	iorwf	___lmul@multiplier+2,w
  1244     01FA  0431               	iorwf	___lmul@multiplier+1,w
  1245     01FB  0430               	iorwf	___lmul@multiplier,w
  1246     01FC  1D03               	skipz
  1247     01FD  29D0               	goto	l1161
  1248     01FE  083C               	movf	___lmul@product+3,w
  1249     01FF  00B3               	movwf	?___lmul+3
  1250     0200  083B               	movf	___lmul@product+2,w
  1251     0201  00B2               	movwf	?___lmul+2
  1252     0202  083A               	movf	___lmul@product+1,w
  1253     0203  00B1               	movwf	?___lmul+1
  1254     0204  0839               	movf	___lmul@product,w
  1255     0205  00B0               	movwf	?___lmul
  1256     0206  0008               	return
  1257     0207                     __end_of___lmul:
  1258                           
  1259                           	psect	text4
  1260     0301                     __ptext4:	
  1261 ;; *************** function _SPI_Init *****************
  1262 ;; Defined at:
  1263 ;;		line 12 in file "SERVICE/scr/Spi.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;		None
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;		None
  1268 ;; Return value:  Size  Location     Type
  1269 ;;                  1    wreg      void 
  1270 ;; Registers used:
  1271 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1272 ;; Tracked objects:
  1273 ;;		On entry : 100/0
  1274 ;;		On exit  : 100/100
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMMON   BANK0
  1277 ;;      Params:         0       0
  1278 ;;      Locals:         0       0
  1279 ;;      Temps:          0       0
  1280 ;;      Totals:         0       0
  1281 ;;Total ram usage:        0 bytes
  1282 ;; Hardware stack levels used: 1
  1283 ;; Hardware stack levels required when called: 3
  1284 ;; This function calls:
  1285 ;;		_Dio_Config
  1286 ;; This function is called by:
  1287 ;;		_main
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291     0301                     _SPI_Init:	
  1292                           ;psect for function _SPI_Init
  1293                           
  1294                           
  1295                           ;SERVICE/scr/Spi.c: 13:  Dio_Config (1, 1, 1 , 0);
  1296                           
  1297                           ;incstack = 0
  1298                           ; Regs used in _SPI_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1299     0301  01A7               	clrf	Dio_Config@direction
  1300     0302  0AA7               	incf	Dio_Config@direction,f
  1301     0303  01A8               	clrf	Dio_Config@state
  1302     0304  0AA8               	incf	Dio_Config@state,f
  1303     0305  01A9               	clrf	Dio_Config@pullType
  1304     0306  3001               	movlw	1
  1305     0307  2105               	fcall	_Dio_Config
  1306                           
  1307                           ;SERVICE/scr/Spi.c: 14:  Dio_Config (2, 1, 0 , 0);
  1308     0308  1283               	bcf	3,5	;RP0=0, select bank0
  1309     0309  01A7               	clrf	Dio_Config@direction
  1310     030A  0AA7               	incf	Dio_Config@direction,f
  1311     030B  01A8               	clrf	Dio_Config@state
  1312     030C  01A9               	clrf	Dio_Config@pullType
  1313     030D  3002               	movlw	2
  1314     030E  2105               	fcall	_Dio_Config
  1315                           
  1316                           ;SERVICE/scr/Spi.c: 15:  Dio_Config (5, 1, 1 , 0);
  1317     030F  1283               	bcf	3,5	;RP0=0, select bank0
  1318     0310  01A7               	clrf	Dio_Config@direction
  1319     0311  0AA7               	incf	Dio_Config@direction,f
  1320     0312  01A8               	clrf	Dio_Config@state
  1321     0313  0AA8               	incf	Dio_Config@state,f
  1322     0314  01A9               	clrf	Dio_Config@pullType
  1323     0315  3005               	movlw	5
  1324     0316  2105               	fcall	_Dio_Config
  1325     0317  0008               	return
  1326     0318                     __end_of_SPI_Init:
  1327                           
  1328                           	psect	text5
  1329     02E6                     __ptext5:	
  1330 ;; *************** function _MAX7219_Init *****************
  1331 ;; Defined at:
  1332 ;;		line 8 in file "HAL/scr/max7219.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;		None
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;		None
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      void 
  1339 ;; Registers used:
  1340 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1341 ;; Tracked objects:
  1342 ;;		On entry : 100/100
  1343 ;;		On exit  : 100/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMMON   BANK0
  1346 ;;      Params:         0       0
  1347 ;;      Locals:         0       0
  1348 ;;      Temps:          0       0
  1349 ;;      Totals:         0       0
  1350 ;;Total ram usage:        0 bytes
  1351 ;; Hardware stack levels used: 1
  1352 ;; Hardware stack levels required when called: 4
  1353 ;; This function calls:
  1354 ;;		_SPI_Send_16bit
  1355 ;; This function is called by:
  1356 ;;		_main
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360     02E6                     _MAX7219_Init:	
  1361                           ;psect for function _MAX7219_Init
  1362                           
  1363                           
  1364                           ;HAL/scr/max7219.c: 9:     SPI_Send_16bit(0x0900);
  1365                           
  1366                           ;incstack = 0
  1367                           ; Regs used in _MAX7219_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1368     02E6  3000               	movlw	0
  1369     02E7  1283               	bcf	3,5	;RP0=0, select bank0
  1370     02E8  00AA               	movwf	SPI_Send_16bit@data
  1371     02E9  3009               	movlw	9
  1372     02EA  00AB               	movwf	SPI_Send_16bit@data+1
  1373     02EB  217A               	fcall	_SPI_Send_16bit
  1374                           
  1375                           ;HAL/scr/max7219.c: 10:     SPI_Send_16bit(0x0A0F);
  1376     02EC  300F               	movlw	15
  1377     02ED  00AA               	movwf	SPI_Send_16bit@data
  1378     02EE  300A               	movlw	10
  1379     02EF  00AB               	movwf	SPI_Send_16bit@data+1
  1380     02F0  217A               	fcall	_SPI_Send_16bit
  1381                           
  1382                           ;HAL/scr/max7219.c: 11:     SPI_Send_16bit(0xFBF7);
  1383     02F1  30F7               	movlw	247
  1384     02F2  00AA               	movwf	SPI_Send_16bit@data
  1385     02F3  30FB               	movlw	251
  1386     02F4  00AB               	movwf	SPI_Send_16bit@data+1
  1387     02F5  217A               	fcall	_SPI_Send_16bit
  1388                           
  1389                           ;HAL/scr/max7219.c: 12:     SPI_Send_16bit(0x0C01);
  1390     02F6  3001               	movlw	1
  1391     02F7  00AA               	movwf	SPI_Send_16bit@data
  1392     02F8  300C               	movlw	12
  1393     02F9  00AB               	movwf	SPI_Send_16bit@data+1
  1394     02FA  217A               	fcall	_SPI_Send_16bit
  1395                           
  1396                           ;HAL/scr/max7219.c: 13:     SPI_Send_16bit(0x0F00);
  1397     02FB  3000               	movlw	0
  1398     02FC  00AA               	movwf	SPI_Send_16bit@data
  1399     02FD  300F               	movlw	15
  1400     02FE  00AB               	movwf	SPI_Send_16bit@data+1
  1401     02FF  217A               	fcall	_SPI_Send_16bit
  1402     0300  0008               	return
  1403     0301                     __end_of_MAX7219_Init:
  1404                           
  1405                           	psect	text6
  1406     033F                     __ptext6:	
  1407 ;; *************** function _MAX7219_DisplayData *****************
  1408 ;; Defined at:
  1409 ;;		line 26 in file "HAL/scr/max7219.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  digit           1    wreg     unsigned char 
  1412 ;;  character       1   19[BANK0 ] unsigned char 
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;  digit           1   24[BANK0 ] unsigned char 
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  1    wreg      void 
  1417 ;; Registers used:
  1418 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1419 ;; Tracked objects:
  1420 ;;		On entry : 100/0
  1421 ;;		On exit  : 100/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMMON   BANK0
  1424 ;;      Params:         0       1
  1425 ;;      Locals:         0       1
  1426 ;;      Temps:          0       4
  1427 ;;      Totals:         0       6
  1428 ;;Total ram usage:        6 bytes
  1429 ;; Hardware stack levels used: 1
  1430 ;; Hardware stack levels required when called: 4
  1431 ;; This function calls:
  1432 ;;		_SPI_Send_16bit
  1433 ;; This function is called by:
  1434 ;;		_main
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438     033F                     _MAX7219_DisplayData:	
  1439                           ;psect for function _MAX7219_DisplayData
  1440                           
  1441                           
  1442                           ;incstack = 0
  1443                           ; Regs used in _MAX7219_DisplayData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1444                           ;MAX7219_DisplayData@digit stored from wreg
  1445     033F  00B8               	movwf	MAX7219_DisplayData@digit
  1446                           
  1447                           ;HAL/scr/max7219.c: 27:     SPI_Send_16bit((digit) << 8 | character);
  1448     0340  0833               	movf	MAX7219_DisplayData@character,w
  1449     0341  00B4               	movwf	??_MAX7219_DisplayData
  1450     0342  01B5               	clrf	??_MAX7219_DisplayData+1
  1451     0343  0838               	movf	MAX7219_DisplayData@digit,w
  1452     0344  00B6               	movwf	??_MAX7219_DisplayData+2
  1453     0345  01B7               	clrf	??_MAX7219_DisplayData+3
  1454     0346  0836               	movf	??_MAX7219_DisplayData+2,w
  1455     0347  00B7               	movwf	??_MAX7219_DisplayData+3
  1456     0348  01B6               	clrf	??_MAX7219_DisplayData+2
  1457     0349  0834               	movf	??_MAX7219_DisplayData,w
  1458     034A  0436               	iorwf	??_MAX7219_DisplayData+2,w
  1459     034B  00AA               	movwf	SPI_Send_16bit@data
  1460     034C  0835               	movf	??_MAX7219_DisplayData+1,w
  1461     034D  0437               	iorwf	??_MAX7219_DisplayData+3,w
  1462     034E  00AB               	movwf	SPI_Send_16bit@data+1
  1463     034F  217A               	fcall	_SPI_Send_16bit
  1464     0350  0008               	return
  1465     0351                     __end_of_MAX7219_DisplayData:
  1466                           
  1467                           	psect	text7
  1468     0318                     __ptext7:	
  1469 ;; *************** function _MAX7219_ClearDisplay *****************
  1470 ;; Defined at:
  1471 ;;		line 19 in file "HAL/scr/max7219.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  i               1   21[BANK0 ] unsigned char 
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  1    wreg      void 
  1478 ;; Registers used:
  1479 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 100/0
  1482 ;;		On exit  : 100/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMMON   BANK0
  1485 ;;      Params:         0       0
  1486 ;;      Locals:         0       1
  1487 ;;      Temps:          0       2
  1488 ;;      Totals:         0       3
  1489 ;;Total ram usage:        3 bytes
  1490 ;; Hardware stack levels used: 1
  1491 ;; Hardware stack levels required when called: 4
  1492 ;; This function calls:
  1493 ;;		_SPI_Send_16bit
  1494 ;; This function is called by:
  1495 ;;		_main
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499     0318                     _MAX7219_ClearDisplay:	
  1500                           ;psect for function _MAX7219_ClearDisplay
  1501                           
  1502                           
  1503                           ;HAL/scr/max7219.c: 20:     for (uint8_t i = 0x01; i <= 0x08; i++) {
  1504                           
  1505                           ;incstack = 0
  1506                           ; Regs used in _MAX7219_ClearDisplay: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1507     0318  3001               	movlw	1
  1508     0319  00B5               	movwf	MAX7219_ClearDisplay@i
  1509     031A                     l1081:
  1510                           
  1511                           ;HAL/scr/max7219.c: 21:         SPI_Send_16bit((i << 8) );
  1512     031A  0835               	movf	MAX7219_ClearDisplay@i,w
  1513     031B  00B3               	movwf	??_MAX7219_ClearDisplay
  1514     031C  01B4               	clrf	??_MAX7219_ClearDisplay+1
  1515     031D  0833               	movf	??_MAX7219_ClearDisplay,w
  1516     031E  00B4               	movwf	??_MAX7219_ClearDisplay+1
  1517     031F  01B3               	clrf	??_MAX7219_ClearDisplay
  1518     0320  0833               	movf	??_MAX7219_ClearDisplay,w
  1519     0321  00AA               	movwf	SPI_Send_16bit@data
  1520     0322  0834               	movf	??_MAX7219_ClearDisplay+1,w
  1521     0323  00AB               	movwf	SPI_Send_16bit@data+1
  1522     0324  217A               	fcall	_SPI_Send_16bit
  1523                           
  1524                           ;HAL/scr/max7219.c: 22:     }
  1525     0325  3001               	movlw	1
  1526     0326  07B5               	addwf	MAX7219_ClearDisplay@i,f
  1527     0327  3009               	movlw	9
  1528     0328  0235               	subwf	MAX7219_ClearDisplay@i,w
  1529     0329  1803               	btfsc	3,0
  1530     032A  0008               	return
  1531     032B  2B1A               	goto	l1081
  1532     032C                     __end_of_MAX7219_ClearDisplay:
  1533                           
  1534                           	psect	text8
  1535     017A                     __ptext8:	
  1536 ;; *************** function _SPI_Send_16bit *****************
  1537 ;; Defined at:
  1538 ;;		line 39 in file "SERVICE/scr/Spi.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;  data            2   10[BANK0 ] unsigned short 
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;  bit             2   17[BANK0 ] int 
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  1    wreg      void 
  1545 ;; Registers used:
  1546 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1547 ;; Tracked objects:
  1548 ;;		On entry : 100/0
  1549 ;;		On exit  : 100/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMMON   BANK0
  1552 ;;      Params:         0       2
  1553 ;;      Locals:         0       2
  1554 ;;      Temps:          0       5
  1555 ;;      Totals:         0       9
  1556 ;;Total ram usage:        9 bytes
  1557 ;; Hardware stack levels used: 1
  1558 ;; Hardware stack levels required when called: 3
  1559 ;; This function calls:
  1560 ;;		_Dio_Pin_Write
  1561 ;; This function is called by:
  1562 ;;		_MAX7219_Init
  1563 ;;		_MAX7219_ClearDisplay
  1564 ;;		_MAX7219_DisplayData
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568     017A                     _SPI_Send_16bit:	
  1569                           ;psect for function _SPI_Send_16bit
  1570                           
  1571                           
  1572                           ;SERVICE/scr/Spi.c: 40:     Dio_Pin_Write(5, 0);
  1573                           
  1574                           ;incstack = 0
  1575                           ; Regs used in _SPI_Send_16bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1576     017A  01A7               	clrf	Dio_Pin_Write@state
  1577     017B  3005               	movlw	5
  1578     017C  22C7               	fcall	_Dio_Pin_Write
  1579                           
  1580                           ;SERVICE/scr/Spi.c: 41:     for (int bit =0 ; bit <16 ; bit ++ ) {
  1581     017D  01B1               	clrf	SPI_Send_16bit@bit
  1582     017E  01B2               	clrf	SPI_Send_16bit@bit+1
  1583     017F                     l1031:
  1584                           
  1585                           ;SERVICE/scr/Spi.c: 43:         if (data & (1 << (15 - bit))) {
  1586     017F  1283               	bcf	3,5	;RP0=0, select bank0
  1587     0180  0831               	movf	SPI_Send_16bit@bit,w
  1588     0181  3C0F               	sublw	15
  1589     0182  00AC               	movwf	??_SPI_Send_16bit
  1590     0183  0AAC               	incf	??_SPI_Send_16bit,f
  1591     0184  3001               	movlw	1
  1592     0185  00AD               	movwf	??_SPI_Send_16bit+1
  1593     0186  3000               	movlw	0
  1594     0187  00AE               	movwf	??_SPI_Send_16bit+2
  1595     0188  298C               	goto	u564
  1596     0189                     u565:
  1597     0189  1003               	clrc
  1598     018A  0DAD               	rlf	??_SPI_Send_16bit+1,f
  1599     018B  0DAE               	rlf	??_SPI_Send_16bit+2,f
  1600     018C                     u564:
  1601     018C  0BAC               	decfsz	??_SPI_Send_16bit,f
  1602     018D  2989               	goto	u565
  1603     018E  082A               	movf	SPI_Send_16bit@data,w
  1604     018F  052D               	andwf	??_SPI_Send_16bit+1,w
  1605     0190  00AF               	movwf	??_SPI_Send_16bit+3
  1606     0191  082B               	movf	SPI_Send_16bit@data+1,w
  1607     0192  052E               	andwf	??_SPI_Send_16bit+2,w
  1608     0193  00B0               	movwf	??_SPI_Send_16bit+4
  1609     0194  082F               	movf	??_SPI_Send_16bit+3,w
  1610     0195  0430               	iorwf	??_SPI_Send_16bit+4,w
  1611     0196  1903               	btfsc	3,2
  1612     0197  299B               	goto	l1035
  1613                           
  1614                           ;SERVICE/scr/Spi.c: 44:             Dio_Pin_Write(1, 1);
  1615     0198  01A7               	clrf	Dio_Pin_Write@state
  1616     0199  0AA7               	incf	Dio_Pin_Write@state,f
  1617     019A  299C               	goto	L1
  1618     019B                     l1035:	
  1619                           ;SERVICE/scr/Spi.c: 45:         } else {
  1620                           
  1621                           
  1622                           ;SERVICE/scr/Spi.c: 46:            Dio_Pin_Write(1, 0) ;
  1623     019B  01A7               	clrf	Dio_Pin_Write@state
  1624     019C                     L1:
  1625     019C  3001               	movlw	1
  1626     019D  22C7               	fcall	_Dio_Pin_Write
  1627                           
  1628                           ;SERVICE/scr/Spi.c: 49:   _delay((unsigned long)((50)*(4000000/4000000.0)));; Dio_Pin_Wr
      +                          ite(2, 1); _delay((unsigned long)((50)*(4000000/4000000.0)));; Dio_Pin_Write(2, 0);;
  1629     019E  3010               	movlw	16
  1630     019F  00AC               	movwf	??_SPI_Send_16bit
  1631     01A0                     u1077:
  1632     01A0  0BAC               	decfsz	??_SPI_Send_16bit,f
  1633     01A1  29A0               	goto	u1077
  1634     01A2  0000               	nop
  1635     01A3  1283               	bcf	3,5	;RP0=0, select bank0
  1636     01A4  01A7               	clrf	Dio_Pin_Write@state
  1637     01A5  0AA7               	incf	Dio_Pin_Write@state,f
  1638     01A6  3002               	movlw	2
  1639     01A7  22C7               	fcall	_Dio_Pin_Write
  1640     01A8  3010               	movlw	16
  1641     01A9  00AC               	movwf	??_SPI_Send_16bit
  1642     01AA                     u1087:
  1643     01AA  0BAC               	decfsz	??_SPI_Send_16bit,f
  1644     01AB  29AA               	goto	u1087
  1645     01AC  0000               	nop
  1646     01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1647     01AE  01A7               	clrf	Dio_Pin_Write@state
  1648     01AF  3002               	movlw	2
  1649     01B0  22C7               	fcall	_Dio_Pin_Write
  1650                           
  1651                           ;SERVICE/scr/Spi.c: 50:     }
  1652     01B1  3001               	movlw	1
  1653     01B2  07B1               	addwf	SPI_Send_16bit@bit,f
  1654     01B3  1803               	skipnc
  1655     01B4  0AB2               	incf	SPI_Send_16bit@bit+1,f
  1656     01B5  3000               	movlw	0
  1657     01B6  07B2               	addwf	SPI_Send_16bit@bit+1,f
  1658     01B7  0832               	movf	SPI_Send_16bit@bit+1,w
  1659     01B8  3A80               	xorlw	128
  1660     01B9  00DF               	movwf	95
  1661     01BA  3080               	movlw	128
  1662     01BB  025F               	subwf	95,w
  1663     01BC  1D03               	skipz
  1664     01BD  29C0               	goto	u585
  1665     01BE  3010               	movlw	16
  1666     01BF  0231               	subwf	SPI_Send_16bit@bit,w
  1667     01C0                     u585:
  1668     01C0  1C03               	skipc
  1669     01C1  297F               	goto	l1031
  1670                           
  1671                           ;SERVICE/scr/Spi.c: 51:     Dio_Pin_Write(5, 1);
  1672     01C2  1283               	bcf	3,5	;RP0=0, select bank0
  1673     01C3  01A7               	clrf	Dio_Pin_Write@state
  1674     01C4  0AA7               	incf	Dio_Pin_Write@state,f
  1675     01C5  3005               	movlw	5
  1676     01C6  22C7               	fcall	_Dio_Pin_Write
  1677     01C7  0008               	return
  1678     01C8                     __end_of_SPI_Send_16bit:
  1679                           
  1680                           	psect	text9
  1681     02C7                     __ptext9:	
  1682 ;; *************** function _Dio_Pin_Write *****************
  1683 ;; Defined at:
  1684 ;;		line 30 in file "MCAL/scr/Dio.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;  pinNumber       1    wreg     unsigned char 
  1687 ;;  state           1    7[BANK0 ] unsigned char 
  1688 ;; Auto vars:     Size  Location     Type
  1689 ;;  pinNumber       1    9[BANK0 ] unsigned char 
  1690 ;; Return value:  Size  Location     Type
  1691 ;;                  1    wreg      void 
  1692 ;; Registers used:
  1693 ;;		wreg, status,2, status,0
  1694 ;; Tracked objects:
  1695 ;;		On entry : 100/0
  1696 ;;		On exit  : 100/0
  1697 ;;		Unchanged: 0/0
  1698 ;; Data sizes:     COMMON   BANK0
  1699 ;;      Params:         0       1
  1700 ;;      Locals:         0       1
  1701 ;;      Temps:          0       1
  1702 ;;      Totals:         0       3
  1703 ;;Total ram usage:        3 bytes
  1704 ;; Hardware stack levels used: 1
  1705 ;; Hardware stack levels required when called: 2
  1706 ;; This function calls:
  1707 ;;		Nothing
  1708 ;; This function is called by:
  1709 ;;		_SPI_Send_16bit
  1710 ;;		_main
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714     02C7                     _Dio_Pin_Write:	
  1715                           ;psect for function _Dio_Pin_Write
  1716                           
  1717                           
  1718                           ;incstack = 0
  1719                           ; Regs used in _Dio_Pin_Write: [wreg+status,2+status,0]
  1720                           ;Dio_Pin_Write@pinNumber stored from wreg
  1721     02C7  00A9               	movwf	Dio_Pin_Write@pinNumber
  1722                           
  1723                           ;MCAL/scr/Dio.c: 32:     if (state == 1) {
  1724     02C8  0327               	decf	Dio_Pin_Write@state,w
  1725     02C9  1D03               	btfss	3,2
  1726     02CA  2AD7               	goto	l1019
  1727                           
  1728                           ;MCAL/scr/Dio.c: 33:         DIO_State |= (1 << pinNumber);
  1729     02CB  3001               	movlw	1
  1730     02CC  00A8               	movwf	??_Dio_Pin_Write
  1731     02CD  0A29               	incf	Dio_Pin_Write@pinNumber,w
  1732     02CE  2AD1               	goto	u544
  1733     02CF                     u545:
  1734     02CF  1003               	clrc
  1735     02D0  0DA8               	rlf	??_Dio_Pin_Write,f
  1736     02D1                     u544:
  1737     02D1  3EFF               	addlw	-1
  1738     02D2  1D03               	skipz
  1739     02D3  2ACF               	goto	u545
  1740     02D4  0828               	movf	??_Dio_Pin_Write,w
  1741     02D5  04CB               	iorwf	_DIO_State,f
  1742                           
  1743                           ;MCAL/scr/Dio.c: 34:     }
  1744     02D6  2AE3               	goto	l1021
  1745     02D7                     l1019:
  1746                           
  1747                           ;MCAL/scr/Dio.c: 36:         DIO_State &= ~(1 << pinNumber);
  1748     02D7  3001               	movlw	1
  1749     02D8  00A8               	movwf	??_Dio_Pin_Write
  1750     02D9  0A29               	incf	Dio_Pin_Write@pinNumber,w
  1751     02DA  2ADD               	goto	u554
  1752     02DB                     u555:
  1753     02DB  1003               	clrc
  1754     02DC  0DA8               	rlf	??_Dio_Pin_Write,f
  1755     02DD                     u554:
  1756     02DD  3EFF               	addlw	-1
  1757     02DE  1D03               	skipz
  1758     02DF  2ADB               	goto	u555
  1759     02E0  0828               	movf	??_Dio_Pin_Write,w
  1760     02E1  3AFF               	xorlw	255
  1761     02E2  05CB               	andwf	_DIO_State,f
  1762     02E3                     l1021:
  1763                           
  1764                           ;MCAL/scr/Dio.c: 38:     GPIO = DIO_State ;
  1765     02E3  084B               	movf	_DIO_State,w
  1766     02E4  0085               	movwf	5	;volatile
  1767     02E5  0008               	return
  1768     02E6                     __end_of_Dio_Pin_Write:
  1769                           
  1770                           	psect	text10
  1771     032C                     __ptext10:	
  1772 ;; *************** function _Gpio_Init *****************
  1773 ;; Defined at:
  1774 ;;		line 23 in file "MCAL/scr/gpio.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;		None
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;		None
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  1    wreg      void 
  1781 ;; Registers used:
  1782 ;;		wreg, status,2, status,0
  1783 ;; Tracked objects:
  1784 ;;		On entry : B00/0
  1785 ;;		On exit  : B00/100
  1786 ;;		Unchanged: A00/0
  1787 ;; Data sizes:     COMMON   BANK0
  1788 ;;      Params:         0       0
  1789 ;;      Locals:         0       0
  1790 ;;      Temps:          0       0
  1791 ;;      Totals:         0       0
  1792 ;;Total ram usage:        0 bytes
  1793 ;; Hardware stack levels used: 1
  1794 ;; Hardware stack levels required when called: 2
  1795 ;; This function calls:
  1796 ;;		Nothing
  1797 ;; This function is called by:
  1798 ;;		_main
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802     032C                     _Gpio_Init:	
  1803                           ;psect for function _Gpio_Init
  1804                           
  1805                           
  1806                           ;MCAL/scr/gpio.c: 30:         ANSEL |= (1 << 0);
  1807                           
  1808                           ;incstack = 0
  1809                           ; Regs used in _Gpio_Init: [wreg+status,2+status,0]
  1810     032C  1683               	bsf	3,5	;RP0=1, select bank1
  1811     032D  141F               	bsf	31,0	;volatile
  1812                           
  1813                           ;MCAL/scr/gpio.c: 31:         TRISIO |= (1 << 0);
  1814     032E  1405               	bsf	5,0	;volatile
  1815                           
  1816                           ;MCAL/scr/gpio.c: 52:         ANSEL &= ~(1 << 1);
  1817     032F  30FD               	movlw	253
  1818     0330  059F               	andwf	31,f	;volatile
  1819                           
  1820                           ;MCAL/scr/gpio.c: 53:         TRISIO &= ~(1 << 1);
  1821     0331  30FD               	movlw	253
  1822     0332  0585               	andwf	5,f	;volatile
  1823                           
  1824                           ;MCAL/scr/gpio.c: 70:         ANSEL &= ~(1 << 2);
  1825     0333  30FB               	movlw	251
  1826     0334  059F               	andwf	31,f	;volatile
  1827                           
  1828                           ;MCAL/scr/gpio.c: 71:         TRISIO &= ~(1 << 2);
  1829     0335  30FB               	movlw	251
  1830     0336  0585               	andwf	5,f	;volatile
  1831                           
  1832                           ;MCAL/scr/gpio.c: 76:         TRISIO |= (1 << 3);
  1833     0337  1585               	bsf	5,3	;volatile
  1834                           
  1835                           ;MCAL/scr/gpio.c: 83:         ANSEL &= ~(1 << 3);
  1836     0338  30F7               	movlw	247
  1837     0339  059F               	andwf	31,f	;volatile
  1838                           
  1839                           ;MCAL/scr/gpio.c: 84:         TRISIO &= ~(1 << 4);
  1840     033A  30EF               	movlw	239
  1841     033B  0585               	andwf	5,f	;volatile
  1842                           
  1843                           ;MCAL/scr/gpio.c: 102:         TRISIO &= ~(1 << 5);
  1844     033C  30DF               	movlw	223
  1845     033D  0585               	andwf	5,f	;volatile
  1846     033E  0008               	return
  1847     033F                     __end_of_Gpio_Init:
  1848                           
  1849                           	psect	text11
  1850     0383                     __ptext11:	
  1851 ;; *************** function _Dio_init *****************
  1852 ;; Defined at:
  1853 ;;		line 60 in file "MCAL/scr/Dio.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;		None
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;		None
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      void 
  1860 ;; Registers used:
  1861 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : B00/100
  1864 ;;		On exit  : 100/100
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMMON   BANK0
  1867 ;;      Params:         0       0
  1868 ;;      Locals:         0       0
  1869 ;;      Temps:          0       0
  1870 ;;      Totals:         0       0
  1871 ;;Total ram usage:        0 bytes
  1872 ;; Hardware stack levels used: 1
  1873 ;; Hardware stack levels required when called: 3
  1874 ;; This function calls:
  1875 ;;		_Dio_Config
  1876 ;; This function is called by:
  1877 ;;		_main
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881     0383                     _Dio_init:	
  1882                           ;psect for function _Dio_init
  1883                           
  1884                           
  1885                           ;MCAL/scr/Dio.c: 72:        Dio_Config (3, 0, 0, 1);
  1886                           
  1887                           ;incstack = 0
  1888                           ; Regs used in _Dio_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1889     0383  1283               	bcf	3,5	;RP0=0, select bank0
  1890     0384  01A7               	clrf	Dio_Config@direction
  1891     0385  01A8               	clrf	Dio_Config@state
  1892     0386  01A9               	clrf	Dio_Config@pullType
  1893     0387  0AA9               	incf	Dio_Config@pullType,f
  1894     0388  3003               	movlw	3
  1895     0389  2105               	fcall	_Dio_Config
  1896                           
  1897                           ;MCAL/scr/Dio.c: 75:        Dio_Config (4, 1, 0, 0);
  1898     038A  1283               	bcf	3,5	;RP0=0, select bank0
  1899     038B  01A7               	clrf	Dio_Config@direction
  1900     038C  0AA7               	incf	Dio_Config@direction,f
  1901     038D  01A8               	clrf	Dio_Config@state
  1902     038E  01A9               	clrf	Dio_Config@pullType
  1903     038F  3004               	movlw	4
  1904     0390  2105               	fcall	_Dio_Config
  1905     0391  0008               	return
  1906     0392                     __end_of_Dio_init:
  1907                           
  1908                           	psect	text12
  1909     0105                     __ptext12:	
  1910 ;; *************** function _Dio_Config *****************
  1911 ;; Defined at:
  1912 ;;		line 41 in file "MCAL/scr/Dio.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;  pinNumber       1    wreg     unsigned char 
  1915 ;;  direction       1    7[BANK0 ] unsigned char 
  1916 ;;  state           1    8[BANK0 ] unsigned char 
  1917 ;;  pullType        1    9[BANK0 ] unsigned char 
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;  pinNumber       1   16[BANK0 ] unsigned char 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, status,2, status,0, btemp+1
  1924 ;; Tracked objects:
  1925 ;;		On entry : 100/0
  1926 ;;		On exit  : 100/100
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMMON   BANK0
  1929 ;;      Params:         0       3
  1930 ;;      Locals:         0       3
  1931 ;;      Temps:          0       4
  1932 ;;      Totals:         0      10
  1933 ;;Total ram usage:       10 bytes
  1934 ;; Hardware stack levels used: 1
  1935 ;; Hardware stack levels required when called: 2
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		_Dio_init
  1940 ;;		_SPI_Init
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944     0105                     _Dio_Config:	
  1945                           ;psect for function _Dio_Config
  1946                           
  1947                           
  1948                           ;incstack = 0
  1949                           ; Regs used in _Dio_Config: [wreg+status,2+status,0+btemp+1]
  1950                           ;Dio_Config@pinNumber stored from wreg
  1951     0105  00B0               	movwf	Dio_Config@pinNumber
  1952                           
  1953                           ;MCAL/scr/Dio.c: 43:     TRISIO = (unsigned char)((direction == 0) ? (TRISIO | (1U << pi
      +                          nNumber)) : (TRISIO & ~(1U << pinNumber)));
  1954     0106  0827               	movf	Dio_Config@direction,w
  1955     0107  1903               	btfsc	3,2
  1956     0108  291D               	goto	l1053
  1957     0109  3001               	movlw	1
  1958     010A  00AA               	movwf	??_Dio_Config
  1959     010B  0A30               	incf	Dio_Config@pinNumber,w
  1960     010C  290F               	goto	u604
  1961     010D                     u605:
  1962     010D  1003               	clrc
  1963     010E  0DAA               	rlf	??_Dio_Config,f
  1964     010F                     u604:
  1965     010F  3EFF               	addlw	-1
  1966     0110  1D03               	skipz
  1967     0111  290D               	goto	u605
  1968     0112  082A               	movf	??_Dio_Config,w
  1969     0113  3AFF               	xorlw	255
  1970     0114  1683               	bsf	3,5	;RP0=1, select bank1
  1971     0115  0505               	andwf	5,w	;volatile
  1972     0116  1283               	bcf	3,5	;RP0=0, select bank0
  1973     0117  00AB               	movwf	??_Dio_Config+1
  1974     0118  01AC               	clrf	??_Dio_Config+2
  1975     0119  082B               	movf	??_Dio_Config+1,w
  1976     011A  00AE               	movwf	_Dio_Config$71
  1977     011B  082C               	movf	??_Dio_Config+2,w
  1978     011C  2933               	goto	L2
  1979     011D                     l1053:
  1980     011D  0A30               	incf	Dio_Config@pinNumber,w
  1981     011E  00DF               	movwf	95
  1982     011F  3001               	movlw	1
  1983     0120  00AA               	movwf	??_Dio_Config
  1984     0121  3000               	movlw	0
  1985     0122  00AB               	movwf	??_Dio_Config+1
  1986     0123  2927               	goto	u614
  1987     0124                     u615:
  1988     0124  1003               	clrc
  1989     0125  0DAA               	rlf	??_Dio_Config,f
  1990     0126  0DAB               	rlf	??_Dio_Config+1,f
  1991     0127                     u614:
  1992     0127  0BDF               	decfsz	95,f
  1993     0128  2924               	goto	u615
  1994     0129  082A               	movf	??_Dio_Config,w
  1995     012A  1683               	bsf	3,5	;RP0=1, select bank1
  1996     012B  0405               	iorwf	5,w	;volatile
  1997     012C  1283               	bcf	3,5	;RP0=0, select bank0
  1998     012D  00AC               	movwf	??_Dio_Config+2
  1999     012E  082B               	movf	??_Dio_Config+1,w
  2000     012F  00AD               	movwf	??_Dio_Config+3
  2001     0130  082C               	movf	??_Dio_Config+2,w
  2002     0131  00AE               	movwf	_Dio_Config$71
  2003     0132  082D               	movf	??_Dio_Config+3,w
  2004     0133                     L2:
  2005     0133  00AF               	movwf	_Dio_Config$71+1
  2006     0134  082E               	movf	_Dio_Config$71,w
  2007     0135  1683               	bsf	3,5	;RP0=1, select bank1
  2008     0136  0085               	movwf	5	;volatile
  2009                           
  2010                           ;MCAL/scr/Dio.c: 45:     if (direction == 1) {
  2011     0137  1283               	bcf	3,5	;RP0=0, select bank0
  2012     0138  0327               	decf	Dio_Config@direction,w
  2013     0139  1D03               	btfss	3,2
  2014     013A  2958               	goto	l1067
  2015                           
  2016                           ;MCAL/scr/Dio.c: 46:         if (state == 1) {
  2017     013B  0328               	decf	Dio_Config@state,w
  2018     013C  1D03               	btfss	3,2
  2019     013D  294A               	goto	l1063
  2020                           
  2021                           ;MCAL/scr/Dio.c: 47:             DIO_State |= (1 << pinNumber);
  2022     013E  3001               	movlw	1
  2023     013F  00AA               	movwf	??_Dio_Config
  2024     0140  0A30               	incf	Dio_Config@pinNumber,w
  2025     0141  2944               	goto	u644
  2026     0142                     u645:
  2027     0142  1003               	clrc
  2028     0143  0DAA               	rlf	??_Dio_Config,f
  2029     0144                     u644:
  2030     0144  3EFF               	addlw	-1
  2031     0145  1D03               	skipz
  2032     0146  2942               	goto	u645
  2033     0147  082A               	movf	??_Dio_Config,w
  2034     0148  04CB               	iorwf	_DIO_State,f
  2035                           
  2036                           ;MCAL/scr/Dio.c: 48:         } else {
  2037     0149  2956               	goto	l1065
  2038     014A                     l1063:
  2039                           
  2040                           ;MCAL/scr/Dio.c: 49:             DIO_State &= ~(1 << pinNumber);
  2041     014A  3001               	movlw	1
  2042     014B  00AA               	movwf	??_Dio_Config
  2043     014C  0A30               	incf	Dio_Config@pinNumber,w
  2044     014D  2950               	goto	u654
  2045     014E                     u655:
  2046     014E  1003               	clrc
  2047     014F  0DAA               	rlf	??_Dio_Config,f
  2048     0150                     u654:
  2049     0150  3EFF               	addlw	-1
  2050     0151  1D03               	skipz
  2051     0152  294E               	goto	u655
  2052     0153  082A               	movf	??_Dio_Config,w
  2053     0154  3AFF               	xorlw	255
  2054     0155  05CB               	andwf	_DIO_State,f
  2055     0156                     l1065:
  2056                           
  2057                           ;MCAL/scr/Dio.c: 51:         GPIO = DIO_State ;
  2058     0156  084B               	movf	_DIO_State,w
  2059     0157  0085               	movwf	5	;volatile
  2060     0158                     l1067:
  2061                           
  2062                           ;MCAL/scr/Dio.c: 53:     if (pullType == 1) {
  2063     0158  0329               	decf	Dio_Config@pullType,w
  2064     0159  1D03               	btfss	3,2
  2065     015A  296C               	goto	l1071
  2066                           
  2067                           ;MCAL/scr/Dio.c: 54:         OPTION_REG &= ~(1 << 7);
  2068     015B  307F               	movlw	127
  2069     015C  1683               	bsf	3,5	;RP0=1, select bank1
  2070     015D  0581               	andwf	1,f	;volatile
  2071                           
  2072                           ;MCAL/scr/Dio.c: 55:         WPU |= (1 << pinNumber);
  2073     015E  3001               	movlw	1
  2074     015F  1283               	bcf	3,5	;RP0=0, select bank0
  2075     0160  00AA               	movwf	??_Dio_Config
  2076     0161  0A30               	incf	Dio_Config@pinNumber,w
  2077     0162  2965               	goto	u674
  2078     0163                     u675:
  2079     0163  1003               	clrc
  2080     0164  0DAA               	rlf	??_Dio_Config,f
  2081     0165                     u674:
  2082     0165  3EFF               	addlw	-1
  2083     0166  1D03               	skipz
  2084     0167  2963               	goto	u675
  2085     0168  082A               	movf	??_Dio_Config,w
  2086     0169  1683               	bsf	3,5	;RP0=1, select bank1
  2087     016A  0495               	iorwf	21,f	;volatile
  2088                           
  2089                           ;MCAL/scr/Dio.c: 56:     } else {
  2090     016B  0008               	return
  2091     016C                     l1071:
  2092                           
  2093                           ;MCAL/scr/Dio.c: 57:         WPU &= ~(1 << pinNumber);
  2094     016C  3001               	movlw	1
  2095     016D  00AA               	movwf	??_Dio_Config
  2096     016E  0A30               	incf	Dio_Config@pinNumber,w
  2097     016F  2972               	goto	u684
  2098     0170                     u685:
  2099     0170  1003               	clrc
  2100     0171  0DAA               	rlf	??_Dio_Config,f
  2101     0172                     u684:
  2102     0172  3EFF               	addlw	-1
  2103     0173  1D03               	skipz
  2104     0174  2970               	goto	u685
  2105     0175  082A               	movf	??_Dio_Config,w
  2106     0176  3AFF               	xorlw	255
  2107     0177  1683               	bsf	3,5	;RP0=1, select bank1
  2108     0178  0595               	andwf	21,f	;volatile
  2109     0179  0008               	return
  2110     017A                     __end_of_Dio_Config:
  2111                           
  2112                           	psect	text13
  2113     0373                     __ptext13:	
  2114 ;; *************** function _Adc_StartConversion *****************
  2115 ;; Defined at:
  2116 ;;		line 87 in file "MCAL/scr/Adc.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;  channel         1    wreg     enum E11
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;  channel         1    8[BANK0 ] enum E11
  2121 ;; Return value:  Size  Location     Type
  2122 ;;                  1    wreg      void 
  2123 ;; Registers used:
  2124 ;;		wreg, status,2, status,0
  2125 ;; Tracked objects:
  2126 ;;		On entry : 100/0
  2127 ;;		On exit  : 100/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMMON   BANK0
  2130 ;;      Params:         0       0
  2131 ;;      Locals:         0       1
  2132 ;;      Temps:          0       1
  2133 ;;      Totals:         0       2
  2134 ;;Total ram usage:        2 bytes
  2135 ;; Hardware stack levels used: 1
  2136 ;; Hardware stack levels required when called: 2
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_main
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144     0373                     _Adc_StartConversion:	
  2145                           ;psect for function _Adc_StartConversion
  2146                           
  2147                           
  2148                           ;incstack = 0
  2149                           ; Regs used in _Adc_StartConversion: [wreg+status,2+status,0]
  2150                           ;Adc_StartConversion@channel stored from wreg
  2151     0373  00A8               	movwf	Adc_StartConversion@channel
  2152                           
  2153                           ;MCAL/scr/Adc.c: 90:     ADCON0 &= ~( 0b11 << 2);
  2154     0374  30F3               	movlw	243
  2155     0375  059F               	andwf	31,f	;volatile
  2156                           
  2157                           ;MCAL/scr/Adc.c: 91:     ADCON0 |= (channel << 2);
  2158     0376  0828               	movf	Adc_StartConversion@channel,w	;volatile
  2159     0377  00A7               	movwf	??_Adc_StartConversion
  2160     0378  3001               	movlw	1
  2161     0379                     u705:
  2162     0379  1003               	clrc
  2163     037A  0DA7               	rlf	??_Adc_StartConversion,f
  2164     037B  3EFF               	addlw	-1
  2165     037C  1D03               	skipz
  2166     037D  2B79               	goto	u705
  2167     037E  1003               	clrc
  2168     037F  0D27               	rlf	??_Adc_StartConversion,w
  2169     0380  049F               	iorwf	31,f	;volatile
  2170                           
  2171                           ;MCAL/scr/Adc.c: 92:     ADCON0 |= (1 << 1);
  2172     0381  149F               	bsf	31,1	;volatile
  2173     0382  0008               	return
  2174     0383                     __end_of_Adc_StartConversion:
  2175                           
  2176                           	psect	text14
  2177     0271                     __ptext14:	
  2178 ;; *************** function _Adc_ReadResult *****************
  2179 ;; Defined at:
  2180 ;;		line 96 in file "MCAL/scr/Adc.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;		None
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;		None
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  2    7[BANK0 ] unsigned short 
  2187 ;; Registers used:
  2188 ;;		wreg, status,2, status,0
  2189 ;; Tracked objects:
  2190 ;;		On entry : 100/0
  2191 ;;		On exit  : 100/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMMON   BANK0
  2194 ;;      Params:         0       2
  2195 ;;      Locals:         0       0
  2196 ;;      Temps:          0       7
  2197 ;;      Totals:         0       9
  2198 ;;Total ram usage:        9 bytes
  2199 ;; Hardware stack levels used: 1
  2200 ;; Hardware stack levels required when called: 2
  2201 ;; This function calls:
  2202 ;;		Nothing
  2203 ;; This function is called by:
  2204 ;;		_main
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208     0271                     _Adc_ReadResult:	
  2209                           ;psect for function _Adc_ReadResult
  2210                           
  2211     0271                     l61:	
  2212                           ;MCAL/scr/Adc.c: 97:     while (ADCON0 & (1 << 1));
  2213                           
  2214                           ;incstack = 0
  2215                           ; Regs used in _Adc_ReadResult: [wreg+status,2+status,0]
  2216                           
  2217     0271  189F               	btfsc	31,1	;volatile
  2218     0272  2A71               	goto	l61
  2219                           
  2220                           ;MCAL/scr/Adc.c: 100:     if (ADCON0 & (1 << 7)) {
  2221     0273  1F9F               	btfss	31,7	;volatile
  2222     0274  2A7C               	goto	l1133
  2223                           
  2224                           ;MCAL/scr/Adc.c: 102:         return (uint16)((ADRESH << 8) | ADRESL);
  2225     0275  081E               	movf	30,w	;volatile
  2226     0276  00A8               	movwf	?_Adc_ReadResult+1
  2227     0277  1683               	bsf	3,5	;RP0=1, select bank1
  2228     0278  081E               	movf	30,w	;volatile
  2229     0279  1283               	bcf	3,5	;RP0=0, select bank0
  2230     027A  00A7               	movwf	?_Adc_ReadResult
  2231     027B  0008               	return
  2232     027C                     l1133:
  2233                           
  2234                           ;MCAL/scr/Adc.c: 105:         return (uint16)((ADRESH << 2) | (ADRESL >> 6));
  2235     027C  1683               	bsf	3,5	;RP0=1, select bank1
  2236     027D  081E               	movf	30,w	;volatile
  2237     027E  1283               	bcf	3,5	;RP0=0, select bank0
  2238     027F  00A9               	movwf	??_Adc_ReadResult
  2239     0280  3006               	movlw	6
  2240     0281                     u735:
  2241     0281  1003               	clrc
  2242     0282  0CA9               	rrf	??_Adc_ReadResult,f
  2243     0283  3EFF               	addlw	-1
  2244     0284  1D03               	skipz
  2245     0285  2A81               	goto	u735
  2246     0286  0829               	movf	??_Adc_ReadResult,w
  2247     0287  00AA               	movwf	??_Adc_ReadResult+1
  2248     0288  01AB               	clrf	??_Adc_ReadResult+2
  2249     0289  081E               	movf	30,w	;volatile
  2250     028A  00AC               	movwf	??_Adc_ReadResult+3
  2251     028B  01AD               	clrf	??_Adc_ReadResult+4
  2252     028C  1003               	clrc
  2253     028D  0DAC               	rlf	??_Adc_ReadResult+3,f
  2254     028E  0DAD               	rlf	??_Adc_ReadResult+4,f
  2255     028F  1003               	clrc
  2256     0290  0DAC               	rlf	??_Adc_ReadResult+3,f
  2257     0291  0DAD               	rlf	??_Adc_ReadResult+4,f
  2258     0292  082A               	movf	??_Adc_ReadResult+1,w
  2259     0293  042C               	iorwf	??_Adc_ReadResult+3,w
  2260     0294  00AE               	movwf	??_Adc_ReadResult+5
  2261     0295  082B               	movf	??_Adc_ReadResult+2,w
  2262     0296  042D               	iorwf	??_Adc_ReadResult+4,w
  2263     0297  00AF               	movwf	??_Adc_ReadResult+6
  2264     0298  082E               	movf	??_Adc_ReadResult+5,w
  2265     0299  00A7               	movwf	?_Adc_ReadResult
  2266     029A  082F               	movf	??_Adc_ReadResult+6,w
  2267     029B  00A8               	movwf	?_Adc_ReadResult+1
  2268     029C  0008               	return
  2269     029D                     __end_of_Adc_ReadResult:
  2270                           
  2271                           	psect	text15
  2272     0392                     __ptext15:	
  2273 ;; *************** function _Adc_Init *****************
  2274 ;; Defined at:
  2275 ;;		line 53 in file "MCAL/scr/Adc.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;		None
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;		None
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      void 
  2282 ;; Registers used:
  2283 ;;		wreg, status,2, status,0
  2284 ;; Tracked objects:
  2285 ;;		On entry : 100/100
  2286 ;;		On exit  : 100/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMMON   BANK0
  2289 ;;      Params:         0       0
  2290 ;;      Locals:         0       0
  2291 ;;      Temps:          0       0
  2292 ;;      Totals:         0       0
  2293 ;;Total ram usage:        0 bytes
  2294 ;; Hardware stack levels used: 1
  2295 ;; Hardware stack levels required when called: 2
  2296 ;; This function calls:
  2297 ;;		Nothing
  2298 ;; This function is called by:
  2299 ;;		_main
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303     0392                     _Adc_Init:	
  2304                           ;psect for function _Adc_Init
  2305                           
  2306                           
  2307                           ;MCAL/scr/Adc.c: 54: ADCON0 |= (1 << 0);
  2308                           
  2309                           ;incstack = 0
  2310                           ; Regs used in _Adc_Init: [wreg+status,2+status,0]
  2311     0392  1283               	bcf	3,5	;RP0=0, select bank0
  2312     0393  141F               	bsf	31,0	;volatile
  2313                           
  2314                           ;MCAL/scr/Adc.c: 59:     (ADCON0 &= ~(0b1 << 6)); (ADCON0 |=(0 << 6));
  2315     0394  30BF               	movlw	191
  2316     0395  059F               	andwf	31,f	;volatile
  2317     0396  081F               	movf	31,w	;volatile
  2318                           
  2319                           ;MCAL/scr/Adc.c: 62:     (ANSEL &= ~(0b111 << 4) ); (ANSEL |= (( ((2000000 / ((4000000)/
      +                          1000 )) >= 1600) ? 0b000 : ((4000000 / ((4000000)/1000 )) >= 1600) ? 0b100 : ((8000000 /
      +                           ((4000000)/1000 )) >= 1600) ? 0b001 : ((16000000 / ((4000000)/1000 )) >= 1600) ? 0b101 
      +                          : ((32000000 / ((4000000)/1000 )) >= 1600) ? 0b010 : ((64000000 / ((4000000)/1000 )) >= 
      +                          1600) ? 0b110 : 0b110) << 4) );
  2320     0397  308F               	movlw	143
  2321     0398  1683               	bsf	3,5	;RP0=1, select bank1
  2322     0399  059F               	andwf	31,f	;volatile
  2323     039A  161F               	bsf	31,4	;volatile
  2324                           
  2325                           ;MCAL/scr/Adc.c: 82:         ADCON0 &= ~(1 << 7);
  2326     039B  307F               	movlw	127
  2327     039C  1283               	bcf	3,5	;RP0=0, select bank0
  2328     039D  059F               	andwf	31,f	;volatile
  2329     039E  0008               	return
  2330     039F                     __end_of_Adc_Init:
  2331                           
  2332                           	psect	text16
  2333     029D                     __ptext16:	
  2334 ;; *************** function _ISR *****************
  2335 ;; Defined at:
  2336 ;;		line 90 in file "main.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;		None
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;  i               2    5[BANK0 ] unsigned short 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  1    wreg      void 
  2343 ;; Registers used:
  2344 ;;		wreg, status,2, status,0, pclath, cstack
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 100/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMMON   BANK0
  2350 ;;      Params:         0       0
  2351 ;;      Locals:         0       2
  2352 ;;      Temps:          0       3
  2353 ;;      Totals:         0       5
  2354 ;;Total ram usage:        5 bytes
  2355 ;; Hardware stack levels used: 1
  2356 ;; Hardware stack levels required when called: 1
  2357 ;; This function calls:
  2358 ;;		_Dio_Pin_Read
  2359 ;; This function is called by:
  2360 ;;		Interrupt level 1
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364     029D                     _ISR:	
  2365                           ;psect for function _ISR
  2366                           
  2367                           
  2368                           ;main.c: 92:     if (INTCONbits.GPIF) {
  2369     029D  1C0B               	btfss	11,0	;volatile
  2370     029E  2AC0               	goto	i1l189
  2371                           
  2372                           ;main.c: 94:         uint16 i = 0 ;
  2373     029F  01A5               	clrf	ISR@i
  2374     02A0  01A6               	clrf	ISR@i+1
  2375     02A1                     i1l1295:	
  2376                           ;main.c: 95:               while(!Dio_Pin_Read(3)){
  2377                           
  2378                           
  2379                           ;main.c: 95:               while(!Dio_Pin_Read(3)){
  2380     02A1  3003               	movlw	3
  2381     02A2  2351               	fcall	_Dio_Pin_Read
  2382     02A3  3A00               	xorlw	0
  2383     02A4  1D03               	btfss	3,2
  2384     02A5  2ABF               	goto	i1l188
  2385                           
  2386                           ;main.c: 96:                   i++;
  2387     02A6  3001               	movlw	1
  2388     02A7  07A5               	addwf	ISR@i,f
  2389     02A8  1803               	skipnc
  2390     02A9  0AA6               	incf	ISR@i+1,f
  2391     02AA  3000               	movlw	0
  2392     02AB  07A6               	addwf	ISR@i+1,f
  2393                           
  2394                           ;main.c: 97:                   _delay((unsigned long)(((100))*(4000000/4000000.0)));
  2395     02AC  3021               	movlw	33
  2396     02AD  00A2               	movwf	??_ISR
  2397     02AE                     u109_27:
  2398     02AE  0BA2               	decfsz	??_ISR,f
  2399     02AF  2AAE               	goto	u109_27
  2400                           
  2401                           ;main.c: 98:                   if(i>3000){
  2402     02B0  300B               	movlw	11
  2403     02B1  1283               	bcf	3,5	;RP0=0, select bank0
  2404     02B2  0226               	subwf	ISR@i+1,w
  2405     02B3  30B9               	movlw	185
  2406     02B4  1903               	skipnz
  2407     02B5  0225               	subwf	ISR@i,w
  2408     02B6  1C03               	skipc
  2409     02B7  2AA1               	goto	i1l1295
  2410                           
  2411                           ;main.c: 99:                       DispenserOn = !DispenserOn;
  2412     02B8  084A               	movf	_DispenserOn,w
  2413     02B9  1D03               	btfss	3,2
  2414     02BA  2ABD               	goto	u102_20
  2415     02BB  3001               	movlw	1
  2416     02BC  2ABE               	goto	u103_20
  2417     02BD                     u102_20:
  2418     02BD  3000               	movlw	0
  2419     02BE                     u103_20:
  2420     02BE  00CA               	movwf	_DispenserOn
  2421     02BF                     i1l188:	
  2422                           ;main.c: 100:                       break;}
  2423                           
  2424                           
  2425                           ;main.c: 104:         INTCONbits.GPIF = 0;
  2426     02BF  100B               	bcf	11,0	;volatile
  2427     02C0                     i1l189:
  2428     02C0  0824               	movf	??_ISR+2,w
  2429     02C1  008A               	movwf	10
  2430     02C2  0E23               	swapf	??_ISR+1,w
  2431     02C3  0083               	movwf	3
  2432     02C4  0EDE               	swapf	94,f
  2433     02C5  0E5E               	swapf	94,w
  2434     02C6  0009               	retfie
  2435     02C7                     __end_of_ISR:
  2436                           
  2437                           	psect	intentry
  2438     0004                     __pintentry:	
  2439                           ;incstack = 0
  2440                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  2441                           
  2442     0004                     interrupt_function:
  2443     005E                     saved_w         set	btemp
  2444     0004  00DE               	movwf	btemp
  2445     0005  0E03               	swapf	3,w
  2446     0006  1283               	bcf	3,5	;RP0=0, select bank0
  2447     0007  00A3               	movwf	??_ISR+1
  2448     0008  080A               	movf	10,w
  2449     0009  00A4               	movwf	??_ISR+2
  2450     000A  2A9D               	ljmp	_ISR
  2451                           
  2452                           	psect	text17
  2453     0351                     __ptext17:	
  2454 ;; *************** function _Dio_Pin_Read *****************
  2455 ;; Defined at:
  2456 ;;		line 19 in file "MCAL/scr/Dio.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;  pinNumber       1    wreg     unsigned char 
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;  pinNumber       1    1[BANK0 ] unsigned char 
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      unsigned char 
  2463 ;; Registers used:
  2464 ;;		wreg, status,2, status,0
  2465 ;; Tracked objects:
  2466 ;;		On entry : 100/0
  2467 ;;		On exit  : 100/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMMON   BANK0
  2470 ;;      Params:         0       0
  2471 ;;      Locals:         0       1
  2472 ;;      Temps:          0       1
  2473 ;;      Totals:         0       2
  2474 ;;Total ram usage:        2 bytes
  2475 ;; Hardware stack levels used: 1
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		_ISR
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483     0351                     _Dio_Pin_Read:	
  2484                           ;psect for function _Dio_Pin_Read
  2485                           
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in _Dio_Pin_Read: [wreg+status,2+status,0]
  2489                           ;Dio_Pin_Read@pinNumber stored from wreg
  2490     0351  00A1               	movwf	Dio_Pin_Read@pinNumber
  2491                           
  2492                           ;MCAL/scr/Dio.c: 20:         if (GPIO & (1 << pinNumber)) {
  2493     0352  3001               	movlw	1
  2494     0353  00A0               	movwf	??_Dio_Pin_Read
  2495     0354  0A21               	incf	Dio_Pin_Read@pinNumber,w
  2496     0355  2B58               	goto	u74_24
  2497     0356                     u74_25:
  2498     0356  1003               	clrc
  2499     0357  0DA0               	rlf	??_Dio_Pin_Read,f
  2500     0358                     u74_24:
  2501     0358  3EFF               	addlw	-1
  2502     0359  1D03               	skipz
  2503     035A  2B56               	goto	u74_25
  2504     035B  0820               	movf	??_Dio_Pin_Read,w
  2505     035C  0505               	andwf	5,w	;volatile
  2506     035D  1903               	btfsc	3,2
  2507     035E  2B61               	goto	i1l1145
  2508                           
  2509                           ;MCAL/scr/Dio.c: 21:             return 1;
  2510     035F  3001               	movlw	1
  2511     0360  0008               	return
  2512     0361                     i1l1145:
  2513                           
  2514                           ;MCAL/scr/Dio.c: 23:             return 0;
  2515     0361  3000               	movlw	0
  2516     0362  0008               	return
  2517     0363                     __end_of_Dio_Pin_Read:
  2518     0000                     ___latbits      equ	0
  2519     005E                     btemp           set	94	;btemp
  2520     005E                     wtemp0          set	94
  2521                           
  2522                           	psect	config
  2523                           
  2524                           ;Config register CONFIG @ 0x2007
  2525                           ;	Oscillator Selection bits
  2526                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
  2527                           ;	Watchdog Timer Enable bit
  2528                           ;	WDTE = OFF, WDT disabled
  2529                           ;	Power-Up Timer Enable bit
  2530                           ;	PWRTE = OFF, PWRT disabled
  2531                           ;	GP3/MCLR pin function select
  2532                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
  2533                           ;	Brown-out Detect Enable bit
  2534                           ;	BOREN = OFF, BOD disabled
  2535                           ;	Code Protection bit
  2536                           ;	CP = OFF, Program Memory code protection is disabled
  2537                           ;	Data Code Protection bit
  2538                           ;	CPD = OFF, Data memory code protection is disabled
  2539     2007                     	org	8199
  2540     2007  3194               	dw	12692

Data Sizes:
    Strings     0
    Constant    10
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     40      45

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___lmul
    ___lwmod->___lwdiv
    ___lmul->_Adc_ReadResult
    _SPI_Init->_Dio_Config
    _MAX7219_Init->_SPI_Send_16bit
    _MAX7219_DisplayData->_SPI_Send_16bit
    _MAX7219_DisplayData->___lwmod
    _MAX7219_ClearDisplay->_SPI_Send_16bit
    _SPI_Send_16bit->_Dio_Pin_Write
    _Dio_init->_Dio_Config

Critical Paths under _ISR in BANK0

    _ISR->_Dio_Pin_Read

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    2022
                                             29 BANK0     11    11      0
                           _Adc_Init
                     _Adc_ReadResult
                _Adc_StartConversion
                      _Dio_Pin_Write
                           _Dio_init
                          _Gpio_Init
               _MAX7219_ClearDisplay
                _MAX7219_DisplayData
                       _MAX7219_Init
                           _SPI_Init
                             ___lmul
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     167
                                             14 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     168
                                              7 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              13     5      8      94
                                             16 BANK0     13     5      8
                     _Adc_ReadResult (ARG)
 ---------------------------------------------------------------------------------
 (1) _SPI_Init                                             0     0      0     301
                         _Dio_Config
 ---------------------------------------------------------------------------------
 (1) _MAX7219_Init                                         0     0      0     185
                     _SPI_Send_16bit
 ---------------------------------------------------------------------------------
 (1) _MAX7219_DisplayData                                  6     5      1     245
                                             19 BANK0      6     5      1
                     _SPI_Send_16bit
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _MAX7219_ClearDisplay                                 3     3      0     253
                                             19 BANK0      3     3      0
                     _SPI_Send_16bit
 ---------------------------------------------------------------------------------
 (2) _SPI_Send_16bit                                       9     7      2     185
                                             10 BANK0      9     7      2
                      _Dio_Pin_Write
 ---------------------------------------------------------------------------------
 (3) _Dio_Pin_Write                                        3     2      1      88
                                              7 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _Gpio_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Dio_init                                             0     0      0     301
                         _Dio_Config
 ---------------------------------------------------------------------------------
 (2) _Dio_Config                                          10     7      3     301
                                              7 BANK0     10     7      3
 ---------------------------------------------------------------------------------
 (1) _Adc_StartConversion                                  2     2      0      29
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Adc_ReadResult                                       9     7      2       0
                                              7 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _Adc_Init                                            12    12      0     144
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  5     5      0      53
                                              2 BANK0      5     5      0
                       _Dio_Pin_Read
 ---------------------------------------------------------------------------------
 (5) _Dio_Pin_Read                                         2     2      0      29
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Adc_Init
   _Adc_ReadResult
   _Adc_StartConversion
   _Dio_Pin_Write
   _Dio_init
     _Dio_Config
   _Gpio_Init
   _MAX7219_ClearDisplay
     _SPI_Send_16bit
       _Dio_Pin_Write
   _MAX7219_DisplayData
     _SPI_Send_16bit
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
   _MAX7219_Init
     _SPI_Send_16bit
   _SPI_Init
     _Dio_Config
   ___lmul
     _Adc_ReadResult (ARG)
   ___lwdiv
   ___lwmod

 _ISR (ROOT)
   _Dio_Pin_Read

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON            0      0       0      0.0%
BITBANK0            62      0       0      0.0%
COMMON               0      0       0      0.0%
BANK0               62     40      45     72.6%
STACK                0      0       0      0.0%
DATA                 0      0      45      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Fri Sep 20 21:10:27 2024

        __end_of_Dio_Pin_Read 0363                             pc 0002                            l61 0271  
                          fsr 0004         __end_of_Dio_Pin_Write 02E6                _SPI_Send_16bit 017A  
                         u604 010F                           _ISR 029D                           u605 010D  
                         u614 0127                           u615 0124                           u544 02D1  
                         u705 0379                           u545 02CF                           u554 02DD  
                         u555 02DB                           u644 0144                           u564 018C  
                         u645 0142                           u565 0189                           u654 0150  
                         u735 0281                           u655 014E                           u585 01C0  
                         u825 0212                           u674 0165                           u675 0163  
                         u915 0259                           u684 0172                           u685 0170  
                         u845 021C                           u925 0262                           u855 0228  
                         u785 01E8                           u865 0232                           u795 01F0  
                         u965 0068                           u895 024A                           _WPU 0095  
                         fsr0 0004                          ?_ISR 0020                          ISR@i 0025  
                        l1021 02E3                          l1031 017F                          l1019 02D7  
                        l1035 019B                          l1133 027C                          l1053 011D  
                        l1213 0261                          l1071 016C                          l1063 014A  
                        l1207 0247                          l1065 0156                          l1081 031A  
                        l1161 01D0                          l1209 0253                          l1217 026C  
                        l1067 0158                          l1251 002F                          l1165 01E6  
                        l1253 0042                          l1191 0231                          l1183 020F  
                        l1271 0079                          l1185 021B                          l1273 00F3  
                        l1249 003E                          l1195 023C                          l1269 00EF  
                        l1285 001E                          u1057 0036                          u1067 00E1  
                        _IOCB 0096                          u1077 01A0                          u1087 01AA  
                        _GPIO 0005                          _main 0014                          btemp 005E  
                  _Dio_Config 0105                          start 000B                         ??_ISR 0022  
      __end_of_SPI_Send_16bit 01C8                         ?_main 0020                         _ANSEL 009F  
             __end_of___lwdiv 0241               __end_of___lwmod 0271                         i1l188 02BF  
                       i1l189 02C0                         u74_24 0358                         u74_25 0356  
         ___lmul@multiplicand 0034              __end_of_Adc_Init 039F                         main@i 0047  
            __end_of_SPI_Init 0318                         pclath 000A          __end_of_MAX7219_Init 0301  
                       status 0003                         wtemp0 005E  __end_of_MAX7219_ClearDisplay 032C  
            __end_of_Dio_init 0392               __initialization 000C                  __end_of_main 0105  
             ?_SPI_Send_16bit 002A                        ??_main 003D                        _ADCON0 001F  
            ??_Adc_ReadResult 0029                        _ADRESH 001E                        _ADRESL 009E  
                      u102_20 02BD                        u103_20 02BE                        i1l1145 0361  
                      i1l1295 02A1                        u109_27 02AE                        _TRISIO 0085  
                 ?_Dio_Config 0027                   _DispenserOn 004A                        ___lmul 01C8  
                   ??___lwdiv 0000                     ??___lwmod 0000            SPI_Send_16bit@data 002A  
                      saved_w 005E           _MAX7219_DisplayData 033F                  _Dio_Pin_Read 0351  
     __end_of__initialization 0012      MAX7219_DisplayData@digit 0038          ?_MAX7219_DisplayData 0033  
              __pcstackCOMMON 0000                     ?_Adc_Init 0020             __end_of_Gpio_Init 033F  
                   ?_SPI_Init 0020          _MAX7219_ClearDisplay 0318                     ?_Dio_init 0020  
                  __pbssBANK0 0048         MAX7219_ClearDisplay@i 0035         ??_MAX7219_DisplayData 0034  
                  __pmaintext 0014                       ?___lmul 0030        Dio_Pin_Write@pinNumber 0029  
                  __pintentry 0004                    ??_Adc_Init 0000                ___lmul@product 0039  
                  ??_SPI_Init 0000                  _MAX7219_Init 02E6         ?_MAX7219_ClearDisplay 0020  
          Dio_Config@pullType 0029                    ??_Dio_init 0000                    __stringtab 0363  
                     _Counter 0048              ??_SPI_Send_16bit 002C                       ___lwdiv 0207  
                     ___lwmod 0241                       __ptext1 0241                       __ptext2 0207  
                     __ptext3 01C8                       __ptext4 0301                       __ptext5 02E6  
                     __ptext6 033F                       __ptext7 0318                       __ptext8 017A  
                     __ptext9 02C7                     _DIO_State 004B          end_of_initialization 0012  
               _Dio_Config$71 002E                  ??_Dio_Config 002A                 _Dio_Pin_Write 02C7  
      ??_MAX7219_ClearDisplay 0033            __end_of_Dio_Config 017A           _Adc_StartConversion 0373  
        ?_Adc_StartConversion 0020                __end_of___lmul 0207                ?_Dio_Pin_Write 0027  
                   _Gpio_Init 032C           start_initialization 000C  MAX7219_DisplayData@character 0033  
                 __end_of_ISR 02C7                   _BCD_Enabled 004C         ??_Adc_StartConversion 0027  
                    ??___lmul 0038             SPI_Send_16bit@bit 0031                    ?_Gpio_Init 0020  
                   ___latbits 0000                 __pcstackBANK0 0020   __end_of_MAX7219_DisplayData 0351  
            _MAX7219_No_Table 0369           Dio_Config@direction 0027              ___lwdiv@dividend 0029  
             Dio_Config@state 0028               ??_Dio_Pin_Write 0028                      ?___lwdiv 0027  
                    ?___lwmod 002E                     __pstrings 0363           Dio_Config@pinNumber 0030  
            ___lwdiv@quotient 002B             interrupt_function 0004                      _Adc_Init 0392  
                    _SPI_Init 0301                   __stringbase 0368                   ??_Gpio_Init 0000  
                    _Dio_init 0383                 ?_Dio_Pin_Read 0020            Dio_Pin_Write@state 0027  
           ___lmul@multiplier 0030                _Adc_ReadResult 0271            __end_of__stringtab 0369  
                    _main$776 0045               ___lwdiv@divisor 0027                ??_Dio_Pin_Read 0020  
             ___lwdiv@counter 002D                      __ptext10 032C                      __ptext11 0383  
                    __ptext12 0105                      __ptext13 0373                      __ptext14 0271  
                    __ptext15 0392                      __ptext16 029D                      __ptext17 0351  
      __end_of_Adc_ReadResult 029D                 ?_MAX7219_Init 0020                    _INTCONbits 000B  
    __end_of_MAX7219_No_Table 0373                      intlevel1 0000              ___lwmod@dividend 0030  
 __end_of_Adc_StartConversion 0383               ?_Adc_ReadResult 0027                     stringcode 0363  
  Adc_StartConversion@channel 0028         Dio_Pin_Read@pinNumber 0021                ??_MAX7219_Init 0000  
                  _OPTION_REG 0081               ___lwmod@divisor 002E               ___lwmod@counter 0032  
                    stringdir 0363                      stringtab 0363  
